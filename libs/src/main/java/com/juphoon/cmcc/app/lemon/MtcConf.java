/**
 * @file MtcConf.java
 * @brief MtcConf interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcConf interface
 */
public class MtcConf implements MtcConfConstants {
/** 
 * @brief MTC conference create.
 *
 * @return The id of this new created conference on succeed, otherwise return ZMAXUINT.
 *
 * Different with the method of session creation, this function only malloc
 * the resource of conference. If you want to setup or join a conference, you need
 * step ahead by calling other functions.
 *
 * @see @ref MtcConf::Mtc_ConfSetup, @ref MtcConf::Mtc_ConfJoin
 */
  public static int Mtc_ConfCreate() {
    return MtcConfJNI.Mtc_ConfCreate();
  }

/** 
 * @brief MTC setup a new conference as the creator.
 *
 * If setup a new conference as the creator, GUI will be notified by callback which 
 * was set by @ref mtcConfCbOutgoing, @ref mtcConfCbAlerted, @ref mtcConfCbConned
 *
 * While receiving conference invitation, GUI will be notified by callback which 
 * was set by @ref mtcConfCbIncoming.
 *
 * @param [in] iConfId The id of conference which you want to setup.
 * @param [in] zCookie Used to correspond conference with UI resource.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfCreate, @ref MtcConf::Mtc_ConfJoin
 */
  public static int Mtc_ConfSetup(int iConfId, Object zCookie) {
    return MtcConfJNI.Mtc_ConfSetup(iConfId, zCookie);
  }

/** 
 * @brief MTC join an already existed conference.
 *
 * If join a conference, GUI will be notified by callback which 
 * was set by @ref mtcConfCbOutgoing, @ref mtcConfCbAlerted, @ref mtcConfCbConned
 *
 * @param [in] iConfId The id of conference which you want to join.
 * @param [in] zCookie Used to correspond conference with UI resource.
 * @param [in] pcUri The URI of existed conference.
 * @param [in] bVideo The video conference flag.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfCreate, @ref MtcConf::Mtc_ConfSetup
 */
  public static int Mtc_ConfJoin(int iConfId, Object zCookie, String pcUri, boolean bVideo) {
    return MtcConfJNI.Mtc_ConfJoin(iConfId, zCookie, pcUri, bVideo);
  }

/** 
 * @brief MTC alert an incoming conference invite which is notified by
 *        callback function which was set by @ref mtcConfCbIncoming.
 *
 * @param [in] iConfId The id of conference which you want to join.
 * @param [in] zCookie Used to correspond conference with UI resource.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * This function is used to tell the conference initiator that you have received
 * the invitation and give user an indication in UI layer. User should make a
 * decision whether accept the conference invitation.
 *
 * @see @ref mtcConfCbIncoming, @ref MtcConf::Mtc_ConfAcpt
 */
  public static int Mtc_ConfAlert(int iConfId, Object zCookie) {
    return MtcConfJNI.Mtc_ConfAlert(iConfId, zCookie);
  }

/** 
 * @brief MTC accept an incoming conference invite which is notified by
 *        callback function which was set by @ref mtcConfCbIncoming.
 *
 * If accept a conference invite, GUI will be notified by callback which
 * was set by @ref mtcConfCbConned
 *
 * @param [in] iConfId The id of conference which you want to accept.
 * @param [in] zCookie Used to correspond conference with UI resource.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref mtcConfCbIncoming, @ref MtcConf::Mtc_ConfAlert
 */
  public static int Mtc_ConfAcpt(int iConfId, Object zCookie) {
    return MtcConfJNI.Mtc_ConfAcpt(iConfId, zCookie);
  }

/** 
 * @brief MTC conference hold.
 *
 * If hold the conference successfully, GUI will be notified by callback which 
 * was set by @ref mtcConfCbHoldOk
 *
 * If unhold the conference successfully, GUI will be notified by callback which 
 * was set by @ref mtcConfCbUnHoldOk
 *
 * If hold the conference failed, GUI will be notified by callback which
 * was set by @ref mtcConfCbHoldFailed
 *
 * If unhold the conference failed, GUI will be notified by callback which
 * was set by @ref mtcConfCbUnHoldFailed
 *
 * while receiving hold conference, GUI will be notified by callback which 
 * was set by @ref mtcConfCbHeld
 * 
 * while receiving unhold conference, GUI will be notified by callback which 
 * was set by @ref mtcConfCbUnHeld
 *
 * @param [in] iConfId The id of conference which you want to hold or unhold.
 * @param [in] bHold Indicate the willingness of hold or unhold.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfSetup
 */
  public static int Mtc_ConfHold(int iConfId, boolean bHold) {
    return MtcConfJNI.Mtc_ConfHold(iConfId, bHold);
  }

/** 
 * @brief MTC invite new participant to conference. 
 *
 * @param [in] iConfId The id of conference to which you want invite new
 *                      participant.
 * @param [in] pcUri The uri of destination participant.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfKickUser, @ref MtcConf::Mtc_ConfIvtSess
 */
  public static int Mtc_ConfIvtUser(int iConfId, String pcUri) {
    return MtcConfJNI.Mtc_ConfIvtUser(iConfId, pcUri);
  }

/** 
 * @brief MTC invite new participant list to a new conference, this interface 
 *        will setup a new conference automatically.
 *
 * @param [in] iConfId The id of conference to which you want invite new
 *                      participant list.
 * @param [in] zCookie Used to correspond conference with UI resource.
 * @param [in] iPartpLstId The participant list id, UI shall use 
 *                      @ref MtcPartp::Mtc_PartpLstCreate, @ref MtcPartp::Mtc_PartpLstAddPartp 
 *                      to create the id.
 * @param [in] bVideo The video conference flag.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfKickUser
 */
  public static int Mtc_ConfIvtUserLst(int iConfId, Object zCookie, int iPartpLstId, boolean bVideo) {
    return MtcConfJNI.Mtc_ConfIvtUserLst(iConfId, zCookie, iPartpLstId, bVideo);
  }

/** 
 * @brief MTC kick participant from conference. 
 *
 * @param [in] iConfId The id of conference to which you want kick participant.
 * @param [in] pcUri The uri of destination participant.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfIvtUser, @ref MtcConf::Mtc_ConfIvtSess
 */
  public static int Mtc_ConfKickUser(int iConfId, String pcUri) {
    return MtcConfJNI.Mtc_ConfKickUser(iConfId, pcUri);
  }

/** 
 * @brief MTC invite new participant, which you already have a session with,
 *        to conference. 
 *
 * @param [in] iConfId The id of conference to which you want to invite new participant.
 * @param [in] iSessId The id of the session which you have with the
                        want-invited participant.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfKickUser
 *
 */
  public static int Mtc_ConfIvtSess(int iConfId, int iSessId) {
    return MtcConfJNI.Mtc_ConfIvtSess(iConfId, iSessId);
  }

/** 
 * @brief MTC invite new participant list, which you already have a session with,
 *        to conference, this interface will setup a new conference automatically.
 *
 * @param [in] iConfId The id of conference to which you want invite new
 *                      participant.
 * @param [in] zCookie Used to correspond conference with UI resource.
 * @param [in] iSessLstId The session list id which you have with the
 *                      want-invited participant, UI shall use 
 *                      @ref MtcPartp::Mtc_PartpLstCreate, @ref MtcPartp::Mtc_PartpLstAddPartp, 
 *                      @ref MtcPartp::Mtc_PartpSetSessId to create the id.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfKickUser
 */
  public static int Mtc_ConfIvtSessLst(int iConfId, Object zCookie, int iSessLstId) {
    return MtcConfJNI.Mtc_ConfIvtSessLst(iConfId, zCookie, iSessLstId);
  }

/** 
 * @brief MTC conference terminate.
 *
 * @param [in] iConfId The id of conference which you want to terminate.
 * @param [in] iReason Indicate the terminate reason which may trigger some
                        service in S-CSCF.
 * @param [in] bTermConf the terminate conf flag. If true, terminate the conferece
 *                     (which means the other participants will receive BYE to terminate the conference);
 *                     If false, only leave the conference.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * Actually Mtc_ConfTerm does not free all resource allocated for this
 * conference. It only starts a terminating procedure. All resource will be
 * freed automatically when the procedure ends.
 *
 * @see @ref MtcConf::Mtc_ConfSetup, @ref MtcConf::Mtc_ConfJoin, @ref MtcCallConstants::EN_MTC_CALL_TERM_REASON_NORMAL
 */
  public static int Mtc_ConfTerm(int iConfId, int iReason, boolean bTermConf) {
    return MtcConfJNI.Mtc_ConfTerm(iConfId, iReason, bTermConf);
  }

/** 
 * @brief MTC conference get conference state.
 *
 * @param [in] iConfId The id of conference which you want to get the conference state.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 */
  public static int Mtc_ConfGetState(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetState(iConfId);
  }

/** 
 * @brief MTC select one participant as remote image.
 *
 * @param [in] iConfId The id of conference to which you want select one
 *                      participant as remote image.
 * @param [in] pcUri The uri of the selected participant.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 */
  public static int Mtc_ConfVideoSelectUsr(int iConfId, String pcUri) {
    return MtcConfJNI.Mtc_ConfVideoSelectUsr(iConfId, pcUri);
  }

/** 
 * @brief MTC remove one participant from conference.
 *      If one participant kicked out from the conference, its video image window still exist.
 *      Chairman should use this function to remove its video image window.
 *      The participants would receive callbacks set by @ref mtcConfCbVideoStrmPtptUpdt.
 *
 * @param [in] iConfId The id of conference to which you want to remove.
 * @param [in] pcNum The phone number(e.g. +8613800000000) of the removed participant 
 *                with country code, neither TEL uri nor SIP URI.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 */
  public static int Mtc_ConfRmvUser(int iConfId, String pcNum) {
    return MtcConfJNI.Mtc_ConfRmvUser(iConfId, pcNum);
  }

/** 
 * @brief MTC conference get cookie value.
 *
 * @param [in] iConfId The id of conference which you want to get cookie of.
 *
 * @return The cookie of conference.
 *
 * The cookie value could be set by @ref MtcConf::Mtc_ConfSetup, @ref MtcConf::Mtc_ConfJoin or
 * Mtc_ConfAcpt previously.
 *
 * @see @ref MtcConf::Mtc_ConfSetup, @ref MtcConf::Mtc_ConfJoin, @ref MtcConf::Mtc_ConfAcpt
 */
  public static Object Mtc_ConfGetCookie(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetCookie(iConfId);
  }

/** 
 * @brief MTC conference get peer URI and display name.
 *
 * @param [in] iConfId The id of conference which you want to get.
 * @param [out] ppcDispName The display name of conference.
 * @param [out] ppcUri The URI of conference.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfGetConfUri, @ref MtcConf::Mtc_ConfGetInitiatorUri
 */
  public static int Mtc_ConfGetPeerUri(int iConfId, MtcString ppcDispName, MtcString ppcUri) {
    return MtcConfJNI.Mtc_ConfGetPeerUri(iConfId, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC conference get conference URI and display name.
 *
 * @param [in] iConfId The id of conference which you want to get.
 * @param [out] ppcDispName The display name of conference.
 * @param [out] ppcUri The URI of conference.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfGetPeerUri, @ref MtcConf::Mtc_ConfGetInitiatorUri
 */
  public static int Mtc_ConfGetConfUri(int iConfId, MtcString ppcDispName, MtcString ppcUri) {
    return MtcConfJNI.Mtc_ConfGetConfUri(iConfId, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC conference get initiator URI and display name.
 *
 * @param [in] iConfId The id of conference which you want to get.
 * @param [out] ppcDispName The display name of conference.
 * @param [out] ppcUri The URI of conference.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfGetPeerUri, @ref MtcConf::Mtc_ConfGetConfUri
 */
  public static int Mtc_ConfGetInitiatorUri(int iConfId, MtcString ppcDispName, MtcString ppcUri) {
    return MtcConfJNI.Mtc_ConfGetInitiatorUri(iConfId, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC conference get paticipant size.
 *
 * @param [in] iConfId The id of conference which you want get.
 *
 * @return The paticipant size.
 *
 * @see MtcConf::Mtc_ConfGetPartpUri, Mtc_ConfGetPartpStat
 */
  public static int Mtc_ConfGetPartpSize(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetPartpSize(iConfId);
  }

/** 
 * @brief MTC conference get paticipant uri and display name.
 *
 * @param [in] iConfId The id of conference which you want get.
 * @param [in] iIndex The paticipant index.
 * @param [out] ppcDispName The display name of paticipant.
 * @param [out] ppcUri The uri of paticipant.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfGetPartpSize, @ref MtcConf::Mtc_ConfGetPartpStat
 */
  public static int Mtc_ConfGetPartpUri(int iConfId, int iIndex, MtcString ppcDispName, MtcString ppcUri) {
    return MtcConfJNI.Mtc_ConfGetPartpUri(iConfId, iIndex, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC conference get paticipant state.
 *
 * @param [in] iConfId The id of conference which you want get.
 * @param [in] iIndex The paticipant index.
 *
 * @retrun The paticipant state, @see @ref MtcConfConstants::EN_MTC_CONF_PARTP_STATE_PENDING.
 *
 * @see @ref MtcConf::Mtc_ConfGetPartpSize, @ref MtcConf::Mtc_ConfGetPartpUri
 */
  public static int Mtc_ConfGetPartpStat(int iConfId, int iIndex) {
    return MtcConfJNI.Mtc_ConfGetPartpStat(iConfId, iIndex);
  }

/** 
 * @brief MTC conference get the mute status of microphone.
 *
 * @param [in] iConfId The ID of conference which you want to get.
 *
 * @retval true on muted.
 * @retval false on not muted.
 *
 * @see @ref MtcConf::Mtc_ConfSetMicMute
 */
  public static boolean Mtc_ConfGetMicMute(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetMicMute(iConfId);
  }

/** 
 * @brief MTC conference set the mute status of microphone.
 *
 * @param [in] iConfId The ID of conference which you want to set.
 * @param [in] bMute Indicate whether to mute the microphone.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfGetMicMute
 */
  public static int Mtc_ConfSetMicMute(int iConfId, boolean bMute) {
    return MtcConfJNI.Mtc_ConfSetMicMute(iConfId, bMute);
  }

/** 
 * @brief MTC conference get the mute status of speaker.
 *
 * @param [in] iConfId The ID of conference which you want to get.
 *
 * @retval true on muted.
 * @retval false on not muted.
 *
 * @see @ref MtcConf::Mtc_ConfSetSpkMute
 */
  public static boolean Mtc_ConfGetSpkMute(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetSpkMute(iConfId);
  }

/** 
 * @brief MTC conference set the mute status of speaker.
 *
 * @param [in] iConfId The ID of conference which you want to set.
 * @param [in] bMute Indicate whether to mute the speaker.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcConf::Mtc_ConfGetSpkMute
 */
  public static int Mtc_ConfSetSpkMute(int iConfId, boolean bMute) {
    return MtcConfJNI.Mtc_ConfSetSpkMute(iConfId, bMute);
  }

/** 
 * @brief MTC conference send DTMF info.
 *
 * @param [in] iConfId The ID of conference which you want to send DTMF info.
 * @param [in] iDtmfType DTMF type which will be sent, see @ref MtcCallConstants::EN_MTC_CALL_DTMF_0.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_ConfDtmf(int iConfId, int iDtmfType) {
    return MtcConfJNI.Mtc_ConfDtmf(iConfId, iDtmfType);
  }

/** 
 * @brief MTC conference attach camera.
 *
 * @param [in] iConfId The ID of conference.
 * @param [in] pcName The name string of camera.
 * @param [in] iStrmId The ID of video stream.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_ConfCameraAttach(int iConfId, int iStrmId, String pcName) {
    return MtcConfJNI.Mtc_ConfCameraAttach(iConfId, iStrmId, pcName);
  }

/** 
 * @brief MTC conference detach camera.
 *
 * @param [in] iConfId The ID of conference.
 * @param [in] iStrmId The ID of video stream.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_ConfCameraDetach(int iConfId, int iStrmId) {
    return MtcConfJNI.Mtc_ConfCameraDetach(iConfId, iStrmId);
  }

/**
 * @brief MTC get conference session name.
 *
 * @param [in] iConfId The ID of conference.
 * @param [in] iStrmId The ID of video stream.
 *
 * @return The Render name string when found, otherwise "".
 */
  public static String Mtc_ConfGetStrmName(int iConfId, int iStrmId) {
    return MtcConfJNI.Mtc_ConfGetStrmName(iConfId, iStrmId);
  }

/**
 * @brief MTC get conference stream ID from stream render name.
 *
 * @param pcName Render name string of the video stream.
 *
 * @return The ID of conference video stream ID when found, otherwise ZMAXUINT.
 */
  public static int Mtc_ConfStrmIdFromStrmName(int iConfId, String pcName) {
    return MtcConfJNI.Mtc_ConfStrmIdFromStrmName(iConfId, pcName);
  }

/**
 * @brief MTC get conference video stream count.
 *
 * @param [in] iConfId The ID of conference.
 *
 * @return The count of conference video stream.
 */
  public static int Mtc_ConfGetVideoStrmCount(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetVideoStrmCount(iConfId);
  }

/**
 * @brief MTC get conference  video stream id by index.
 *
 * @param [in] iConfId The ID of conference.
 *
 * @return The ID of conference video stream when found, otherwise ZMAXUINT.
 */
  public static int Mtc_ConfGetVideoStrmIdByIndex(int iConfId, int iIndex) {
    return MtcConfJNI.Mtc_ConfGetVideoStrmIdByIndex(iConfId, iIndex);
  }

/**
 * @brief MTC get conference  video stream by stream id statistics.
 *
 * @param [in] iConfId The ID of conference.
 * @param [in] iStrmId The ID of video stream.  One conference may contains
 *                                one more video stream.
 *
 * @retval String of video statistics.
 */
  public static String Mtc_ConfGetVideoStat(int iConfId, int iStrmId) {
    return MtcConfJNI.Mtc_ConfGetVideoStat(iConfId, iStrmId);
  }

/**
 * @brief MTC get conference  audio statistics.
 *
 * @param [in] iConfId The ID of conference.
 *
 * @retval String of video statistics.
 */
  public static String Mtc_ConfGetAudioStat(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetAudioStat(iConfId);
  }

/**
 * @brief MTC get conference get max image number.
 *
 * @param [in] iConfId The ID of conference.
 *
 * @retval max image number of video conference.
 */
  public static int Mtc_ConfGetMaxImageNum(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetMaxImageNum(iConfId);
  }

/**
 * @brief MTC get conference get video switch mode.
 *
 * @param [in] iConfId The ID of conference.
 *
 * @retval video switch mode of video conference, @ref MtcConfConstants::EN_MTC_CONF_VOICE_CONTROL_MODE. 
 */
  public static int Mtc_ConfGetVideoSwithMode(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetVideoSwithMode(iConfId);
  }

/**
 * @brief MTC get conference get multi-picture mode.
 *
 * @param [in] iConfId The ID of conference.
 *
 * @retval video multi-picture mode of video conference, @ref MtcConfConstants::EN_MTC_CONF_MULTI_PIC_ONE_BIG.
 */
  public static int Mtc_ConfGetMultiPicMode(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetMultiPicMode(iConfId);
  }

/**
 * @brief MTC conference enable/disable dynamic reset encoder to change video image aspect.
 *            The function should be called before @ref MtcConf::Mtc_ConfCameraAttach.
 *
 * @param [in] iConfId The ID of conference.
 * @param [in] bEnable true to enable dynamic reset encoder, false to disable it
 * @param [in] fFixedAspect,
 *             if < 0 the outgoing video image will be adaptive the capture (camera, always 4:3) aspect, 
 *             if =0 it will use codec  settings(always 16:9, to be adaptive with the devices), 
 *             if >0 will be with the setting fixed aspect(like 1.33, 1.77).
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 */
  public static int Mtc_ConfEnableAdaptiveAspect(int iConfId, boolean bEnable, float fFixedAspect) {
    return MtcConfJNI.Mtc_ConfEnableAdaptiveAspect(iConfId, bEnable, fFixedAspect);
  }

/**
 * @brief Reccord mic start.
 *
 * It will reccord from mic to file.
 *
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 *
 * @retval MtcCommonConstants::ZOK Audio Reccord  successfully.
 * @retval MtcCommonConstants::ZFAILED Audio Reccord failed.
 *
 * @see @ref MtcConf::Mtc_ConfRecMicStop
 */
  public static int Mtc_ConfRecMicStart(String pcFileName, short ucFileType) {
    return MtcConfJNI.Mtc_ConfRecMicStart(pcFileName, ucFileType);
  }

/**
 * @brief Reccord Audio stop.
 *
 * @see @ref MtcConf::Mtc_ConfRecMicStart
 */
  public static int Mtc_ConfRecMicStop() {
    return MtcConfJNI.Mtc_ConfRecMicStop();
  }

/** 
 * @brief MTC session record playout.
 *
 * @param [in] iConfId The ID of conference which you want to record, 
 *                      if iConfId is invalid, record the mix playout.
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_ConfRecPlayoutStart(int iConfId, String pcFileName, short ucFileType) {
    return MtcConfJNI.Mtc_ConfRecPlayoutStart(iConfId, pcFileName, ucFileType);
  }

/** 
 * @brief MTC session stop record playout.
 *
 * @param [in] iConfId The ID of conference which you want to stop record, 
 *                      if iConfId is invalid, stop record the mix playout.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_ConfRecPlayoutStop(int iConfId) {
    return MtcConfJNI.Mtc_ConfRecPlayoutStop(iConfId);
  }

/** 
 * @brief MTC conference start send sound from file.
 *
 * @param [in] iConfId The ID of conference which you want to start send sound from file.
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 * @param [in] bLoop false if play once.
 * @param [in] bMix If false, microphone sound is replaced by file sound;
 *                  if true, microphone sound is mixed with file sound
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_ConfSndStartSend(int iConfId, String pcFileName, short ucFileType, boolean bLoop, boolean bMix) {
    return MtcConfJNI.Mtc_ConfSndStartSend(iConfId, pcFileName, ucFileType, bLoop, bMix);
  }

/** 
 * @brief MTC conference stop send sound.
 *
 * @param [in] iConfId The ID of conference which you want to stop send sound from file.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_ConfSndStopSend(int iConfId) {
    return MtcConfJNI.Mtc_ConfSndStopSend(iConfId);
  }

/**
 * @brief MTC conference play file as camera.
 *
 * @param [in] pcFileName Video file name.
 * @param [in] iAudioStrmId Audio stream id, @see MtcConf::Mtc_ConfGetStrmId.
 * @param [in] iCycle 0 to play once, otherwise to loop play .
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcConf::Mtc_ConfFilePlayStop
 */
  public static int Mtc_ConfFilePlayAsCamera(String pcFileName, int iAudioStrmId, int iCycle) {
    return MtcConfJNI.Mtc_ConfFilePlayAsCamera(pcFileName, iAudioStrmId, iCycle);
  }

/**
 * @brief MTC conference stop play file.
 *
 * @param [in] pcFileName Video file name.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcConf::Mtc_ConfFilePlayAsCamera
 */
  public static int Mtc_ConfFilePlayStop(String pcFileName) {
    return MtcConfJNI.Mtc_ConfFilePlayStop(pcFileName);
  }

/**
 * @brief Get stream ID of the conference.
 *
 * @param [in] iConfId The ID of conference.
 * @param [in] ucStrmType The stream type of conference, @ref EN_MTC_CONF_MEDIA_TYPE.
 *
 * @return The stream id of the conference on succeed, otherwise return ZMAXUINT.
 *
 */
  public static int Mtc_ConfGetStrmId(int iConfId, short ucStrmType) {
    return MtcConfJNI.Mtc_ConfGetStrmId(iConfId, ucStrmType);
  }

/**
 * @brief MTC conference get media server ip address string.
 * 
 * @param [in] iConfId The ID of conference.
 *
 * @return Media server ip address string, like "192.168.0.1".
 *
 */
  public static String Mtc_ConfGetMediaServerIpAddr(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetMediaServerIpAddr(iConfId);
  }

/**
 * @brief MTC conference get conference type.
 * 
 * @param [in] iConfId The ID of conference.
 *
 * @return Conference type @ref MtcConfConstants::EN_MTC_CONF_MCU.
 *
 */
  public static short Mtc_ConfGetConfType(int iConfId) {
    return MtcConfJNI.Mtc_ConfGetConfType(iConfId);
  }

}
