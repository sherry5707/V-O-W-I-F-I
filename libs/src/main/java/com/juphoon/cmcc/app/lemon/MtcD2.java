/**
 * @file MtcD2.java
 * @brief MtcD2 interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcD2 interface
 */
public class MtcD2 {
/**
 * @brief Create image object.
 * @return            Image object.
 */
  public static SWIGTYPE_p_MTC_IMG Mtc_D2CreateImage() {
    return new SWIGTYPE_p_MTC_IMG(MtcD2JNI.Mtc_D2CreateImage(), true);
  }

/**
 * @brief Delete image object.
 * @param  zImage The image object.
 */
  public static void Mtc_D2DeleteImage(SWIGTYPE_p_MTC_IMG zImage) {
    MtcD2JNI.Mtc_D2DeleteImage(SWIGTYPE_p_MTC_IMG.getCPtr(zImage));
  }

/**
 * @brief Create image object from text.
 * @param  pcMsg The text.
 * @return       The Image object.
 */
  public static SWIGTYPE_p_MTC_IMG Mtc_D2ParseImage(String pcMsg) {
    return new SWIGTYPE_p_MTC_IMG(MtcD2JNI.Mtc_D2ParseImage(pcMsg), true);
  }

/**
 * @brief Save image object to text.
 * @param  zImage The image object.
 * @return        The text string.
 */
  public static String Mtc_D2PrintImage(SWIGTYPE_p_MTC_IMG zImage) {
    return MtcD2JNI.Mtc_D2PrintImage(SWIGTYPE_p_MTC_IMG.getCPtr(zImage));
  }

/**
 * @brief Set image parameters.
 * @param  zImage The image object.
 * @param  pcInfo The parameters in JSON format which contains
 *                @ref MtcDoodlePageIdKey
 *                @ref MtcDoodleImageTypeKey
 *                @ref MtcDoodleImageNameKey
 *                @ref MtcDoodleImageUriKey
 *                @ref MtcDoodleResolutionKey
 *                @ref MtcDoodlePositionKey
 * @return        MtcCommonConstants::ZOK on succeed, otherwise failed.
 */
  public static int Mtc_D2SetImageParms(SWIGTYPE_p_MTC_IMG zImage, String pcInfo) {
    return MtcD2JNI.Mtc_D2SetImageParms(SWIGTYPE_p_MTC_IMG.getCPtr(zImage), pcInfo);
  }

/**
 * @brief Get image parameters.
 * @param  zImage The image object.
 * @return        The parameters in JSON format which contains
 *                @ref MtcDoodlePageIdKey
 *                @ref MtcDoodleImageTypeKey
 *                @ref MtcDoodleImageNameKey
 *                @ref MtcDoodleImageUriKey
 *                @ref MtcDoodleResolutionKey
 *                @ref MtcDoodlePositionKey
 */
  public static String Mtc_D2GetImageParms(SWIGTYPE_p_MTC_IMG zImage) {
    return MtcD2JNI.Mtc_D2GetImageParms(SWIGTYPE_p_MTC_IMG.getCPtr(zImage));
  }

/**
 * @brief Create action object.
 * @return            The action object.
 */
  public static SWIGTYPE_p_MTC_ACT Mtc_D2CreateAction() {
    return new SWIGTYPE_p_MTC_ACT(MtcD2JNI.Mtc_D2CreateAction(), true);
  }

/**
 * @brief Delete action object.
 * @param  zAction The action object.
 */
  public static void Mtc_D2DeleteAction(SWIGTYPE_p_MTC_ACT zAction) {
    MtcD2JNI.Mtc_D2DeleteAction(SWIGTYPE_p_MTC_ACT.getCPtr(zAction));
  }

/**
 * @brief Create action object from text.
 * @param  pcMsg The text.
 * @return       The action object.
 */
  public static SWIGTYPE_p_MTC_ACT Mtc_D2ParseAction(String pcMsg) {
    return new SWIGTYPE_p_MTC_ACT(MtcD2JNI.Mtc_D2ParseAction(pcMsg), true);
  }

/**
 * @brief Save action object to text.
 * @param  zAction The action object.
 * @return         The text string.
 */
  public static String Mtc_D2PrintAction(SWIGTYPE_p_MTC_ACT zAction) {
    return MtcD2JNI.Mtc_D2PrintAction(SWIGTYPE_p_MTC_ACT.getCPtr(zAction));
  }

/**
 * @brief Set action parameters.
 * @param  zAction The action object.
 * @param  pcInfo  The parameters in JSON format which contains
 *                 @ref MtcDoodleActionTypeKey
 *                 @ref MtcDoodleSeqNoKey
 *                 @ref MtcDoodleBrushKey
 *                 @ref MtcDoodlePageIdKey
 *                 @ref MtcDoodleContentKey
 * @return         MtcCommonConstants::ZOK on succeed, otherwise failed.
 */
  public static int Mtc_D2SetActionParms(SWIGTYPE_p_MTC_ACT zAction, String pcInfo) {
    return MtcD2JNI.Mtc_D2SetActionParms(SWIGTYPE_p_MTC_ACT.getCPtr(zAction), pcInfo);
  }

/**
 * @brief Get action parameters.
 * @param  zAction The action object.
 * @return         The parameters in JSON format which contains
 *                 @ref MtcDoodleActionTypeKey
 *                 @ref MtcDoodleSeqNoKey
 *                 @ref MtcDoodleBrushKey
 *                 @ref MtcDoodlePageIdKey
 *                 @ref MtcDoodleContentKey
 */
  public static String Mtc_D2GetActionParms(SWIGTYPE_p_MTC_ACT zAction) {
    return MtcD2JNI.Mtc_D2GetActionParms(SWIGTYPE_p_MTC_ACT.getCPtr(zAction));
  }

/**
 * @brief Add action position.
 * @param  zAction The action object.
 * @param  fX      The X value from -1.0 to 1.0.
 * @param  fY      The Y value from -1.0 to 1.0.
 * @return         MtcCommonConstants::ZOK on succeed, otherwise failed.
 */
  public static int Mtc_D2AddActionPosition(SWIGTYPE_p_MTC_ACT zAction, float fX, float fY) {
    return MtcD2JNI.Mtc_D2AddActionPosition(SWIGTYPE_p_MTC_ACT.getCPtr(zAction), fX, fY);
  }

/**
 * @brief Set action positions.
 * @param  zAction The action object.
 * @param  fX      The value from -1.0 to 1.0.
 * @param  fY      The value from -1.0 to 1.0.
 * @param  iIntVal The interval.
 * @return         MtcCommonConstants::ZOK on succeed, otherwise failed.
 */
  public static int Mtc_D2AddActionPositionX(SWIGTYPE_p_MTC_ACT zAction, float fX, float fY, int iIntVal) {
    return MtcD2JNI.Mtc_D2AddActionPositionX(SWIGTYPE_p_MTC_ACT.getCPtr(zAction), fX, fY, iIntVal);
  }

/**
 * @brief Get count of positions in action object.
 * @param  zAction The action object.
 * @return         The count of positions.
 */
  public static int Mtc_D2GetActionPositionCount(SWIGTYPE_p_MTC_ACT zAction) {
    return MtcD2JNI.Mtc_D2GetActionPositionCount(SWIGTYPE_p_MTC_ACT.getCPtr(zAction));
  }

/**
 * @brief Get the interval of position.
 * @param  zAction The action object.
 * @param  iIndex  The index of position, from 0 to count-1.
 * @return         The interval in milliseconds.
 */
  public static int Mtc_D2GetActionIntval(SWIGTYPE_p_MTC_ACT zAction, int iIndex) {
    return MtcD2JNI.Mtc_D2GetActionIntval(SWIGTYPE_p_MTC_ACT.getCPtr(zAction), iIndex);
  }

/**
 * @brief Get the X value of position.
 * @param  zAction The action object.
 * @param  iIndex  The index of position, from 0 to count-1.
 * @return         The X value of postion.
 */
  public static float Mtc_D2GetActionPositionX(SWIGTYPE_p_MTC_ACT zAction, int iIndex) {
    return MtcD2JNI.Mtc_D2GetActionPositionX(SWIGTYPE_p_MTC_ACT.getCPtr(zAction), iIndex);
  }

/**
 * @brief Get the Y value of position.
 * @param  zAction The action object.
 * @param  iIndex  The index of position, from 0 to count-1.
 * @return         The Y value of postion.
 */
  public static float Mtc_D2GetActionPositionY(SWIGTYPE_p_MTC_ACT zAction, int iIndex) {
    return MtcD2JNI.Mtc_D2GetActionPositionY(SWIGTYPE_p_MTC_ACT.getCPtr(zAction), iIndex);
  }

/**
 * @brief Get the path of action.
 * @param  zAction The action object.
 * @return         The path in JSON format which is array contains
 *                 all positions. Each position is array of number.
 *                 First number is interval in milliseoncds.
 *                 Second number is X value of position.
 *                 Third number is Y value of position.
 */
  public static String Mtc_D2GetActionPath(SWIGTYPE_p_MTC_ACT zAction) {
    return MtcD2JNI.Mtc_D2GetActionPath(SWIGTYPE_p_MTC_ACT.getCPtr(zAction));
  }

/**
 * @brief Create session object.
 * @return            The session object.
 */
  public static SWIGTYPE_p_MTC_SESS Mtc_D2CreateSession() {
    return new SWIGTYPE_p_MTC_SESS(MtcD2JNI.Mtc_D2CreateSession(), true);
  }

/**
 * @brief Delete session object.
 * @param  zSession The session object.
 */
  public static void Mtc_D2DeleteSession(SWIGTYPE_p_MTC_SESS zSession) {
    MtcD2JNI.Mtc_D2DeleteSession(SWIGTYPE_p_MTC_SESS.getCPtr(zSession));
  }

/**
 * @brief Set session page count.
 * @param  zSession   The session object.
 * @param  iPageCount The page count.
 * @return          MtcCommonConstants::ZOK on succeed, otherwise failed.
 */
  public static int Mtc_D2SessionSetPageCount(SWIGTYPE_p_MTC_SESS zSession, int iPageCount) {
    return MtcD2JNI.Mtc_D2SessionSetPageCount(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), iPageCount);
  }

/**
 * @brief Add page in session.
 * @param  zSession The session object.
 * @return          MtcCommonConstants::ZOK on succeed, otherwise failed.
 */
  public static int Mtc_D2SessionAddPage(SWIGTYPE_p_MTC_SESS zSession) {
    return MtcD2JNI.Mtc_D2SessionAddPage(SWIGTYPE_p_MTC_SESS.getCPtr(zSession));
  }

/**
 * @brief Get page count in session.
 * @param  zSession The session object.
 * @return          The page count.
 */
  public static int Mtc_D2SessionGetPageCount(SWIGTYPE_p_MTC_SESS zSession) {
    return MtcD2JNI.Mtc_D2SessionGetPageCount(SWIGTYPE_p_MTC_SESS.getCPtr(zSession));
  }

/**
 * @brief Add image object to session.
 *
 * You must not delete image after add this image to the session.
 * The image will replace the exist one with same MtcDoodlePageIdKey.
 * 
 * @param  zSession The session object.
 * @param  zImage   The image object.
 * @return          MtcCommonConstants::ZOK on succeed, otherwise failed.
 */
  public static int Mtc_D2SessionSetImage(SWIGTYPE_p_MTC_SESS zSession, SWIGTYPE_p_MTC_IMG zImage) {
    return MtcD2JNI.Mtc_D2SessionSetImage(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), SWIGTYPE_p_MTC_IMG.getCPtr(zImage));
  }

/**
 * @brief Enumrate the image object.
 * @param  zSession The session object.
 * @param  iIndex   The index of image, from 0 to count-1.
 * @return          The image object.
 */
  public static SWIGTYPE_p_MTC_IMG Mtc_D2SessionGetImage(SWIGTYPE_p_MTC_SESS zSession, int iPageId) {
    return new SWIGTYPE_p_MTC_IMG(MtcD2JNI.Mtc_D2SessionGetImage(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), iPageId), true);
  }

/**
 * @brief Set context-free action of session.
 * @param  zSession The session object.
 * @param  pcKey    The key string.
 * @param  zAction  The action object.
 * @return          MtcCommonConstants::ZOK on succeed, otherwise failed.
 */
  public static int Mtc_D2SessionSetCfAction(SWIGTYPE_p_MTC_SESS zSession, String pcKey, SWIGTYPE_p_MTC_ACT zAction) {
    return MtcD2JNI.Mtc_D2SessionSetCfAction(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), pcKey, SWIGTYPE_p_MTC_ACT.getCPtr(zAction));
  }

/**
 * @brief Get context-free action of session.
 * @param  zSession The session object.
 * @param  pcKey    The key string.
 * @return          The action object when found. Otherwise return ZNULL.
 */
  public static SWIGTYPE_p_MTC_ACT Mtc_D2SessionGetCfAction(SWIGTYPE_p_MTC_SESS zSession, String pcKey) {
    return new SWIGTYPE_p_MTC_ACT(MtcD2JNI.Mtc_D2SessionGetCfAction(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), pcKey), true);
  }

/**
 * @brief Get count of context-free action in session.
 * @param  zSession The session object.
 * @return          The count of context-free actions in session.
 */
  public static int Mtc_D2SessionGetCfActionCount(SWIGTYPE_p_MTC_SESS zSession) {
    return MtcD2JNI.Mtc_D2SessionGetCfActionCount(SWIGTYPE_p_MTC_SESS.getCPtr(zSession));
  }

/**
 * @brief Enumrate the key of context-free action in session.
 * @param  zSession The session object.
 * @param  iIndex   The index value, from 0 to count-1.
 * @return          The key of action.
 */
  public static String Mtc_D2SessionEnumCfActionKey(SWIGTYPE_p_MTC_SESS zSession, int iIndex) {
    return MtcD2JNI.Mtc_D2SessionEnumCfActionKey(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), iIndex);
  }

/**
 * @brief Enumrate the context-free action in session by index.
 * @param  zSession The session object.
 * @param  iIndex   The index value, from 0 to count-1.
 * @return          The context-free action object.
 */
  public static SWIGTYPE_p_MTC_ACT Mtc_D2SessionEnumCfAction(SWIGTYPE_p_MTC_SESS zSession, int iIndex) {
    return new SWIGTYPE_p_MTC_ACT(MtcD2JNI.Mtc_D2SessionEnumCfAction(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), iIndex), true);
  }

/**
 * @brief Add action object to session.
 * @param  zSession The session object.
 * @param  zAction  The action object.
 * @return          MtcCommonConstants::ZOK on succeed, otherwise failed.
 */
  public static int Mtc_D2SessionAddAction(SWIGTYPE_p_MTC_SESS zSession, SWIGTYPE_p_MTC_ACT zAction) {
    return MtcD2JNI.Mtc_D2SessionAddAction(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), SWIGTYPE_p_MTC_ACT.getCPtr(zAction));
  }

/**
 * @brief Get count of actions.
 * @param  zSession The session object.
 * @return          The count of actions.
 */
  public static int Mtc_D2SessionGetActionCount(SWIGTYPE_p_MTC_SESS zSession, int iPageId) {
    return MtcD2JNI.Mtc_D2SessionGetActionCount(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), iPageId);
  }

/**
 * @brief Enumrate the actions in session.
 * @param  zSession The session object.
 * @param  iIndex   The index of action, from 0 to count-1.
 * @return          The action object.
 */
  public static SWIGTYPE_p_MTC_ACT Mtc_D2SessionEnumAction(SWIGTYPE_p_MTC_SESS zSession, int iPageId, int iIndex) {
    return new SWIGTYPE_p_MTC_ACT(MtcD2JNI.Mtc_D2SessionEnumAction(SWIGTYPE_p_MTC_SESS.getCPtr(zSession), iPageId, iIndex), true);
  }

}
