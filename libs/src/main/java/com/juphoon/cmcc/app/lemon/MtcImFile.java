/**
 * @file MtcImFile.java
 * @brief MtcImFile interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcImFile interface
 */
public class MtcImFile implements MtcImFileConstants {
/**
 * @brief MTC Sending a file to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * While receiving file transfer invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbFileRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecving. 
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecvDone.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iDuration The file duration.
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsf(Object zCookie, String pcSubject, String pcUri, String pcFileName, String pcFileType, int iDuration) {
    return MtcImFileJNI.Mtc_ImFileTrsf(zCookie, pcSubject, pcUri, pcFileName, pcFileType, iDuration);
  }

/**
 * @brief MTC Forwarding a file to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * While receiving file transfer invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbFileRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecving. 
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecvDone.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iFileSize The file size.
 * @param [in] pcFileHashVal The file hash value.
 * @param [in] iDuration The file duration.
 *
 * @return The file transfer id, forward file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFw(Object zCookie, String pcUri, String pcFileName, String pcFileType, int iFileSize, String pcFileHashVal, int iDuration) {
    return MtcImFileJNI.Mtc_ImFileFw(zCookie, pcUri, pcFileName, pcFileType, iFileSize, pcFileHashVal, iDuration);
  }

/**
 * @brief MTC Sending a burn after reading file to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * While receiving file transfer invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbFileRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecving. 
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecvDone.
 *
 * Gui can get the burn after reading flag when receiving IM by @ref MtcImFile::Mtc_ImFileHasBurnInd.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iDuration The file duration.
 *
 * @return The file transfer id, if send file transfer(burn after reading) invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfB(Object zCookie, String pcSubject, String pcUri, String pcFileName, String pcFileType, int iDuration) {
    return MtcImFileJNI.Mtc_ImFileTrsfB(zCookie, pcSubject, pcUri, pcFileName, pcFileType, iDuration);
  }

/**
 * @brief MTC Sending a public message file to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * Gui can get the burn after reading flag when receiving IM by @ref MtcImFile::Mtc_ImFileHasBurnInd.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iDuration The file duration.
 *
 * @return The file transfer id, if send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfP(Object zCookie, String pcSubject, String pcUri, String pcFileName, String pcFileType, int iDuration) {
    return MtcImFileJNI.Mtc_ImFileTrsfP(zCookie, pcSubject, pcUri, pcFileName, pcFileType, iDuration);
  }

/**
 * @brief MTC Forwarding a public message file to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * Gui can get the burn after reading flag when receiving IM by @ref MtcImFile::Mtc_ImFileHasBurnInd.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iFileSize The file size. 
 * @param [in] pcFileHashVal The file hash value.
 * @param [in] iDuration The file duration.
 *
 * @return The file transfer id, if forward file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFwP(Object zCookie, String pcUri, String pcFileName, String pcFileType, int iFileSize, String pcFileHashVal, int iDuration) {
    return MtcImFileJNI.Mtc_ImFileFwP(zCookie, pcUri, pcFileName, pcFileType, iFileSize, pcFileHashVal, iDuration);
  }

/**
 * @brief MTC Sending a spam file to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iDuration The file duration.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfS(Object zCookie, String pcSubject, String pcFileName, String pcFileType, int iDuration, String pcFromUri, String pcToUri, long zDate) {
    return MtcImFileJNI.Mtc_ImFileTrsfS(zCookie, pcSubject, pcFileName, pcFileType, iDuration, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief MTC Sending a spam file to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iDuration The file duration.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] iSpamType The spam information type.
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfST(Object zCookie, String pcSubject, String pcFileName, String pcFileType, int iDuration, String pcFromUri, String pcToUri, long zDate, int iSpamType) {
    return MtcImFileJNI.Mtc_ImFileTrsfST(zCookie, pcSubject, pcFileName, pcFileType, iDuration, pcFromUri, pcToUri, zDate, iSpamType);
  }

/**
 * @brief MTC Sending a file to URI-List.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN.
 * @param [in] iDuration The file duration.
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfU(Object zCookie, int iPartpLstId, String pcFileName, String pcFileType, int iDuration) {
    return MtcImFileJNI.Mtc_ImFileTrsfU(zCookie, iPartpLstId, pcFileName, pcFileType, iDuration);
  }

/**
 * @brief MTC Forwarding a file to URI-List.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN.
 * @param [in] iFileSize The file size. 
 * @param [in] pcFileHashVal The file hash value.
 * @param [in] iDuration The file duration.
 *
 * @return The file transfer id, forward file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFwU(Object zCookie, int iPartpLstId, String pcFileName, String pcFileType, int iFileSize, String pcFileHashVal, int iDuration) {
    return MtcImFileJNI.Mtc_ImFileFwU(zCookie, iPartpLstId, pcFileName, pcFileType, iFileSize, pcFileHashVal, iDuration);
  }

/**
 * @brief MTC Sending a file in a group chat.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * While receiving file transfer invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbFileRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecving. 
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecvDone.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The group chat URI.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iDuration The file duration.
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfX(Object zCookie, String pcSubject, String pcUri, String pcGrpChatId, String pcFileName, String pcFileType, int iDuration) {
    return MtcImFileJNI.Mtc_ImFileTrsfX(zCookie, pcSubject, pcUri, pcGrpChatId, pcFileName, pcFileType, iDuration);
  }

/**
 * @brief MTC Forwarding a file in a group chat.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * While receiving file transfer invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbFileRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecving. 
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecvDone.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The group chat URI.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iFileSize The file size.
 * @param [in] pcFileHashVal The file hash value.
 * @param [in] iDuration The file duration.
 *
 * @return The file transfer id, forward file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFwX(Object zCookie, String pcSubject, String pcUri, String pcGrpChatId, String pcFileName, String pcFileType, int iFileSize, String pcFileHashVal, int iDuration) {
    return MtcImFileJNI.Mtc_ImFileFwX(zCookie, pcSubject, pcUri, pcGrpChatId, pcFileName, pcFileType, iFileSize, pcFileHashVal, iDuration);
  }

/**
 * @brief MTC Sending a file to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * While receiving file transfer invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbFileRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecving. 
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecvDone.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iDuration The file duration.
 * @param [in] pData The file thumbnail data, thumbnail  shall  be  smaller  than  10  kB 
 * @param [in] iDataSize The file thumbnail size, thumbnail  shall  be  smaller  than  10  kB 
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfCThumb(Object zCookie, String pcUri, String pcFileName, String pcFileType, int iDuration, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileTrsfCThumb(zCookie, pcUri, pcFileName, pcFileType, iDuration, pData);
  }

/**
 * @brief MTC Forward a file to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM forwarding start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report forward
 * file status.
 *
 * If IM forward successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM forward failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * While receiving file transfer invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbFileRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecving. 
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecvDone.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iFileSize The file size.
 * @param [in] pcFileHashVal The file hash value.
 * @param [in] iDuration The file duration.
 * @param [in] pData The file thumbnail data, thumbnail  shall  be  smaller  than  10  kB 
 * @param [in] iDataSize The file thumbnail size, thumbnail  shall  be  smaller  than  10  kB 
 *
 * @return The file transfer id, forward file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFwCThumb(Object zCookie, String pcUri, String pcFileName, String pcFileType, int iFileSize, String pcFileHashVal, int iDuration, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileFwCThumb(zCookie, pcUri, pcFileName, pcFileType, iFileSize, pcFileHashVal, iDuration, pData);
  }

/**
 * @brief MTC Sending a file to public account.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iDuration The file duration.
 * @param [in] pData The file thumbnail data, thumbnail  shall  be  smaller  than  10  kB 
 * @param [in] iDataSize The file thumbnail size, thumbnail  shall  be  smaller  than  10  kB 
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfCThumbP(Object zCookie, String pcUri, String pcFileName, String pcFileType, int iDuration, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileTrsfCThumbP(zCookie, pcUri, pcFileName, pcFileType, iDuration, pData);
  }

/**
 * @brief MTC forward a file to public account.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iFileSize The file size.
 * @param [in] pcFileHashVal The file hash value.
 * @param [in] iDuration The file duration.
 * @param [in] pData The file thumbnail data, thumbnail  shall  be  smaller  than  10  kB 
 * @param [in] iDataSize The file thumbnail size, thumbnail  shall  be  smaller  than  10  kB 
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFwCThumbP(Object zCookie, String pcUri, String pcFileName, String pcFileType, int iFileSize, String pcFileHashVal, int iDuration, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileFwCThumbP(zCookie, pcUri, pcFileName, pcFileType, iFileSize, pcFileHashVal, iDuration, pData);
  }

/**
 * @brief MTC Sending a file to URI-List.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN.
 * @param [in] iDuration The file duration.
 * @param [in] pData The file thumbnail data.
 * @param [in] iDataSize The file thumbnail size, thumbnail shall be smaller than 10 kB 
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfCThumbU(Object zCookie, int iPartpLstId, String pcFileName, String pcFileType, int iDuration, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileTrsfCThumbU(zCookie, iPartpLstId, pcFileName, pcFileType, iDuration, pData);
  }

/**
 * @brief MTC Forwarding a file to URI-List.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN.
 * @param [in] iFileSize The file size.
 * @param [in] pcFileHashVal The file hash value.
 * @param [in] iDuration The file duration.
 * @param [in] pData The file thumbnail data.
 * @param [in] iDataSize The file thumbnail size, thumbnail shall be smaller than 10 kB 
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFwCThumbU(Object zCookie, int iPartpLstId, String pcFileName, String pcFileType, int iFileSize, String pcFileHashVal, int iDuration, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileFwCThumbU(zCookie, iPartpLstId, pcFileName, pcFileType, iFileSize, pcFileHashVal, iDuration, pData);
  }

/**
 * @brief MTC Sending a file in a group chat.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * While receiving file transfer invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbFileRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecving. 
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecvDone.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The The group chat Session Identity.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iDuration The file duration.
 * @param [in] pData The file thumbnail data, thumbnail  shall  be  smaller  than  10  kB 
 * @param [in] iDataSize The file thumbnail size, thumbnail  shall  be  smaller  than  10  kB 
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileTrsfCThumbX(Object zCookie, String pcSubject, String pcUri, String pcGrpChatId, String pcFileName, String pcFileType, int iDuration, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileTrsfCThumbX(zCookie, pcSubject, pcUri, pcGrpChatId, pcFileName, pcFileType, iDuration, pData);
  }

/**
 * @brief MTC Forwarding a file in a group chat.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbFileAcpted or @ref mtcImCbFileRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSending for report sending
 * file status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbFileSendFailed.
 *
 * While receiving file transfer invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbFileRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecving. 
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbFileRecvDone.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The The group chat Session Identity.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN etc.
 * @param [in] iFileSize The file size.
 * @param [in] pcFileHashVal The file hash value.
 * @param [in] iDuration The file duration.
 * @param [in] pData The file thumbnail data, thumbnail  shall  be  smaller  than  10  kB 
 * @param [in] iDataSize The file thumbnail size, thumbnail  shall  be  smaller  than  10  kB 
 *
 * @return The file transfer id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFwCThumbX(Object zCookie, String pcSubject, String pcUri, String pcGrpChatId, String pcFileName, String pcFileType, int iFileSize, String pcFileHashVal, int iDuration, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileFwCThumbX(zCookie, pcSubject, pcUri, pcGrpChatId, pcFileName, pcFileType, iFileSize, pcFileHashVal, iDuration, pData);
  }

/**
 * @brief MTC Sending file resume invitation to one participant by sender.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcIMsgId The imdn-message-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iDuration The file duration.
 * @param [in] iStartOffset The file start offset, value must bigger than 0.
 * @param [in] iStopOffset The file stop offset, value 0 means the end of whole file.
 * @param [in] pData The file thumbnail data.
 * @param [in] iDataSize The file thumbnail size, thumbnail shall be smaller than 10 kB.
 *
 * @return The file transfer id, send file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeBySender(Object zCookie, String pcSubject, String pcUri, String pcTransId, String pcIMsgId, String pcFileName, String pcFileType, int iDuration, int iStartOffset, int iStopOffset, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileResumeBySender(zCookie, pcSubject, pcUri, pcTransId, pcIMsgId, pcFileName, pcFileType, iDuration, iStartOffset, iStopOffset, pData);
  }

/**
 * @brief MTC Sending burn after reading file resume invitation to one participant by sender.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcIMsgId The imdn-message-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iDuration The file duration.
 * @param [in] iStartOffset The file start offset, value must bigger than 0.
 * @param [in] iStopOffset The file stop offset, value 0 means the end of whole file.
 *
 * @return The file transfer id, send burn after reading file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeBySenderB(Object zCookie, String pcSubject, String pcUri, String pcTransId, String pcIMsgId, String pcFileName, String pcFileType, int iDuration, int iStartOffset, int iStopOffset) {
    return MtcImFileJNI.Mtc_ImFileResumeBySenderB(zCookie, pcSubject, pcUri, pcTransId, pcIMsgId, pcFileName, pcFileType, iDuration, iStartOffset, iStopOffset);
  }

/**
 * @brief MTC Sending public message file resume invitation to participant list by sender.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcIMsgId The imdn-message-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iDuration The file duration.
 * @param [in] iStartOffset The file start offset.
 * @param [in] iStopOffset The file stop offset.
 * @param [in] pData The file thumbnail data.
 * @param [in] iDataSize The file thumbnail size, thumbnail shall be smaller than 10 kB.
 *
 * @return The file transfer id, send burn after reading file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeBySenderP(Object zCookie, String pcSubject, String pcUri, String pcTransId, String pcIMsgId, String pcFileName, String pcFileType, int iDuration, int iStartOffset, int iStopOffset, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileResumeBySenderP(zCookie, pcSubject, pcUri, pcTransId, pcIMsgId, pcFileName, pcFileType, iDuration, iStartOffset, iStopOffset, pData);
  }

/**
 * @brief MTC Sending spam file resume invitation to one participant by sender.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcIMsgId The imdn-message-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iDuration The file duration.
 * @param [in] iStartOffset The file start offset.
 * @param [in] iStopOffset The file stop offset.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @return The file transfer id, send burn after reading file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeBySenderS(Object zCookie, String pcSubject, String pcTransId, String pcIMsgId, String pcFileName, String pcFileType, int iDuration, int iStartOffset, int iStopOffset, String pcFromUri, String pcToUri, long zDate) {
    return MtcImFileJNI.Mtc_ImFileResumeBySenderS(zCookie, pcSubject, pcTransId, pcIMsgId, pcFileName, pcFileType, iDuration, iStartOffset, iStopOffset, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief MTC Sending spam file resume invitation to one participant by sender.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcIMsgId The imdn-message-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iDuration The file duration.
 * @param [in] iStartOffset The file start offset.
 * @param [in] iStopOffset The file stop offset.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds). 
 * @param [in] iSpamtype The spam information type.
 *
 * @return The file transfer id, send burn after reading file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeBySenderST(Object zCookie, String pcSubject, String pcTransId, String pcIMsgId, String pcFileName, String pcFileType, int iDuration, int iStartOffset, int iStopOffset, String pcFromUri, String pcToUri, long zDate, int iSpamtype) {
    return MtcImFileJNI.Mtc_ImFileResumeBySenderST(zCookie, pcSubject, pcTransId, pcIMsgId, pcFileName, pcFileType, iDuration, iStartOffset, iStopOffset, pcFromUri, pcToUri, zDate, iSpamtype);
  }

/**
 * @brief MTC Sending file resume invitation to participant list by sender.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcIMsgId The imdn-message-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iDuration The file duration.
 * @param [in] iStartOffset The file start offset.
 * @param [in] iStopOffset The file stop offset.
 * @param [in] pData The file thumbnail data.
 * @param [in] iDataSize The file thumbnail size, thumbnail shall be smaller than 10 kB.
 *
 * @return The file transfer id, send burn after reading file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeBySenderU(Object zCookie, String pcSubject, int iPartpLstId, String pcTransId, String pcIMsgId, String pcFileName, String pcFileType, int iDuration, int iStartOffset, int iStopOffset, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileResumeBySenderU(zCookie, pcSubject, iPartpLstId, pcTransId, pcIMsgId, pcFileName, pcFileType, iDuration, iStartOffset, iStopOffset, pData);
  }

/**
 * @brief MTC Sending file resume invitation to group chat by sender.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcIMsgId The imdn-message-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iDuration The file duration.
 * @param [in] iStartOffset The file start offset, value must bigger than 0.
 * @param [in] iStopOffset The file stop offset, value 0 means the end of whole file.
 * @param [in] pData The file thumbnail data.
 * @param [in] iDataSize The file thumbnail size, thumbnail shall be smaller than 10 kB.
 *
 * @return The file transfer id, send file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeBySenderX(Object zCookie, String pcSubject, String pcUri, String pcGrpChatId, String pcTransId, String pcIMsgId, String pcFileName, String pcFileType, int iDuration, int iStartOffset, int iStopOffset, byte[] pData) {
    return MtcImFileJNI.Mtc_ImFileResumeBySenderX(zCookie, pcSubject, pcUri, pcGrpChatId, pcTransId, pcIMsgId, pcFileName, pcFileType, iDuration, iStartOffset, iStopOffset, pData);
  }

/**
 * @brief MTC Sending file resume invitation to one participant by receiver.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iStartOffset The file start offset, value must bigger than 0.
 * @param [in] iStopOffset The file stop offset, value 0 means the end of whole file.
 *
 * @return The file transfer id, send file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeByRecver(Object zCookie, String pcSubject, String pcUri, String pcTransId, String pcFileName, String pcFileType, int iStartOffset, int iStopOffset) {
    return MtcImFileJNI.Mtc_ImFileResumeByRecver(zCookie, pcSubject, pcUri, pcTransId, pcFileName, pcFileType, iStartOffset, iStopOffset);
  }

/**
 * @brief MTC Sending burn after reading file resume invitation to one participant by receiver.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iStartOffset The file start offset, value must bigger than 0.
 * @param [in] iStopOffset The file stop offset, value 0 means the end of whole file.
 *
 * @return The file transfer id, send file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeByRecverB(Object zCookie, String pcSubject, String pcUri, String pcTransId, String pcFileName, String pcFileType, int iStartOffset, int iStopOffset) {
    return MtcImFileJNI.Mtc_ImFileResumeByRecverB(zCookie, pcSubject, pcUri, pcTransId, pcFileName, pcFileType, iStartOffset, iStopOffset);
  }

/**
 * @brief MTC Sending file resume invitation to group chat by receiver.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] iStartOffset The file start offset, value must bigger than 0.
 * @param [in] iStopOffset The file stop offset, value 0 means the end of whole file.
 *
 * @return The file transfer id, send file resume invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileResumeByRecverX(Object zCookie, String pcSubject, String pcUri, String pcGrpChatId, String pcTransId, String pcFileName, String pcFileType, int iStartOffset, int iStopOffset) {
    return MtcImFileJNI.Mtc_ImFileResumeByRecverX(zCookie, pcSubject, pcUri, pcGrpChatId, pcTransId, pcFileName, pcFileType, iStartOffset, iStopOffset);
  }

/**
 * @brief MTC Sending file fetch invitation to one participant via msrp.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 *
 * @return The file transfer id, send file fetch invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFetchViaMsrp(Object zCookie, String pcUri, String pcTransId, String pcFileName, String pcFileType) {
    return MtcImFileJNI.Mtc_ImFileFetchViaMsrp(zCookie, pcUri, pcTransId, pcFileName, pcFileType);
  }

/**
 * @brief MTC Sending file fetch invitation to group chat via msrp.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The The group chat Session Identity.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 *
 * @return The file transfer id, send file fetch invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFileFetchViaMsrpX(Object zCookie, String pcSubject, String pcUri, String pcGrpChatId, String pcTransId, String pcFileName, String pcFileType) {
    return MtcImFileJNI.Mtc_ImFileFetchViaMsrpX(zCookie, pcSubject, pcUri, pcGrpChatId, pcTransId, pcFileName, pcFileType);
  }

/**
 * @brief MTC Accept a file transfer invitation.
 *
 * @param [in] iTrsfId The file transfer id.
 * @param [in] pcFileName The local file name for save.
 *
 * @retval MtcCommonConstants::ZOK Accept file transfer invitation successfully.
 * @retval MtcCommonConstants::ZFAILED Accept file transfer invitation failed.
 */
  public static int Mtc_ImFileAccept(int iTrsfId, String pcFileName) {
    return MtcImFileJNI.Mtc_ImFileAccept(iTrsfId, pcFileName);
  }

/**
 * @brief MTC Accept a file resume invitation.
 *
 * @param [in] iTrsfId The file transfer id.
 * @param [in] pcFileName The local file name for save.
 * @param [in] iStartOffset The file start offset, value must bigger than 0.
 * @param [in] iStopOffset The file stop offset, value 0 means the end of whole file.
 *
 * @retval MtcCommonConstants::ZOK Accept file resume invitation successfully.
 * @retval MtcCommonConstants::ZFAILED Accept file resume invitation failed.
 */
  public static int Mtc_ImFileAcceptResume(int iTrsfId, String pcFileName, int iStartOffset, int iStopOffset) {
    return MtcImFileJNI.Mtc_ImFileAcceptResume(iTrsfId, pcFileName, iStartOffset, iStopOffset);
  }

/**
 * @brief MTC Reject a file transfer invitation.
 *
 * @param [in] iTrsfId The file transfer id.
 * @param [in] iReason The reason for rejection, @see @ref MtcImFileConstants::EN_MTC_IM_FILE_REJECT_REASON_NORMAL.
 *
 * @retval MtcCommonConstants::ZOK Reject file transfer invitation successfully.
 * @retval MtcCommonConstants::ZFAILED Reject file transfer invitation failed.
 */
  public static int Mtc_ImFileReject(int iTrsfId, int iReason) {
    return MtcImFileJNI.Mtc_ImFileReject(iTrsfId, iReason);
  }

/**
 * @brief MTC Cancel a file transfer.
 * 
 * If IM participant canceled transfer invitation, Remote client will be 
 * notified by callback which was set by @ref mtcImCbFileCanceled.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval MtcCommonConstants::ZOK Cancel file transfer invitation successfully.
 * @retval MtcCommonConstants::ZFAILED Cancel file transfer invitation failed.
 */
  public static int Mtc_ImFileCancel(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileCancel(iTrsfId);
  }

/**
 * @brief MTC Release a file transfer.
 * 
 * If IM participant released file transfer, Remote GUI will be notified 
 * by callback which was set by @ref mtcImCbFileReleased.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval MtcCommonConstants::ZOK Release file transfer successfully.
 * @retval MtcCommonConstants::ZFAILED Release file transfer failed.
 */
  public static int Mtc_ImFileRelease(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileRelease(iTrsfId);
  }

/**
 * @brief MTC Get user cookie from a file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return User cookie.
 */
  public static Object Mtc_ImFileGetCookie(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetCookie(iTrsfId);
  }

/**
 * @brief MTC Set user cookie in a file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 * @param [in] zCookie The user cookie.
 *
 * @retval MtcCommonConstants::ZOK Set user cookie successfully.
 * @retval MtcCommonConstants::ZFAILED Set user cookie failed.
 */
  public static int Mtc_ImFileSetCookie(int iTrsfId, Object zCookie) {
    return MtcImFileJNI.Mtc_ImFileSetCookie(iTrsfId, zCookie);
  }

/**
 * @brief MTC Get the Imdn type from file transfer.
 *
 * @param [in] iTrsfId The file transfer Id.
 *
 * @return Type of file transfer, see @ref EN_MTC_IM_FILE_IMDN_TYPE.
 */
  public static int Mtc_ImFileGetImdnType(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetImdnType(iTrsfId);
  }

/**
 * @brief MTC Get imdn message-id string of transfer id.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The imdn message-id.
 */
  public static String Mtc_ImFileGetImdnMsgId(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetImdnMsgId(iTrsfId);
  }

/**
 * @brief MTC Get file-transfer-id string of IM message.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The file-transfer-id.
 */
  public static String Mtc_ImFileGetTrsfId(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetTrsfId(iTrsfId);
  }

/**
 * @brief MTC Get group chat id from transfer id.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The group chat id.
 */
  public static String Mtc_ImFileGetGrpChatId(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetGrpChatId(iTrsfId);
  }

/**
 * @brief MTC Get file name from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return File name.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFileGetName(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetName(iTrsfId);
  }

/**
 * @brief MTC Get file type from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return File type, see @ref MTC_IM_FILE_CONT_TXT_PLAIN....
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFileGetType(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetType(iTrsfId);
  }

/**
 * @brief MTC Get file duration from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The file duration.
 */
  public static int Mtc_ImFileGetDuration(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetDuration(iTrsfId);
  }

/**
 * @brief MTC Get file size from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The file size.
 */
  public static int Mtc_ImFileGetSize(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetSize(iTrsfId);
  }

/**
 * @brief MTC Get file hash value from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The file hash value.
 */
  public static String Mtc_ImFileGetHashValue(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetHashValue(iTrsfId);
  }

/**
 * @brief MTC Get sent file data size from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The file data sent size.
 */
  public static int Mtc_ImFileGetSentSize(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetSentSize(iTrsfId);
  }

/**
 * @brief MTC Get received file data size from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The file data received size.
 */
  public static int Mtc_ImFileGetRecvSize(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetRecvSize(iTrsfId);
  }

/**
 * @brief MTC Get file start offset from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval The file start offset.
 */
  public static int Mtc_ImFileGetStartOffset(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetStartOffset(iTrsfId);
  }

/**
 * @brief MTC Get file start offset from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval The file stop offset.
 */
  public static int Mtc_ImFileGetStopOffset(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetStopOffset(iTrsfId);
  }

/**
 * @brief MTC Get participant type from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return Type of IM file transfer participant, see @ref MtcPartpConstants::EN_MTC_PARTP_LST_ONE.
 * If type is EN_MTC_PARTP_LST_ONE, participant can be got by @ref MtcImFile::Mtc_ImFileGetPartp.
 * If type is EN_MTC_PARTP_LST_PREDEF_GRP, participant can be got by @ref MtcImFile::Mtc_ImFileGetPartp.
 * If type is EN_MTC_PARTP_LST_URI_LST, participant can be got by @ref MtcImFile::Mtc_ImFileGetPartpLstId.
 */
  public static int Mtc_ImFileGetPartpType(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetPartpType(iTrsfId);
  }

/**
 * @brief MTC Get participant information from file transfer.
 * Get receiver information from feion carbon copy file transfer.
 *
 * The participant is the remote client who transferred file.
 *
 * @param [in] iTrsfId The file transfer id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 * 
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get participant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get participant information failed.
 */
  public static int Mtc_ImFileGetPartp(int iTrsfId, MtcString ppcName, MtcString ppcUri) {
    return MtcImFileJNI.Mtc_ImFileGetPartp(iTrsfId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get participant list id from file transfer.
 *
 * The participant list id is all remote clients who transferred file.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The participant list id on succeed or 0 on failed.
 *  The caller is responsible for freeing it by @ref MtcPartp::Mtc_PartpLstDelete.
 */
  public static int Mtc_ImFileGetPartpLstId(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetPartpLstId(iTrsfId);
  }

/**
 * @brief MTC Get original participant URI from file transfer.
 *
 * The participant is the session initiator who initialized this file transfer.
 * It will return local URI if local client is the file transfer initiator.
 * It will return From uri from file transfer invitation information.
 *
 * @param [in] iTrsfId The file transfer id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 * 
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImFileGetOrigPartp(int iTrsfId, MtcString ppcName, MtcString ppcUri) {
    return MtcImFileJNI.Mtc_ImFileGetOrigPartp(iTrsfId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get original identity of participant from file transfer.
 *
 * The participant is the file transfer initiator who initialized file transfer.
 * It will return local URI if local client is the file transfer initiator.
 * It will return identity uri if file transfer invitation has P-Asserted-Identity information.
 *
 * @param [in] iTrsfId The file transfer id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant uri.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImFileGetOrigIdPartp(int iTrsfId, MtcString ppcName, MtcString ppcUri) {
    return MtcImFileJNI.Mtc_ImFileGetOrigIdPartp(iTrsfId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get date time from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 * @param [in,out] pstTime The date time value. 
 *
 * @retval MtcCommonConstants::ZOK Get date time successfully.
 * @retval MtcCommonConstants::ZFAILED Get date time date failed.
 */
  public static int Mtc_ImFileGetSysDateTime(int iTrsfId, SWIGTYPE_p_ST_MTC_SYS_TIME pstTime) {
    return MtcImFileJNI.Mtc_ImFileGetSysDateTime(iTrsfId, SWIGTYPE_p_ST_MTC_SYS_TIME.getCPtr(pstTime));
  }

/**
 * @brief MTC Get date time from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return file transfer date time(milliseconds), otherwise return 0.
 */
  public static long Mtc_ImFileGetDateTime(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetDateTime(iTrsfId);
  }

/**
 * @brief MTC Get conversation-id from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The conversation-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFileGetConvId(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetConvId(iTrsfId);
  }

/**
 * @brief MTC Get contribution-id from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The contribution-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFileGetContId(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetContId(iTrsfId);
  }

/**
 * @brief MTC Get device id from file transfer session.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return The device id.
 *   The caller must copy it, then use.
 */
  public static String Mtc_ImFileGetDeviceId(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetDeviceId(iTrsfId);
  }

/**
 * @brief MTC Get thumbnail flag from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval return true if file transfer has thumbnail otherwise return false.
 */
  public static boolean Mtc_ImFileHasThumb(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileHasThumb(iTrsfId);
  }

/**
 * @brief MTC Get thumbnail date from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 * @param [in,out] ppData thumbnail data. 
 * @param [in,out] piDataSize thumbnail data size. 
 *
 * @retval MtcCommonConstants::ZOK Get thumbnail date successfully.
 * @retval MtcCommonConstants::ZFAILED Get thumbnail date failed.
 */
  public static int Mtc_ImFileGetThumbData(int iTrsfId, MtcByteArray ppData) {
    return MtcImFileJNI.Mtc_ImFileGetThumbData(iTrsfId, ppData);
  }

/**
 * @brief MTC Clear thumbnail date.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval MtcCommonConstants::ZOK Clear thumbnail date successfully.
 * @retval MtcCommonConstants::ZFAILED Clear thumbnail date failed.
 */
  public static int Mtc_ImFileClrThumbData(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileClrThumbData(iTrsfId);
  }

/**
 * @brief MTC Get IsFocus flag from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval return true file transfer in group chat
 * @retval return false file transfer in 1-1 chat.
 */
  public static boolean Mtc_ImFileGetIsFocus(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetIsFocus(iTrsfId);
  }

/**
 * @brief MTC Get subject from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval Subject.
 */
  public static String Mtc_ImFileGetSubject(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetSubject(iTrsfId);
  }

/**
 * @brief MTC Get direct from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return direct of file transfer, @ref MtcImFileConstants::EN_MTC_FILE_DIRECT_UNKNOWN.
 */
  public static int Mtc_ImFileGetTrsfDirect(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetTrsfDirect(iTrsfId);
  }

/**
 * @brief MTC Get burn after reading indication flag from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval true if it has burn after reading file indication, otherwise return false.
 */
  public static boolean Mtc_ImFileHasBurnInd(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileHasBurnInd(iTrsfId);
  }

/**
 * @brief MTC Get burn after reading time length from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @return burn after reading time length.
 */
  public static int Mtc_ImFileGetBurnTimeLen(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileGetBurnTimeLen(iTrsfId);
  }

/**
 * @brief MTC Get public message indication flag from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval true if it has public message indication, otherwise return false.
 */
  public static boolean Mtc_ImFileHasPubInd(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileHasPubInd(iTrsfId);
  }

/**
 * @brief MTC Get spam indication flag from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval true if it has spam indication, otherwise return false.
 */
  public static boolean Mtc_ImFileHasSpamInd(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileHasSpamInd(iTrsfId);
  }

/**
 * @brief MTC Get directional indication flag from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval true if it has directional indication, otherwise return false.
 */
  public static boolean Mtc_ImFileHasDirectInd(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileHasDirectInd(iTrsfId);
  }

/**
 * @brief MTC Get carbon copy indication flag from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval true if it has carbon copy indication, otherwise return false.
 */
  public static boolean Mtc_ImFileHasCcInd(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileHasCcInd(iTrsfId);
  }

/**
 * @brief MTC Get silence indication flag from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval true if it has silence indication, otherwise return false.
 */
  public static boolean Mtc_ImFileHasSilenceInd(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileHasSilenceInd(iTrsfId);
  }

/**
 * @brief MTC Get offline indication flag from file transfer.
 *
 * @param [in] iTrsfId The file transfer id.
 *
 * @retval true if it has offline indication, otherwise return false.
 */
  public static boolean Mtc_ImFileHasOffInd(int iTrsfId) {
    return MtcImFileJNI.Mtc_ImFileHasOffInd(iTrsfId);
  }

}
