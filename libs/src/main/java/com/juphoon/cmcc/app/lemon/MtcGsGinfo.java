/**
 * @file MtcGsGinfo.java
 * @brief MtcGsGinfo interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcGsGinfo interface
 */
public class MtcGsGinfo implements MtcGsGinfoConstants {
/**
 * @brief MTC Push free text to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushText(Object zCookie, String pcFreeText, String pcUri, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushText(zCookie, pcFreeText, pcUri, pcLabel);
  }

/**
 * @brief MTC Push free text to public account.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushTextP(Object zCookie, String pcFreeText, String pcUri, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushTextP(zCookie, pcFreeText, pcUri, pcLabel);
  }

/**
 * @brief MTC Push spam free text to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushTextS(Object zCookie, String pcFreeText, String pcLabel, String pcFromUri, String pcToUri, long zDate) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushTextS(zCookie, pcFreeText, pcLabel, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief MTC Push spam free text to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] iSpamType The Spam information type.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushTextST(Object zCookie, String pcFreeText, String pcLabel, String pcFromUri, String pcToUri, long zDate, int iSpamType) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushTextST(zCookie, pcFreeText, pcLabel, pcFromUri, pcToUri, zDate, iSpamType);
  }

/**
 * @brief MTC Push free text to participant list.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushTextU(Object zCookie, String pcFreeText, int iPartpLstId, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushTextU(zCookie, pcFreeText, iPartpLstId, pcLabel);
  }

/**
 * @brief MTC Push free text to group chat.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The The group chat Session Identity.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushTextX(Object zCookie, String pcFreeText, String pcSubject, String pcUri, String pcGrpChatId, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushTextX(zCookie, pcFreeText, pcSubject, pcUri, pcGrpChatId, pcLabel);
  }

/**
 * @brief MTC Push coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushCoord(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcUri, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushCoord(zCookie, dLatitude, dLongitude, fRadius, pcUri, pcLabel);
  }

/**
 * @brief MTC Push coordinate to public account.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushCoordP(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcUri, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushCoordP(zCookie, dLatitude, dLongitude, fRadius, pcUri, pcLabel);
  }

/**
 * @brief MTC Push spam coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushCoordS(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcLabel, String pcFromUri, String pcToUri, long zDate) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushCoordS(zCookie, dLatitude, dLongitude, fRadius, pcLabel, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief MTC Push spam coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] iSpamType The spam information type.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushCoordST(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcLabel, String pcFromUri, String pcToUri, long zDate, int iSpamType) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushCoordST(zCookie, dLatitude, dLongitude, fRadius, pcLabel, pcFromUri, pcToUri, zDate, iSpamType);
  }

/**
 * @brief MTC Push coordinate to participant list.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * Note: if radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushCoordU(Object zCookie, double dLatitude, double dLongitude, float fRadius, int iPartpLstId, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushCoordU(zCookie, dLatitude, dLongitude, fRadius, iPartpLstId, pcLabel);
  }

/**
 * @brief MTC Push coordinate to group chat.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The The group chat Session Identity.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushCoordX(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcSubject, String pcUri, String pcGrpChatId, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushCoordX(zCookie, dLatitude, dLongitude, fRadius, pcSubject, pcUri, pcGrpChatId, pcLabel);
  }

/**
 * @brief MTC Push both free text and coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushBoth(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcUri, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushBoth(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcUri, pcLabel);
  }

/**
 * @brief MTC Push both free text and coordinate to public account.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushBothP(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcUri, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushBothP(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcUri, pcLabel);
  }

/**
 * @brief MTC Push both spam free text and spam coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushBothS(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcLabel, String pcFromUri, String pcToUri, long zDate) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushBothS(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcLabel, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief MTC Push both spam free text and spam coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] iSpamType The spam information type.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushBothST(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcLabel, String pcFromUri, String pcToUri, long zDate, int iSpamType) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushBothST(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcLabel, pcFromUri, pcToUri, zDate, iSpamType);
  }

/**
 * @brief MTC Push both free text and coordinate to participant list.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * Note: if radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushBothU(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, int iPartpLstId, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushBothU(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, iPartpLstId, pcLabel);
  }

/**
 * @brief MTC Push both free text and coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The The group chat Session Identity.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPushBothX(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcSubject, String pcUri, String pcGrpChatId, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushBothX(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcSubject, pcUri, pcGrpChatId, pcLabel);
  }

/**
 * @brief MTC Resend Push free text to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushText(Object zCookie, String pcFreeText, String pcUri, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushText(zCookie, pcFreeText, pcUri, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Resend Push free text to public account.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushTextP(Object zCookie, String pcFreeText, String pcUri, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushTextP(zCookie, pcFreeText, pcUri, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Resend Push spam free text to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushTextS(Object zCookie, String pcFreeText, String pcLabel, String pcReTrsfId, String pcReMsgId, String pcFromUri, String pcToUri, long zDate) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushTextS(zCookie, pcFreeText, pcLabel, pcReTrsfId, pcReMsgId, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief MTC Resend Push spam free text to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] iSpamType The spam information type.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushTextST(Object zCookie, String pcFreeText, String pcLabel, String pcReTrsfId, String pcReMsgId, String pcFromUri, String pcToUri, long zDate, int iSpamType) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushTextST(zCookie, pcFreeText, pcLabel, pcReTrsfId, pcReMsgId, pcFromUri, pcToUri, zDate, iSpamType);
  }

/**
 * @brief MTC Resend Push free text to participant list.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushTextU(Object zCookie, String pcFreeText, int iPartpLstId, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushTextU(zCookie, pcFreeText, iPartpLstId, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Resend Push free text to group chat.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The The group chat Session Identity.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushTextX(Object zCookie, String pcFreeText, String pcSubject, String pcUri, String pcGrpChatId, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushTextX(zCookie, pcFreeText, pcSubject, pcUri, pcGrpChatId, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Resend Push coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushCoord(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcUri, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushCoord(zCookie, dLatitude, dLongitude, fRadius, pcUri, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC RePush coordinate to public account.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushCoordP(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcUri, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushCoordP(zCookie, dLatitude, dLongitude, fRadius, pcUri, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC RePush spam coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushCoordS(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcLabel, String pcReTrsfId, String pcReMsgId, String pcFromUri, String pcToUri, long zDate) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushCoordS(zCookie, dLatitude, dLongitude, fRadius, pcLabel, pcReTrsfId, pcReMsgId, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief MTC RePush spam coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] iSpamType The spam information type.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushCoordST(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcLabel, String pcReTrsfId, String pcReMsgId, String pcFromUri, String pcToUri, long zDate, int iSpamType) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushCoordST(zCookie, dLatitude, dLongitude, fRadius, pcLabel, pcReTrsfId, pcReMsgId, pcFromUri, pcToUri, zDate, iSpamType);
  }

/**
 * @brief MTC Resend Push coordinate to participant list.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * Note: if radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushCoordU(Object zCookie, double dLatitude, double dLongitude, float fRadius, int iPartpLstId, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushCoordU(zCookie, dLatitude, dLongitude, fRadius, iPartpLstId, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Resend Push coordinate to group chat.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The The group chat Session Identity.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushCoordX(Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcSubject, String pcUri, String pcGrpChatId, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushCoordX(zCookie, dLatitude, dLongitude, fRadius, pcSubject, pcUri, pcGrpChatId, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Resend Push both free text and coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushBoth(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcUri, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushBoth(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcUri, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Resend Push both free text and coordinate to public account.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushBothP(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcUri, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushBothP(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcUri, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Resend Push both free text and coordinate to public account.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushBothS(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcLabel, String pcReTrsfId, String pcReMsgId, String pcFromUri, String pcToUri, long zDate) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushBothS(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcLabel, pcReTrsfId, pcReMsgId, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief MTC Resend Push both free text and coordinate to public account.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position,
 *             else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] iSpamType The spam information type.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushBothST(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcLabel, String pcReTrsfId, String pcReMsgId, String pcFromUri, String pcToUri, long zDate, int iSpamType) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushBothST(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcLabel, pcReTrsfId, pcReMsgId, pcFromUri, pcToUri, zDate, iSpamType);
  }

/**
 * @brief MTC Resend Push both free text and coordinate to participant list.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * Note: if radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushBothU(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, int iPartpLstId, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushBothU(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, iPartpLstId, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Resend Push both free text and coordinate to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The The group chat Session Identity.
 * @param [in] pcGrpChatId The group chat id.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] pcReTrsfId The resend file-transfer-id @ref MtcGsGinfo::Mtc_GsGInfoGetTrsfId.
 * @param [in] pcReMsgId  The resend imdn message-id @ref MtcGsGinfo::Mtc_GsGInfoGetImdnMsgId.
 *
 * @note If radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return Push geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoRePushBothX(Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcSubject, String pcUri, String pcGrpChatId, String pcLabel, String pcReTrsfId, String pcReMsgId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoRePushBothX(zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcSubject, pcUri, pcGrpChatId, pcLabel, pcReTrsfId, pcReMsgId);
  }

/**
 * @brief MTC Accept the push request from one participant.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval MtcCommonConstants::ZOK Accept successfully.
 * @retval MtcCommonConstants::ZFAILED Accept failed.
 */
  public static int Mtc_GsGInfoPushAcpt(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushAcpt(iGInfoId);
  }

/**
 * @brief MTC Deny the push request from one participant.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval MtcCommonConstants::ZOK Denyine successfully.
 * @retval MtcCommonConstants::ZFAILED Denyine failed.
 */
  public static int Mtc_GsGInfoPushDeny(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPushDeny(iGInfoId);
  }

/**
 * @brief MTC Pull geolocation information from one participant via file transfer.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 *
 * @return Pull geolocation information successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_GsGInfoPullViaFt(Object zCookie, String pcUri) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPullViaFt(zCookie, pcUri);
  }

/**
 * @brief MTC Accept the pull request from one participant.
 *
 * @param [in] iGInfoId The geolocation information id.
 * @param [in] iGInfoType The geolocation information type, see @ref MtcGsGinfoConstants::EN_MTC_GS_GINFO_UNKNOWN.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @retval MtcCommonConstants::ZOK Accept successfully.
 * @retval MtcCommonConstants::ZFAILED Accept failed.
 */
  public static int Mtc_GsGInfoPullAcpt(int iGInfoId, int iGInfoType, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPullAcpt(iGInfoId, iGInfoType, pcFreeText, dLatitude, dLongitude, fRadius, pcLabel);
  }

/**
 * @brief MTC Deny the pull request from one participant.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval MtcCommonConstants::ZOK Denyine successfully.
 * @retval MtcCommonConstants::ZFAILED Denyine failed.
 */
  public static int Mtc_GsGInfoPullDeny(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoPullDeny(iGInfoId);
  }

/**
 * @brief MTC Sending geolocation fetch invitation to one participant via msrp.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 * @param [in] pcTransId The file-transfer-id string.
 *
 * @return The geolocation information id, send geolocation fetch invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_GInfoFetchViaMsrp(Object zCookie, String pcUri, String pcTransId) {
    return MtcGsGinfoJNI.Mtc_GInfoFetchViaMsrp(zCookie, pcUri, pcTransId);
  }

/**
 * @brief MTC Sending geolocation fetch invitation to group chat via msrp.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcGrpUri The The group chat Session Identity.
 * @param [in] pcTransId The file-transfer-id string.
 * @param [in] pcGrpChatId The group chat id.
 *
 * @return The geolocation information id, send geolocation fetch invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_GInfoFetchViaMsrpX(Object zCookie, String pcGrpUri, String pcTransId, String pcGrpChatId) {
    return MtcGsGinfoJNI.Mtc_GInfoFetchViaMsrpX(zCookie, pcGrpUri, pcTransId, pcGrpChatId);
  }

/**
 * @brief MTC Cancel the geolocation information transfer.
 *
 * @param [in] iGInfoId The geolocation information id.
 */
  public static int Mtc_GsGInfoCancel(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoCancel(iGInfoId);
  }

/**
 * @brlef MTC Release the geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 */
  public static void Mtc_GsGInfoRelease(int iGInfoId) {
    MtcGsGinfoJNI.Mtc_GsGInfoRelease(iGInfoId);
  }

/**
 * @brief MTC Get user cookie in a geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval User cookie.
 */
  public static Object Mtc_GsGInfoGetCookie(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetCookie(iGInfoId);
  }

/**
 * @brief MTC Set user cookie in a geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 * @param [in] zCookie The user cookie.
 *
 * @retval MtcCommonConstants::ZOK Set user cookie successfully.
 * @retval MtcCommonConstants::ZFAILED Set user cookie failed.
 */
  public static int Mtc_GsGInfoSetCookie(int iGInfoId, Object zCookie) {
    return MtcGsGinfoJNI.Mtc_GsGInfoSetCookie(iGInfoId, zCookie);
  }

/**
 * @brief MTC Get geolocation information type.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval Type of geolocation information, see @ref MtcGsGinfoConstants::EN_MTC_GS_GINFO_UNKNOWN.
 */
  public static int Mtc_GsGInfoGetType(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetType(iGInfoId);
  }

/**
 * @brief MTC Get free text from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval The free text.
 * The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoGetFreeText(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetFreeText(iGInfoId);
  }

/**
 * @brief MTC Get latitude of user place from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval The latitude of user place.
 */
  public static double Mtc_GsGInfoGetLatitude(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetLatitude(iGInfoId);
  }

/**
 * @brief MTC Get longitude of user place from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval The longitude of user place.
 */
  public static double Mtc_GsGInfoGetLongitude(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetLongitude(iGInfoId);
  }

/**
 * @brief MTC Get radius of user place from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval The radius of user place.
 */
  public static float Mtc_GsGInfoGetRadius(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetRadius(iGInfoId);
  }

/**
 * @brief MTC Get participant type from the geolocation share.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval Type of im participant, see @ref MtcPartpConstants::EN_MTC_PARTP_LST_ONE.
 *
 * If type is @ref EN_MTC_PARTP_LST_ONE, participant can be got by @ref MtcGsGinfo::Mtc_GsGInfoGetPartp.
 * If type is @ref EN_MTC_PARTP_LST_PREDEF_GRP, participant can be got by @ref MtcGsGinfo::Mtc_GsGInfoGetPartp.
 * If type is @ref EN_MTC_PARTP_LST_URI_LST, participant can be got by @ref MtcGsGinfo::Mtc_GsGInfoGetPartpLstId.
 */
  public static int Mtc_GsGInfoGetPartpType(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetPartpType(iGInfoId);
  }

/**
 * @brief MTC Get participant from the geolocation share.
 * Get receiver information from feion carbon copy geolocation share.
 *
 * @param [in] iGInfoId The geolocation information id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant uri.
 * The caller must copy them, then use.
 *
 * @retval MtcCommonConstants::ZOK Get paticipant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get paticipant information failed.
 */
  public static int Mtc_GsGInfoGetPartp(int iGInfoId, MtcString ppcName, MtcString ppcUri) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetPartp(iGInfoId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get participant list id from the geolocation share.
 *
 * The participant list id is all remote clients who shared geolocation.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval The participant list id.
 * The caller is responsible for freeing it by Mtc_PartpLstDelete
 */
  public static int Mtc_GsGInfoGetPartpLstId(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetPartpLstId(iGInfoId);
  }

/**
 * @brief MTC Get original participant which is the owner of geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant uri.
 * The caller must copy them, then use.
 *
 * @retval MtcCommonConstants::ZOK Get paticipant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get paticipant information failed.
 */
  public static int Mtc_GsGInfoGetOrigPartp(int iGInfoId, MtcString ppcName, MtcString ppcUri) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetOrigPartp(iGInfoId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get participant uri which is the owner of geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant uri.
 * The caller must copy them, then use.
 *
 * @retval MtcCommonConstants::ZOK Get paticipant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get paticipant information failed.
 */
  public static int Mtc_GsGInfoGetOwnerPartp(int iGInfoId, MtcString ppcName, MtcString ppcUri) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetOwnerPartp(iGInfoId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get date time from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @return The date time(milliseconds).
 */
  public static long Mtc_GsGInfoGetDateTime(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetDateTime(iGInfoId);
  }

/**
 * @brief MTC Get timestamp from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval The timestamp.
 */
  public static int Mtc_GsGInfoGetTimestamp(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetTimestamp(iGInfoId);
  }

/**
 * @brief MTC Get until time from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval The until time.
 */
  public static int Mtc_GsGInfoGetUntilTime(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetUntilTime(iGInfoId);
  }

/**
 * @brief MTC Get label flag from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval true if it is a permanent location, otherwise return false.
 */
  public static boolean Mtc_GsGInfoHasLabel(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoHasLabel(iGInfoId);
  }

/**
 * @brief MTC Get label string from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval The label string.
 * The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoGetLabel(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetLabel(iGInfoId);
  }

/**
 * @brief MTC Get file-transfer-id string from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval The file-transfer-id string.
 * The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoGetTrsfId(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetTrsfId(iGInfoId);
  }

/**
 * @brief MTC Get IsFocus flag from geolocation information id.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval return true geolocation in group chat
 * @retval return false geolocation in 1-1 chat.
 */
  public static boolean Mtc_GsGInfoGetIsFocus(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetIsFocus(iGInfoId);
  }

/**
 * @brief MTC  Get subject from geolocation information id.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval Geolocation Subject.
 * The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoGetSubject(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetSubject(iGInfoId);
  }

/**
 * @brief MTC Get group chat id from geolocation information id.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval Geolocation group chat id.
 * The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoGetGrpChatId(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetGrpChatId(iGInfoId);
  }

/**
 * @brief MTC Get the Imdn type from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information Id.
 *
 * @return Type of geolocation information, see @ref EN_MTC_GS_GINFO_IMDN_TYPE.
 */
  public static int Mtc_GsGInfoGetImdnType(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetImdnType(iGInfoId);
  }

/**
 * @brief MTC Get imdn message-id from geolocation information id.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval Geolocation imdn message-id.
 *   The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoGetImdnMsgId(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetImdnMsgId(iGInfoId);
  }

/**
 * @brlef MTC Get device id from geolocation information session.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @return The device id.
 *   The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoGetDeviceId(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetDeviceId(iGInfoId);
  }

/**
 * @brief MTC Get public message indication flag from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval true if it has public message indication, otherwise return false.
 */
  public static boolean Mtc_GsGInfoHasPubInd(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoHasPubInd(iGInfoId);
  }

/**
 * @brief MTC Get spam indication flag from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval true if it has spam message indication, otherwise return false.
 */
  public static boolean Mtc_GsGInfoHasSpamInd(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoHasSpamInd(iGInfoId);
  }

/**
 * @brief MTC Get directional message indication flag from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval true if it has directional message indication, otherwise return false.
 */
  public static boolean Mtc_GsGInfoHasDirectInd(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoHasDirectInd(iGInfoId);
  }

/**
 * @brief MTC Get carbon copy message indication flag from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval true if it has carbon copy message indication, otherwise return false.
 */
  public static boolean Mtc_GsGInfoHasCcInd(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoHasCcInd(iGInfoId);
  }

/**
 * @brief MTC Get silence message indication flag from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval true if it has silence message indication, otherwise return false.
 */
  public static boolean Mtc_GsGInfoHasSilenceInd(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoHasSilenceInd(iGInfoId);
  }

/**
 * @brief MTC Get offline message indication flag from geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @retval true if it has offline message indication, otherwise return false.
 */
  public static boolean Mtc_GsGInfoHasOffInd(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoHasOffInd(iGInfoId);
  }

/**
 * @brief MTC Get conversation-id of geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @return The conversation-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoGetConvId(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetConvId(iGInfoId);
  }

/**
 * @brief MTC Get contribution-id of geolocation information.
 *
 * @param [in] iGInfoId The geolocation information id.
 *
 * @return The contribution-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoGetContId(int iGInfoId) {
    return MtcGsGinfoJNI.Mtc_GsGInfoGetContId(iGInfoId);
  }

/**
 * @brief RLE Save geolocation information data.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iGInfoType The geolocation information type, @see MtcGsGinfoConstants::EN_MTC_GS_GINFO_UNKNOWN.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcUri The participant URI.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 *
 * @return geolocation information data string.
 * The caller must copy it, then use.
 */
  public static String Mtc_GsGInfoSaveData(Object zCookie, int iGInfoType, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcUri, String pcLabel) {
    return MtcGsGinfoJNI.Mtc_GsGInfoSaveData(zCookie, iGInfoType, pcFreeText, dLatitude, dLongitude, fRadius, pcUri, pcLabel);
  }

/**
 * @brief MGF Load geolocation information data.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 * @param [in] pcData The geolocation information data.
 *
 * @return geolocation information id successfully, otherwise return ZMAXUINT.
 *  When used completely, caller must release geolocation information, @see @ref MtcGsGinfo::Mtc_GsGInfoRelease.
 */
  public static int Mtc_GsGInfoLoadData(Object zCookie, String pcUri, String pcData) {
    return MtcGsGinfoJNI.Mtc_GsGInfoLoadData(zCookie, pcUri, pcData);
  }

}
