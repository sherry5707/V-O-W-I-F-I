/**
 * @file MtcVshare.java
 * @brief MtcVshare interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcVshare interface
 */
public class MtcVshare implements MtcVshareConstants {
/** 
 * @brief MTC video share session call.
 *
 * If send a new call and the callee answered, GUI will be notified by callback which 
 * was set by @ref mtcVShareCbAlerted, @ref mtcVShareCbTalking
 *
 * If send a new call and the callee redirected, GUI will be notified by callback which 
 * was set by @ref mtcVShareCbOutgoing, @ref mtcVShareCbAlerted, @ref mtcVShareCbTalking
 *
 * If send a new call and the callee do not answered(timeout, busy now, etc.), GUI will be 
 * notified by callback which was set by @ref mtcVShareCbAlerted, @ref mtcVShareCbTermed
 *
 * While receiving call invitation, GUI will be notified by callback which 
 * was set by @ref mtcVShareCbIncoming.
 *
 * @param [in] pcUri The destination URI to which you want to make a video share session call.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcVshare::Mtc_VSessGetCookie or reset by
 *                      @ref MtcVshare::Mtc_VSessSetCookie at any time of session's life.
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXUINT.
 *
 * @see @ref MtcVshare::Mtc_VSessAnswer, @ref MtcVshare::Mtc_VSessGetCookie, @ref MtcVshare::Mtc_VSessSetCookie
 */
  public static int Mtc_VSessCall(String pcUri, Object zCookie) {
    return MtcVshareJNI.Mtc_VSessCall(pcUri, zCookie);
  }

/** 
 * @brief MTC video share session call.
 *
 * @param [in] pcUri The destination uri to which you want make a video share call.
 * @param [in] pcFileName The video file to which you want make a video share call.
 * @param [in] zCookie Used to correspond video share with UI resource. The cookie
 *                      value could be get by @ref MtcVshare::Mtc_VSessGetCookie or reset by
 *                      @ref MtcVshare::Mtc_VSessSetCookie at any time of video share's life.
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXUINT.
 *
 * @see @ref MtcVshare::Mtc_VSessAnswer, @ref MtcVshare::Mtc_VSessGetCookie, @ref MtcVshare::Mtc_VSessSetCookie
 */
  public static int Mtc_VSessCallX(String pcUri, String pcFileName, Object zCookie) {
    return MtcVshareJNI.Mtc_VSessCallX(pcUri, pcFileName, zCookie);
  }

/** 
 * @brief MTC video share session answer an incoming session call which is notified by
 *        callback function which was set by @ref mtcVShareCbIncoming.
 *
 * @param [in] iSessId The id of incoming session which you want to answer.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcVshare::Mtc_VSessGetCookie or reset by
 *                      @ref MtcVshare::Mtc_VSessSetCookie at any time of session's life.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcVshare::Mtc_VSessCall, @ref mtcVShareCbIncoming, @ref MtcVshare::Mtc_VSessGetCookie, @ref MtcVshare::Mtc_VSessSetCookie
 */
  public static int Mtc_VSessAnswer(int iSessId, Object zCookie) {
    return MtcVshareJNI.Mtc_VSessAnswer(iSessId, zCookie);
  }

/** 
 * @brief MTC video share session terminiate.
 *
 * @param [in] iSessId The ID of session which you want to terminate.
 * @param [in] iReason Indicate the terminate reason which may trigger some
 *                   service in S-CSCF, see @ref MtcVshareConstants::EN_MTC_VSHARE_TERM_REASON_NORMAL.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * Actually Mtc_SessTerm does not free all resource allocated for this
 * session. It only starts a terminating procedure. All resource will be
 * freed automatically when the procedure ends.
 *
 * @see @ref MtcVshare::Mtc_VSessCall, @ref MtcVshare::Mtc_VSessAnswer...
 */
  public static int Mtc_VSessTerm(int iSessId, int iReason) {
    return MtcVshareJNI.Mtc_VSessTerm(iSessId, iReason);
  }

/** 
 * @brief MTC video session attach camera.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] pcDevId The ID of video device.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_VSessCameraAttach(int iSessId, String pcDevId) {
    return MtcVshareJNI.Mtc_VSessCameraAttach(iSessId, pcDevId);
  }

/** 
 * @brief MTC video session detach camera.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_VSessCameraDetach(int iSessId) {
    return MtcVshareJNI.Mtc_VSessCameraDetach(iSessId);
  }

/** 
 * @brief MTC video share session start video transmission.
 *
 * @param [in] iSessId The ID of session which you want to start video transmission.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_VSessVideoStart(int iSessId) {
    return MtcVshareJNI.Mtc_VSessVideoStart(iSessId);
  }

/** 
 * @brief MTC video share session stop video transmission.
 *
 * @param [in] iSessId The ID of session which you want to stop video transmission.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_VSessVideoStop(int iSessId) {
    return MtcVshareJNI.Mtc_VSessVideoStop(iSessId);
  }

/** 
 * @brief MTC check video share session has entered in talking state.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on talking state.
 * @retval false on talking state.
 *
 * @see @ref MtcVshare::Mtc_VSessCall, @ref MtcVshare::Mtc_VSessAnswer
 */
  public static boolean Mtc_VSessHasTalk(int iSessId) {
    return MtcVshareJNI.Mtc_VSessHasTalk(iSessId);
  }

/** 
 * @brief MTC video share session get cookie value.
 *
 * @param [in] iSessId The ID of session which you want to get cookie of.
 *
 * @return The cookie of session.
 *
 * The cookie value could be set by @ref MtcVshare::Mtc_VSessCall, @ref MtcVshare::Mtc_VSessAnswer or
 * @ref MtcVshare::Mtc_VSessSetCookie previously.
 *
 * @see @ref MtcVshare::Mtc_VSessCall, @ref MtcVshare::Mtc_VSessAnswer, @ref MtcVshare::Mtc_VSessSetCookie
 */
  public static Object Mtc_VSessGetCookie(int iSessId) {
    return MtcVshareJNI.Mtc_VSessGetCookie(iSessId);
  }

/** 
 * @brief MTC video share session set cookie value.
 *
 * @param [in] iSessId The ID of session which you want to set cookie.
 * @param [in] zCookie The cookie which you want to set.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcVshare::Mtc_VSessCall, @ref MtcVshare::Mtc_VSessAnswer, @ref MtcVshare::Mtc_VSessGetCookie
 */
  public static int Mtc_VSessSetCookie(int iSessId, Object zCookie) {
    return MtcVshareJNI.Mtc_VSessSetCookie(iSessId, zCookie);
  }

/** 
 * @brief MTC video share session get peer URI and display name.
 *
 * @param [in] iSessId The ID of session which you want to get.
 * @param [out] ppcDispName The display name of peer user.
 * @param [out] ppcUri The URI of peer user.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * The peer information get by this function is actually from FROM/TO header in
 * SIP message. So the true identity of peer user is not asserted by server.
 *
 * @see @ref MtcVshare::Mtc_VSessGetPeerId
 */
  public static int Mtc_VSessGetPeerUri(int iSessId, MtcString ppcDispName, MtcString ppcUri) {
    return MtcVshareJNI.Mtc_VSessGetPeerUri(iSessId, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC video share session get peer id, based on polices.
 *
 * @param [in] iSessId The ID of session which you want to get.
 * @param [out] ppcDispName The display name of peer user which you have this
 *                         session with.
 * @param [out] ppcUri The URI of peer user which you have this session with.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * Note the result of this function may be different with @ref MtcVshare::Mtc_VSessGetPeerUri
 * because the apply of polices. For example, OIP, OIR, TIP, TIR, and privacy.
 *
 * @see @ref MtcVshare::Mtc_VSessGetPeerUri
 */
  public static int Mtc_VSessGetPeerId(int iSessId, MtcString ppcDispName, MtcString ppcUri) {
    return MtcVshareJNI.Mtc_VSessGetPeerId(iSessId, ppcDispName, ppcUri);
  }

/**
 * @brief MTC video share session start record incoming video.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] *pcFileName The name of output file.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcVshare::Mtc_VSessRecVideoStop
 */
  public static int Mtc_VSessRecVideoStart(int iSessId, String pcFileName) {
    return MtcVshareJNI.Mtc_VSessRecVideoStart(iSessId, pcFileName);
  }

/**
 * @brief MTC video share session stop record incoming video.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcVshare::Mtc_VSessRecVideoStart
 */
  public static int Mtc_VSessRecVideoStop(int iSessId) {
    return MtcVshareJNI.Mtc_VSessRecVideoStop(iSessId);
  }

/**
 * @brief MTC video share session check incoming video can be recorded.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on can be recorded.
 * @retval false on can not be recorded.
 *
 * @see 
 */
  public static int Mtc_VSessVideoCanRec(int iSessId) {
    return MtcVshareJNI.Mtc_VSessVideoCanRec(iSessId);
  }

/** 
 * @brief MTC video share check if the offer/answer exchange is completed.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on offer has answer.
 * @retval false on offer has not answer.
 */
  public static boolean Mtc_VSessHasOfferAnswer(int iSessId) {
    return MtcVshareJNI.Mtc_VSessHasOfferAnswer(iSessId);
  }

/** 
 * @brief MTC video share get video size.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] piWidth Video width in pixel of specific session.
 * @param [out] piHeight Video height in pixel of specific session.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_VSessGetVideoSize(int iSessId, MtcNumber piWidth, MtcNumber piHeight) {
    return MtcVshareJNI.Mtc_VSessGetVideoSize(iSessId, piWidth, piHeight);
  }

  public static String Mtc_VSessGetName(int iSessId) {
    return MtcVshareJNI.Mtc_VSessGetName(iSessId);
  }

  public static String Mtc_VSessGetStatDesc(int iStatCode) {
    return MtcVshareJNI.Mtc_VSessGetStatDesc(iStatCode);
  }

}
