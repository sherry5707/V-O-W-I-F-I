/**
 * @file MtcCall.java
 * @brief MtcCall interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcCall interface
 */
public class MtcCall implements MtcCallConstants {
/** 
 * @brief MTC Call, establishing session call with video or audio.
 *
 * If send a new call and the callee answered, GUI will be notified by callback which 
 * was set by @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee redirected, GUI will be notified by callback which 
 * was set by @ref mtcCallCbOutgoing, @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee do not answered(timeout, busy now, etc.), GUI will be 
 * notified by callback which was set by @ref mtcCallCbAlerted, @ref mtcCallCbTermed
 *
 * While receiving call invitation, GUI will be notified by callback which 
 * was set by @ref mtcCallCbIncoming.
 *
 * While receiving call invitation and session is exist, GUI will be notified by callback which 
 * was set by @ref mtcCallCbReplaced.
 *
 * @param [in] pcUri The destination URI to which you want to make a session call.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXUINT.
 *
 * @see @ref MtcCall::Mtc_SessAnswer, @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie
 */
  public static int Mtc_SessCall(String pcUri, Object zCookie, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessCall(pcUri, zCookie, bAudio, bVideo);
  }

/** 
 * @brief MTC Call, establishing session call with video or audio.
 *
 * If send a new call and the callee answered, GUI will be notified by 
 * callback which was set by @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee redirected, GUI will be notified by callback which 
 * was set by @ref mtcCallCbOutgoing, @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee do not answered(timeout, busy now, etc.), GUI will be 
 * notified by callback which was set by @ref mtcCallCbAlerted, @ref mtcCallCbTermed
 *
 * While receiving call invitation, GUI will be notified by callback which 
 * was set by @ref mtcCallCbIncoming.
 *
 * While receiving call invitation and session is exist, GUI will be notified by callback which 
 * was set by @ref mtcCallCbReplaced.
 *
 * @param [in] pcUri The destination URI to which you want to make a session call.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 * @param [in] bSend Indicate whether this call start to send after established.
 * @param [in] bRecv Indicate whether this call start to receive after established.
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXUINT.
 *
 * @see @ref MtcCall::Mtc_SessAnswer, @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie
 */
  public static int Mtc_SessCallX(String pcUri, Object zCookie, boolean bAudio, boolean bVideo, boolean bSend, boolean bRecv) {
    return MtcCallJNI.Mtc_SessCallX(pcUri, zCookie, bAudio, bVideo, bSend, bRecv);
  }

/** 
 * @brief MTC Call, establishing session call with video or audio.
 *
 * If send a new call and the callee answered, GUI will be notified by callback which 
 * was set by @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee redirected, GUI will be notified by callback which 
 * was set by @ref mtcCallCbOutgoing, @ref mtcCallCbAlerted, @ref mtcCallCbTalking
 *
 * If send a new call and the callee do not answered(timeout, busy now, etc.), GUI will be 
 * notified by callback which was set by @ref mtcCallCbAlerted, @ref mtcCallCbTermed
 *
 * While receiving call invitation, GUI will be notified by callback which 
 * was set by @ref mtcCallCbIncoming.
 *
 * While receiving call invitation and session is exist, GUI will be notified by callback which 
 * was set by @ref mtcCallCbReplaced.
 *
 * @param [in] pcUri The destination URI to which you want to make a session call.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 * @param [in] iServInfoType Indicate type of server info, @ref MtcCallConstants::EN_MTC_SERV_INFO_P2P.
 * @param [in] iTermType Indicate type of the seat terminal, @ref MtcCallConstants::EN_MTC_TERMINAL_UNKNOWN.
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXUINT.
 *
 * @see @ref MtcCall::Mtc_SessAnswer, @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie
 */
  public static int Mtc_SessRadioCall(String pcUri, Object zCookie, boolean bAudio, boolean bVideo, int iServInfoType, int iTermType) {
    return MtcCallJNI.Mtc_SessRadioCall(pcUri, zCookie, bAudio, bVideo, iServInfoType, iTermType);
  }

/** 
 * @brief MTC session get  ST type, which should be called in the incoming callbacks.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval The ST type in ServInfo, @ref MtcCallConstants::EN_MTC_SERV_INFO_P2P.
 *
 */
  public static int Mtc_SessGetServInfoType(int iSessId) {
    return MtcCallJNI.Mtc_SessGetServInfoType(iSessId);
  }

/** 
 * @brief MTC session get  Sub-ST type, which should be called in the incoming callbacks 
 * when  @ref MtcCall::Mtc_SessGetServInfoType returns @ref EN_MTC_SERV_INFO_EXCOM.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval The Sub-ST type in ServInfo, @ref MtcCallConstants::EN_MTC_SERV_SUB_ST_SFCONF.
 *
 */
  public static int Mtc_SessGetSubServInfoType(int iSessId) {
    return MtcCallJNI.Mtc_SessGetSubServInfoType(iSessId);
  }

/** 
 * @brief MTC session get peer terminal type, which should be called in the incoming callbacks.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval The peer type, @ref MtcCallConstants::EN_MTC_TERMINAL_UNKNOWN.
 *
 */
  public static int Mtc_SessGetPeerType(int iSessId) {
    return MtcCallJNI.Mtc_SessGetPeerType(iSessId);
  }

/** 
 * @brief MTC Call Continue, continue the last session call with video or audio within short time.
 *
 * @param [in] pcUri The destination URI to which you want to make a session call.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 * @param [in] bSend Indicate whether this call start to send after established.
 * @param [in] bRecv Indicate whether this call start to receive after established.
 * @param [in] pcCallId The callid of last call session.
 * @param [in] pcLocalTag The local tag of last call session.  
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXUINT.
 *
 * @see @ref @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie, @Mtc_SessGetCallId, @Mtc_SessGetLocalTag
 */
  public static int Mtc_SessContinue(String pcUri, Object zCookie, boolean bAudio, boolean bVideo, String pcCallId, String pcLocalTag) {
    return MtcCallJNI.Mtc_SessContinue(pcUri, zCookie, bAudio, bVideo, pcCallId, pcLocalTag);
  }

/** 
 * @brief MTC session alert an incoming session.
 *
 * @param [in] iSessId The id of incoming session which you want answer.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by Rse_SessGetCookie or reset by
 *                      Rse_SessSetCookie at any time of session's life.
 * @param [in] iType Alert type, MtcCallConstants::EN_MTC_ALERT_RING.
 * @param [in] bReliable If true, message will be sending as reliable
 *                      provisional response.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie
 */
  public static int Mtc_SessAlert(int iSessId, Object zCookie, int iType, boolean bReliable) {
    return MtcCallJNI.Mtc_SessAlert(iSessId, zCookie, iType, bReliable);
  }

/** 
 * @brief MTC session answer an incoming session call which is notified by
 *        callback function which was set by @ref mtcCallCbIncoming.
 *
 * @param [in] iSessId The id of incoming session which you want to answer.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref mtcCallCbIncoming, @ref MtcCall::Mtc_SessGetCookie, @ref MtcCall::Mtc_SessSetCookie
 */
  public static int Mtc_SessAnswer(int iSessId, Object zCookie, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessAnswer(iSessId, zCookie, bAudio, bVideo);
  }

/** 
 * @brief MTC session terminate.
 *
 * @param [in] iSessId The ID of session which you want to terminate.
 * @param [in] iReason Indicate the terminate reason which may trigger some
 *                   service in S-CSCF, see @ref MtcCallConstants::EN_MTC_CALL_TERM_REASON_NORMAL.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * Actually Mtc_SessTerm does not free all resource allocated for this
 * session. It only starts a terminating procedure. All resource will be
 * freed automatically when the procedure ends.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer...
 */
  public static int Mtc_SessTerm(int iSessId, int iReason) {
    return MtcCallJNI.Mtc_SessTerm(iSessId, iReason);
  }

/** 
 * @brief MTC session hold.
 *
 * If sending session hold successfully, GUI will be notified by callback which 
 * was set by @ref mtcCallCbHoldOk
 *
 * If sending session hold failed, GUI will be notified by callback which 
 * was set by @ref mtcCallCbHoldFailed
 *
 * While receiving session held, GUI will be notified by callback which 
 * was set by @ref mtcCallCbHeld.
 *
 * @param [in] iSessId The ID of session which you want to hold.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessUnhold
 */
  public static int Mtc_SessHold(int iSessId) {
    return MtcCallJNI.Mtc_SessHold(iSessId);
  }

/** 
 * @brief MTC session unhold.
 *
 * If sending session unhold successfully, GUI will be notified by callback which 
 * was set by @ref mtcCallCbUnHoldOk
 *
 * If sending session hold failed, GUI will be notified by callback which 
 * was set by @ref mtcCallCbUnHoldFailed
 *
 * While receiving session unheld, GUI will be notified by callback which 
 * was set by @ref mtcCallCbUnHeld.
 *
 * @param [in] iSessId The ID of session which you want to unhold.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessUnhold
 */
  public static int Mtc_SessUnhold(int iSessId) {
    return MtcCallJNI.Mtc_SessUnhold(iSessId);
  }

/** 
 * @brief MTC session unattended transfer.
 *
 * If unattended transfer successfully, GUI will be notified by callback which 
 * was set by @ref mtcCallCbTrsfAcpt
 *
 * If unattended transfer failed, GUI will be notified by callback which 
 * was set by @ref mtcCallCbTrsfFailed, @ref mtcCallCbTrsfTerm
 *
 * while receiving unattended transfer, GUI will be notified by callback which 
 * was set by @ref mtcCallCbRefered
 *
 * @param [in] iSessId The ID of session which you want to make unattended transfer.
 * @param [in] pcUri The destination URI to which you want to transfer this session.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * After this operation, the session will be terminated by server.
 *
 * @see @ref MtcCall::Mtc_SessATrsf
 */
  public static int Mtc_SessUTrsf(int iSessId, String pcUri) {
    return MtcCallJNI.Mtc_SessUTrsf(iSessId, pcUri);
  }

/** 
 * @brief MTC session attended transfer.
 *
 * If attended transfer successfully, GUI will be notified by callback which 
 * was set by @ref mtcCallCbTrsfAcpt
 *
 * If attended transfer failed, GUI will be notified by callback which 
 * was set by @ref mtcCallCbTrsfFailed, @ref mtcCallCbTrsfTerm
 *
 * while receiving attended transfer, GUI will be notified by callback which 
 * was set by @ref mtcCallCbRefered
 *
 * @param [in] iSessId The ID of session which you want to make attended transfer.
 * @param [in] iTrsfSess The destination session to which you want to transfer
 *                          this session.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * If you have a session with user A(indicated by iSessId) and a session with
 * user B(indicated by iTrsfSessId), the result of attended transfer is A will
 * have a session with B and all sessions you had with A and B will be terminated.
 *
 * @see @ref MtcCall::Mtc_SessUTrsf
 */
  public static int Mtc_SessATrsf(int iSessId, int iTrsfSess) {
    return MtcCallJNI.Mtc_SessATrsf(iSessId, iTrsfSess);
  }

/** 
 * @brief MTC session diverse an incoming session call which is notified by
 *        callback function which was set by @ref mtcCallCbIncoming.
 *
 * While receiving forwarded, GUI will be notified by callback which 
 * was set by @ref mtcCallCbRedirected.
 *
 * @param [in] iSessId The ID of session which you want to diverse.
 * @param [in] pcUri The URI of diverse destination.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref mtcCallCbIncoming
 */
  public static int Mtc_SessDiv(int iSessId, String pcUri) {
    return MtcCallJNI.Mtc_SessDiv(iSessId, pcUri);
  }

/** 
 * @brief MTC session send a media update request to peer. The update in this
 *        function means open a new media stream or close an already exist
 *        media stream.
 *
 * If sending update successfully, GUI will be notified by callback which  was set by 
 * @ref mtcCallCbAddAudioOk, @ref mtcCallCbRmvAudioOk, @ref mtcCallCbAddVideoOk,
 * @ref mtcCallCbRmvVideoOk
 *
 * If sending update failed, GUI will be notified by callback which was set by 
 * @ref mtcCallCbAddAudioFailed, @ref mtcCallCbRmvAudioFailed, @ref mtcCallCbAddVideoFailed,
 * @ref mtcCallCbRmvVideoFailed
 *
 * While receiving update, GUI will be notified by callback which  was set by 
 * @ref mtcCallCbAddAudioReq, @ref mtcCallCbAddVideoReq.
 *
 * @param [in] iSessId The ID of session which you want to update its media.
 * @param [in] bAudio Indicate whether you want to have a audio stream after
 *                    update.
 * @param [in] bVideo Indicate whether you want to have a video stream after
 *                    update.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * If the update request is accepted by peer, an indication will arise
 * through the callback function which was set by @ref mtcCallCbMdfyAcpt.
 *
 * @see @ref MtcCall::Mtc_SessUpdateRsp, @ref mtcCallCbMdfyAcpt
 */
  public static int Mtc_SessUpdate(int iSessId, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessUpdate(iSessId, bAudio, bVideo);
  }

/** 
 * @brief MTC session response a media update request from peer. The update
 *        in this function means open a new media stream or close an already
 *        exist media stream.
 *
 * If sending negotiate successfully, GUI will be notified by callback which  was set by 
 * @ref mtcCallCbMdfyed
 *
 * @param [in] iSessId The ID of session which you want to accept the update
 *                      of its media.
 * @param [in] bAudio Indicate whether you want to have a audio stream after
 *                    update.
 * @param [in] bVideo Indicate whether you want to have a video stream after
 *                    update.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessUpdate, @ref mtcCallCbMdfyReq
 */
  public static int Mtc_SessUpdateRsp(int iSessId, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessUpdateRsp(iSessId, bAudio, bVideo);
  }

/** 
 * @brief MTC PickUp, establishing session call with video or audio 
          by replacing specific call.
 *
 * If the new session call was accept by callee, GUI will be notified by 
   callback which was set by @ref mtcCallCbTalking.
 *
 * If the new session call was reject by callee or no answer, GUI will be 
   notified by callback which was set by @ref mtcCallCbTermed.
 *
 * @param [in] pcUri The destination URI to which you want to make a session call.
 * @param [in] pcReplaceInfo The replace information used to locate replaced call.
                     The format must comply with RFC3891, 
                     like '425928@phone.example.org;to-tag=7743;from-tag=6472'.
 * @param [in] zCookie Used to correspond session with UI resource. The cookie
 *                      value could be get by @ref MtcCall::Mtc_SessGetCookie or reset by
 *                      @ref MtcCall::Mtc_SessSetCookie at any time of session's life.
 * @param [in] bAudio Indicate whether this call has a voice stream.
 * @param [in] bVideo Indicate whether this call has a video stream.
 *
 * @return The id of this new created session on succeed, otherwise return ZMAXUINT.
 *
 * @see @ref MtcCall::Mtc_SessPickUpX
 */
  public static int Mtc_SessPickUp(String pcUri, String pcReplaceInfo, Object zCookie, boolean bAudio, boolean bVideo) {
    return MtcCallJNI.Mtc_SessPickUp(pcUri, pcReplaceInfo, zCookie, bAudio, bVideo);
  }

/** 
 * @brief MTC session PickUp, establishing session call with video or audio 
          by replacing specific call.
 *
 * @param [in] iSessId The session ID indication which session to be pick up.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessPickUp
 */
  public static int Mtc_SessPickUpX(int iSessId) {
    return MtcCallJNI.Mtc_SessPickUpX(iSessId);
  }

/** 
 * @brief MTC session send DTMF info.
 *
 * @param [in] iSessId The ID of session which you want to send DTMF info.
 * @param [in] iDtmfType DTMF type which will be sent, see @ref MtcCallConstants::EN_MTC_CALL_DTMF_0.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessDtmf(int iSessId, int iDtmfType) {
    return MtcCallJNI.Mtc_SessDtmf(iSessId, iDtmfType);
  }

/** 
 * @brief MTC session send INFO with text.
 *
 * @param [in] iSessId The ID of session which you want to send INFO.
 * @param [in] pcInfo Text string carried by INFO.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessInfo(int iSessId, String pcInfo) {
    return MtcCallJNI.Mtc_SessInfo(iSessId, pcInfo);
  }

/** 
 * @brief MTC session send INFO by type.
 *
 * @param [in] iSessId The ID of session which you want to send INFO.
 * @param [in] pcInfo Text string carried by INFO.
 * @param [in] ucMType INFO m-type @ref MtcCallConstants::EN_MTC_CALL_MTYPE_DISC_TEXT. 
 * @param [in] ucMSubType INFO m-sub type @ref MtcCallConstants::EN_MTC_CALL_MSUBTYPE_PLAIN. 
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessInfoByType(int iSessId, String pcInfo, short ucMType, short ucMSubType) {
    return MtcCallJNI.Mtc_SessInfoByType(iSessId, pcInfo, ucMType, ucMSubType);
  }

/** 
 * @brief MTC session send out of dialog INFO by type.
 *
 * @param [in] pcUri The Uri of the user who the INFO will be send to.
 * @param [in] pcInfo Text string carried by INFO.
 * @param [in] ucMType INFO m-type @ref MtcCallConstants::EN_MTC_CALL_MTYPE_DISC_TEXT. 
 * @param [in] ucMSubType INFO m-sub type @ref MtcCallConstants::EN_MTC_CALL_MSUBTYPE_PLAIN. 
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessInfoX(String pcUri, String pcInfo, short ucMType, short ucMSubType) {
    return MtcCallJNI.Mtc_SessInfoX(pcUri, pcInfo, ucMType, ucMSubType);
  }

/** 
 * @brief MTC session send out of dialog INFO by type.
 *
 * @param [in] pcUri The Uri of the user who the INFO will be send to.
 * @param [in] pcInfo Text string carried by INFO.
 * @param [in] pcMTypeExt INFO m-type externsion string. 
 * @param [in] pcMSubTypeExt INFO m-sub type externsion string. 
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessInfoXExt(String pcUri, String pcInfo, String pcMTypeExt, String pcMSubTypeExt) {
    return MtcCallJNI.Mtc_SessInfoXExt(pcUri, pcInfo, pcMTypeExt, pcMSubTypeExt);
  }

/** 
 * @brief MTC session attach camera.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] pcName The name string of camera.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessCameraAttach(int iSessId, String pcName) {
    return MtcCallJNI.Mtc_SessCameraAttach(iSessId, pcName);
  }

/** 
 * @brief MTC session detach camera.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessCameraDetach(int iSessId) {
    return MtcCallJNI.Mtc_SessCameraDetach(iSessId);
  }

/**
 * @brief MTC get session name.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return The Render name string when found, otherwise "".
 */
  public static String Mtc_SessGetName(int iSessId) {
    return MtcCallJNI.Mtc_SessGetName(iSessId);
  }

/**
 * @brief MTC get session from render name.
 *
 * @param pcName Render name string.
 *
 * @return The ID of session when found, otherwise ZMAXUINT.
 */
  public static int Mtc_SessFromName(String pcName) {
    return MtcCallJNI.Mtc_SessFromName(pcName);
  }

/** 
 * @brief MTC session start video transmission.
 *
 * @param [in] iSessId The ID of session which you want to start video transmission.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessVideoStart(int iSessId) {
    return MtcCallJNI.Mtc_SessVideoStart(iSessId);
  }

/** 
 * @brief MTC session stop video transmission.
 *
 * @param [in] iSessId The ID of session which you want to stop video transmission.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessVideoStop(int iSessId) {
    return MtcCallJNI.Mtc_SessVideoStop(iSessId);
  }

/** 
 * @brief MTC session pause sending video.
 *
 * @param [in] iSessId The ID of session which you want to stop video transmission.
 * @param [in] iState Transport state type, @ref EN_MTC_CALL_TRANSMISSION_STATE.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessVideoSetSend(int iSessId, int iState) {
    return MtcCallJNI.Mtc_SessVideoSetSend(iSessId, iState);
  }

/** 
 * @brief Get MTC session video sending state.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Transport state type, @ref EN_MTC_CALL_TRANSMISSION_STATE.
 */
  public static int Mtc_SessVideoGetSend(int iSessId) {
    return MtcCallJNI.Mtc_SessVideoGetSend(iSessId);
  }

/** 
 * @brief Get if the network status is suitable for sending video.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true It is suitable for sending video.
 * @retval false It is not suitable for sending video.
 */
  public static boolean Mtc_SessVideoGetSendAdvice(int iSessId) {
    return MtcCallJNI.Mtc_SessVideoGetSendAdvice(iSessId);
  }

/** 
 * @brief Get MTC session video received state.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Transport state type, @ref EN_MTC_CALL_TRANSMISSION_STATE.
 */
  public static int Mtc_SessVideoGetRecv(int iSessId) {
    return MtcCallJNI.Mtc_SessVideoGetRecv(iSessId);
  }

/** 
 * @brief MTC session get video size.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] piWidth Video width in pixel of specific session.
 * @param [out] piHeight Video height in pixel of specific session.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessGetVideoSize(int iSessId, MtcNumber piWidth, MtcNumber piHeight) {
    return MtcCallJNI.Mtc_SessGetVideoSize(iSessId, piWidth, piHeight);
  }

/** 
 * @brief MTC session get remote video size.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] piWidth Video width in pixel of specific session.
 * @param [out] piHeight Video height in pixel of specific session.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessGetVideoRemoteSize(int iSessId, MtcNumber piWidth, MtcNumber piHeight) {
    return MtcCallJNI.Mtc_SessGetVideoRemoteSize(iSessId, piWidth, piHeight);
  }

/** 
 * @brief MTC session get local video size.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] piWidth Video width in pixel of specific session.
 * @param [out] piHeight Video height in pixel of specific session.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessGetVideoLocalSize(int iSessId, MtcNumber piWidth, MtcNumber piHeight) {
    return MtcCallJNI.Mtc_SessGetVideoLocalSize(iSessId, piWidth, piHeight);
  }

/**
 * @brief MTC session get network status of video stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Network status @ref MtcCallConstants::EN_MTC_NET_STATUS_DISCONNECTED.
 */
  public static int Mtc_SessGetVideoNetSta(int iSessId) {
    return MtcCallJNI.Mtc_SessGetVideoNetSta(iSessId);
  }

/**
 * @brief MTC session get network status of audio stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Network status @ref MtcCallConstants::EN_MTC_NET_STATUS_DISCONNECTED.
 */
  public static int Mtc_SessGetAudioNetSta(int iSessId) {
    return MtcCallJNI.Mtc_SessGetAudioNetSta(iSessId);
  }

/**
 * @brief MTC session get session state.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Session state @ref MtcCallConstants::EN_MTC_SESSION_STATE_IDLE.
 */
  public static int Mtc_SessGetState(int iSessId) {
    return MtcCallJNI.Mtc_SessGetState(iSessId);
  }

/** 
 * @brief MTC session check if has a active video stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on yes.
 * @retval false on no.
 *
 * @see @ref MtcCall::Mtc_SessVideoStart, @ref MtcCall::Mtc_SessVideoStop, @ref MtcCall::Mtc_SessHasAudio
 */
  public static boolean Mtc_SessHasVideo(int iSessId) {
    return MtcCallJNI.Mtc_SessHasVideo(iSessId);
  }

/** 
 * @brief MTC session check if has a active audio stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on yes.
 * @retval false on no.
 *
 * @see @ref MtcCall::Mtc_SessHasVideo
 */
  public static boolean Mtc_SessHasAudio(int iSessId) {
    return MtcCallJNI.Mtc_SessHasAudio(iSessId);
  }

/** 
 * @brief MTC check session has entered in talking state.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on talking state.
 * @retval false on talking state.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer
 */
  public static boolean Mtc_SessHasTalk(int iSessId) {
    return MtcCallJNI.Mtc_SessHasTalk(iSessId);
  }

/** 
 * @brief MTC session get crypto state.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bVideo The video flag .
 *
 * @retval The crypto state for the session.
 *
 */
  public static int Mtc_SessGetCryptoState(int iSessId, boolean bVideo) {
    return MtcCallJNI.Mtc_SessGetCryptoState(iSessId, bVideo);
  }

/** 
 * @brief MTC check session has entered in hold state.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on hold state.
 * @retval false on hold state.
 *
 * @see @ref MtcCall::Mtc_SessHasHeld
 */
  public static boolean Mtc_SessHasHold(int iSessId) {
    return MtcCallJNI.Mtc_SessHasHold(iSessId);
  }

/** 
 * @brief MTC check session has entered in held state.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on held state.
 * @retval false on held  state.
 *
 * @see @ref MtcCall::Mtc_SessHasHold
 */
  public static boolean Mtc_SessHasHeld(int iSessId) {
    return MtcCallJNI.Mtc_SessHasHeld(iSessId);
  }

/** 
 * @brief MTC get the lost ratio in percentage of audio stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Lost ratio in percentage(0-1000).
 *
 * @see @ref MtcCall::Mtc_SessVideoLostRatio
 */
  public static int Mtc_SessAudioLostRatio(int iSessId) {
    return MtcCallJNI.Mtc_SessAudioLostRatio(iSessId);
  }

/** 
 * @brief MTC get the lost ratio in percentage of video stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Lost ratio in percentage(0-1000).
 *
 * @see @ref MtcCall::Mtc_SessAudioLostRatio
 */
  public static int Mtc_SessVideoLostRatio(int iSessId) {
    return MtcCallJNI.Mtc_SessVideoLostRatio(iSessId);
  }

/** 
 * @brief MTC get the lost count of audio stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Total lost count.
 *
 * @see @ref MtcCall::Mtc_SessVideoLostRatio
 */
  public static int Mtc_SessAudioLostCount(int iSessId) {
    return MtcCallJNI.Mtc_SessAudioLostCount(iSessId);
  }

/** 
 * @brief MTC get the lost count of video stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Total lost count.
 *
 * @see @ref MtcCall::Mtc_SessAudioLostCount
 */
  public static int Mtc_SessVideoLostCount(int iSessId) {
    return MtcCallJNI.Mtc_SessVideoLostCount(iSessId);
  }

/** 
 * @brief MTC get the round trip time of audio stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Round trip time in milliseconds.
 *
 * @see @ref MtcCall::Mtc_SessVideoRtt
 */
  public static int Mtc_SessAudioRtt(int iSessId) {
    return MtcCallJNI.Mtc_SessAudioRtt(iSessId);
  }

/** 
 * @brief MTC get the round trip time of video stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Round trip time in milliseconds.
 *
 * @see @ref MtcCall::Mtc_SessAudioRtt
 */
  public static int Mtc_SessVideoRtt(int iSessId) {
    return MtcCallJNI.Mtc_SessVideoRtt(iSessId);
  }

/** 
 * @brief MTC get the jitter of audio stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Jitter in milliseconds.
 *
 * @see @ref MtcCall::Mtc_SessVideoJitter
 */
  public static int Mtc_SessAudioJitter(int iSessId) {
    return MtcCallJNI.Mtc_SessAudioJitter(iSessId);
  }

/** 
 * @brief MTC get the jitter of video stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return Jitter in milliseconds.
 *
 * @see @ref MtcCall::Mtc_SessAudioJitter
 */
  public static int Mtc_SessVideoJitter(int iSessId) {
    return MtcCallJNI.Mtc_SessVideoJitter(iSessId);
  }

/** 
 * @brief MTC get audio stream traffic data for following:
 * send bitrate, receive bitrate, send bytes, receive bytes
 *
 * @param [in] iSessId The ID of session.
 * @param [out] piSentBps The sent traffic in bps.
 * @param [out] piRecvBps The received traffic in bps.
 * @param [out] piRecvBytes The received bytes.
 * @param [out] piSendBytes The send bytes.
 *
 * @retval MtcCommonConstants::ZOK Get successfully.
 * @retval MtcCommonConstants::ZFAILED Get failed.
 *
 * @see @ref MtcCall::Mtc_SessVideoTrafficData
 */
  public static int Mtc_SessAudioTrafficData(int iSessId, MtcNumber piSentBps, MtcNumber piRecvBps, MtcNumber piSentBytes, MtcNumber piRecvBytes) {
    return MtcCallJNI.Mtc_SessAudioTrafficData(iSessId, piSentBps, piRecvBps, piSentBytes, piRecvBytes);
  }

/** 
 * @brief MTC get video stream traffic data for following:
 * send bitrate, receive bitrate, send bytes, receive bytes
 *
 * @param [in] iSessId The ID of session.
 * @param [out] piSentBps The sent traffic in bps.
 * @param [out] piRecvBps The received traffic in bps.
 * @param [out] piRecvBytes The received bytes.
 * @param [out] piSendBytes The send bytes.
 *
 * @retval MtcCommonConstants::ZOK Get successfully.
 * @retval MtcCommonConstants::ZFAILED Get failed.
 *
 * @see @ref MtcCall::Mtc_SessAudioTrafficData
 */
  public static int Mtc_SessVideoTrafficData(int iSessId, MtcNumber piSentBps, MtcNumber piRecvBps, MtcNumber piSentBytes, MtcNumber piRecvBytes) {
    return MtcCallJNI.Mtc_SessVideoTrafficData(iSessId, piSentBps, piRecvBps, piSentBytes, piRecvBytes);
  }

/** 
 * @brief MTC session check if peer offer a video stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on yes.
 * @retval false on no.
 *
 * @see @ref MtcCall::Mtc_SessVideoStart, @ref MtcCall::Mtc_SessVideoStop, @ref MtcCall::Mtc_SessPeerOfferAudio
 */
  public static boolean Mtc_SessPeerOfferVideo(int iSessId) {
    return MtcCallJNI.Mtc_SessPeerOfferVideo(iSessId);
  }

/** 
 * @brief MTC session check if peer offer a audio stream.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on yes.
 * @retval false on no.
 *
 * @see @ref MtcCall::Mtc_SessPeerOfferVideo
 */
  public static boolean Mtc_SessPeerOfferAudio(int iSessId) {
    return MtcCallJNI.Mtc_SessPeerOfferAudio(iSessId);
  }

/** 
 * @brief MTC session get the mute status of microphone.
 *
 * @param [in] iSessId The ID of session which you want to get.
 *
 * @retval true on muted.
 * @retval false on not muted.
 *
 * @see @ref MtcCall::Mtc_SessSetMicMute
 */
  public static boolean Mtc_SessGetMicMute(int iSessId) {
    return MtcCallJNI.Mtc_SessGetMicMute(iSessId);
  }

/** 
 * @brief MTC session set the mute status of microphone.
 *
 * @param [in] iSessId The ID of session which you want to set.
 * @param [in] bMute Indicate whether to mute the microphone.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetMicMute @ref MtcCall::Mtc_SessSetMicMuteAll
 */
  public static int Mtc_SessSetMicMute(int iSessId, boolean bMute) {
    return MtcCallJNI.Mtc_SessSetMicMute(iSessId, bMute);
  }

/** 
 * @brief MTC session set the mute status of microphone, which not related to the call session.
 *
 * @param [in] bMute Indicate whether to mute the microphone.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessSetMicMute
 */
  public static int Mtc_SessSetMicMuteAll(boolean bMute) {
    return MtcCallJNI.Mtc_SessSetMicMuteAll(bMute);
  }

/** 
 * @brief MTC session get scale of microphone.
 *
 * @param [in] iSessId The ID of session which you want get.
 *
 * @return Scale value, from 0.0 to 10.0, 1.0 for no scaling.
 *
 * @see @ref MtcCall::Mtc_SessSetMicScale
 */
  public static float Mtc_SessGetMicScale(int iSessId) {
    return MtcCallJNI.Mtc_SessGetMicScale(iSessId);
  }

/** 
 * @brief MTC session set scale of microphone.
 *
 * @param [in] iSessId The ID of session which you want set.
 * @param [in] fScale Scale value, from 0.0 to 10.0, 1.0 for no scaling.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetMicScale
 */
  public static int Mtc_SessSetMicScale(int iSessId, float fScale) {
    return MtcCallJNI.Mtc_SessSetMicScale(iSessId, fScale);
  }

/** 
 * @brief MTC session get the mute status of speaker.
 *
 * @param [in] iSessId The ID of session which you want to get.
 *
 * @retval true on muted.
 * @retval false on not muted.
 *
 * @see @ref MtcCall::Mtc_SessSetSpkMute
 */
  public static boolean Mtc_SessGetSpkMute(int iSessId) {
    return MtcCallJNI.Mtc_SessGetSpkMute(iSessId);
  }

/** 
 * @brief MTC session set the mute status of speaker.
 *
 * @param [in] iSessId The ID of session which you want to set.
 * @param [in] bMute Indicate whether to mute the speaker.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetSpkMute
 */
  public static int Mtc_SessSetSpkMute(int iSessId, boolean bMute) {
    return MtcCallJNI.Mtc_SessSetSpkMute(iSessId, bMute);
  }

/** 
 * @brief MTC session get scale of speaker.
 *
 * @param [in] iSessId The ID of session which you want get.
 *
 * @return Scale value, from 0.0 to 10.0, 1.0 for no scaling.
 *
 * @see @ref MtcCall::Mtc_SessSetSpkScale
 */
  public static float Mtc_SessGetSpkScale(int iSessId) {
    return MtcCallJNI.Mtc_SessGetSpkScale(iSessId);
  }

/** 
 * @brief MTC session set scale of speaker.
 *
 * @param [in] iSessId The ID of session which you want set.
 * @param [in] fScale Scale value, from 0.0 to 10.0, 1.0 for no scaling.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetSpkScale
 */
  public static int Mtc_SessSetSpkScale(int iSessId, float fScale) {
    return MtcCallJNI.Mtc_SessSetSpkScale(iSessId, fScale);
  }

/** 
 * @brief MTC session get volume of speaker.
 *
 * @param [in] iSessId The ID of session which you want get.
 *
 * @return Volume value, from 0 to 20.
 *
 * @see @ref MtcCall::Mtc_SessSetSpkVol
 */
  public static int Mtc_SessGetSpkVol(int iSessId) {
    return MtcCallJNI.Mtc_SessGetSpkVol(iSessId);
  }

/** 
 * @brief MTC session set volume of speaker.
 *
 * @param [in] iSessId The ID of session which you want set.
 * @param [in] iVol Volume value, from 0 to 20.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetSpkVol
 */
  public static int Mtc_SessSetSpkVol(int iSessId, int iVol) {
    return MtcCallJNI.Mtc_SessSetSpkVol(iSessId, iVol);
  }

/** 
 * @brief MTC session get mix voice status.
 *
 * @param [in] iSessId The ID of session which you want to set.
 *
 * @return mix voice status.
 */
  public static boolean Mtc_SessGetMixVoice(int iSessId) {
    return MtcCallJNI.Mtc_SessGetMixVoice(iSessId);
  }

/** 
 * @brief MTC session set mix voice status.
 *
 * @param [in] iSessId The ID of session which you want to set.
 * @param [in] bEnable Indicate whether to mix voice. If true, it will mix
 *                     corresponding session's voice.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessSetMixVoice(int iSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessSetMixVoice(iSessId, bEnable);
  }

/** 
 * @brief MTC session get cookie value.
 *
 * @param [in] iSessId The ID of session which you want to get cookie of.
 *
 * @return The cookie of session.
 *
 * The cookie value could be set by @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer or
 * @ref MtcCall::Mtc_SessSetCookie previously.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer, @ref MtcCall::Mtc_SessSetCookie
 */
  public static Object Mtc_SessGetCookie(int iSessId) {
    return MtcCallJNI.Mtc_SessGetCookie(iSessId);
  }

/** 
 * @brief MTC session set cookie value.
 *
 * @param [in] iSessId The ID of session which you want to set cookie.
 * @param [in] zCookie The cookie which you want to set.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessCall, @ref MtcCall::Mtc_SessAnswer, @ref MtcCall::Mtc_SessGetCookie
 */
  public static int Mtc_SessSetCookie(int iSessId, Object zCookie) {
    return MtcCallJNI.Mtc_SessSetCookie(iSessId, zCookie);
  }

/** 
 * @brief MTC session get local tag string.
 *
 * @param [in] iSessId The ID of session which you want to get.
 * @param [out] ppcLocalTag The string of local tag.
 *
 *   The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessGetLocalTag(int iSessId, MtcString ppcLocalTag) {
    return MtcCallJNI.Mtc_SessGetLocalTag(iSessId, ppcLocalTag);
  }

/** 
 * @brief MTC session get Call-ID string.
 *
 * @param [in] iSessId The ID of session which you want to get.
 * @param [out] ppcCallId The string of Call-ID.
 *
 *   The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessGetCallId(int iSessId, MtcString ppcCallId) {
    return MtcCallJNI.Mtc_SessGetCallId(iSessId, ppcCallId);
  }

/** 
 * @brief MTC session get peer URI and display name.
 *
 * @param [in] iSessId The ID of session which you want to get.
 * @param [out] ppcDispName The display name of peer user.
 * @param [out] ppcUri The URI of peer user.
 *
 *   The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * The peer information get by this function is actually from FROM/TO header in
 * SIP message. So the true identity of peer user is not asserted by server.
 *
 * @see @ref MtcCall::Mtc_SessGetPeerId
 */
  public static int Mtc_SessGetPeerUri(int iSessId, MtcString ppcDispName, MtcString ppcUri) {
    return MtcCallJNI.Mtc_SessGetPeerUri(iSessId, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC session get peer id, based on polices.
 *
 * @param [in] iSessId The ID of session which you want to get.
 * @param [out] ppcDispName The display name of peer user which you have this session with.
 * @param [out] ppcUri The URI of peer user which you have this session with.
 *
 *   The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * Note the result of this function may be different with Mtc_SessGetPeerUri
 * because the apply of polices. For example, OIP, OIR, TIP, TIR, and privacy.
 *
 * @see @ref MtcCall::Mtc_SessGetPeerUri
 */
  public static int Mtc_SessGetPeerId(int iSessId, MtcString ppcDispName, MtcString ppcUri) {
    return MtcCallJNI.Mtc_SessGetPeerId(iSessId, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC session check if the peer is contains isfocus parameter.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on peer is focus.
 * @retval false on peer no focus.
 */
  public static boolean Mtc_SessPeerIsFocus(int iSessId) {
    return MtcCallJNI.Mtc_SessPeerIsFocus(iSessId);
  }

/** 
 * @brief MTC session get paticipant size.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return The paticipant size.
 *
 * @see MtcCall::Mtc_SessGetPartpUri, Mtc_SessGetPartpStat
 */
  public static int Mtc_SessGetPartpSize(int iSessId) {
    return MtcCallJNI.Mtc_SessGetPartpSize(iSessId);
  }

/** 
 * @brief MTC session get paticipant uri and display name.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] iIndex The paticipant index.
 * @param [out] ppcDispName The display name of paticipant.
 * @param [out] ppcUri The uri of paticipant.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessGetPartpSize, @ref MtcCall::Mtc_SessGetPartpStat
 */
  public static int Mtc_SessGetPartpUri(int iSessId, int iIndex, MtcString ppcDispName, MtcString ppcUri) {
    return MtcCallJNI.Mtc_SessGetPartpUri(iSessId, iIndex, ppcDispName, ppcUri);
  }

/** 
 * @brief MTC session get paticipant state.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] iIndex The paticipant index.
 * @param [out] ppcDispName The display name of paticipant.
 * @param [out] ppcUri The uri of paticipant.
 *
 * @retrun The paticipant state, @see @ref MtcCallConstants::EN_MTC_SESS_PARTP_STATE_PENDING
 *
 * @see @ref MtcCall::Mtc_SessGetPartpSize, @ref MtcCall::Mtc_SessGetPartpUri
 */
  public static int Mtc_SessGetPartpStat(int iSessId, int iIndex) {
    return MtcCallJNI.Mtc_SessGetPartpStat(iSessId, iIndex);
  }

/** 
 * @brief MTC session check if the offer/answer exchange is completed.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval true on offer has answer.
 * @retval false on offer has not answer.
 *
 * @see @ref MtcCall::Mtc_SessGetEarlyMediaStatus
 */
  public static boolean Mtc_SessHasOfferAnswer(int iSessId) {
    return MtcCallJNI.Mtc_SessHasOfferAnswer(iSessId);
  }

/** 
 * @brief MTC session get alert information type.
 *
 * @param [in] iSessId The ID of session which you want to get.
 *
 * @retval @ref MtcCallConstants::EN_MTC_CALL_ALERT_INFO_NULL.
 *
 * The information get by this function is actually from Alert-Info header 
 * in SIP message.
 */
  public static int Mtc_SessGetAlertInfo(int iSessId) {
    return MtcCallJNI.Mtc_SessGetAlertInfo(iSessId);
  }

/** 
 * @brief MTC session get the early media status.
 *
 * @param [in] iSessId The ID of session which you want to get its early media
 *                      status.
 * @param [in] bVideo If true, get video status, otherwise get audio status.
 *
 * @retval @ref MtcCallConstants::EN_MTC_CALL_EM_STATUS_INACTIVE.
 *
 * @see @ref MtcCall::Mtc_SessHasOfferAnswer
 */
  public static int Mtc_SessGetEarlyMediaStatus(int iSessId, boolean bVideo) {
    return MtcCallJNI.Mtc_SessGetEarlyMediaStatus(iSessId, bVideo);
  }

/**
 * @brief Reccord mic start.
 *
 * It will reccord from mic to file.
 *
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 *
 * @retval MtcCommonConstants::ZOK Audio Reccord  successfully.
 * @retval MtcCommonConstants::ZFAILED Audio Reccord failed.
 *
 * @see @ref MtcCall::Mtc_SessRecMicStop
 */
  public static int Mtc_SessRecMicStart(String pcFileName, short ucFileType) {
    return MtcCallJNI.Mtc_SessRecMicStart(pcFileName, ucFileType);
  }

/**
 * @brief Reccord Audio stop.
 *
 * @see @ref MtcCall::Mtc_SessRecMicStart
 */
  public static int Mtc_SessRecMicStop() {
    return MtcCallJNI.Mtc_SessRecMicStop();
  }

/** 
 * @brief MTC session record playout.
 *
 * @param [in] iSessId The ID of session which you want to record, 
 *                      if iSessId is invalid, record the mix playout.
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessRecPlayStart(int iSessId, String pcFileName, short ucFileType) {
    return MtcCallJNI.Mtc_SessRecPlayStart(iSessId, pcFileName, ucFileType);
  }

/** 
 * @brief MTC session stop record playout.
 *
 * @param [in] iSessId The ID of session which you want to stop record, 
 *                      if iSessId is invalid, stop record the mix playout.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessRecPlayStop(int iSessId) {
    return MtcCallJNI.Mtc_SessRecPlayStop(iSessId);
  }

/** 
 * @brief MTC session start send sound from file.
 *
 * @param [in] iSessId The ID of session which you want to send sound from file. 
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 * @param [in] bLoop false if play once.
 * @param [in] bMix If false, microphone sound is replaced by file sound;
 *                  if true, microphone sound is mixed with file sound
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessSndStartSend(int iSessId, String pcFileName, short ucFileType, boolean bLoop, boolean bMix) {
    return MtcCallJNI.Mtc_SessSndStartSend(iSessId, pcFileName, ucFileType, bLoop, bMix);
  }

/** 
 * @brief MTC session stop send sound.
 *
 * @param [in] iSessId The ID of session which you want to stop sound from file. 
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessSndStopSend(int iSessId) {
    return MtcCallJNI.Mtc_SessSndStopSend(iSessId);
  }

/** 
 * @brief MTC session start play sound from file.
 *
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 * @param [in] bOnce true if play once, false if play loop.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessSndStartPlay(String pcFileName, short ucFileType, boolean bOnce) {
    return MtcCallJNI.Mtc_SessSndStartPlay(pcFileName, ucFileType, bOnce);
  }

/** 
 * @brief MTC session stop play sound.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessSndStopPlay() {
    return MtcCallJNI.Mtc_SessSndStopPlay();
  }

/** 
 * @brief MTC session start send bgm from file.
 *
 * @param [in] iSessId The ID of session which you want to record, 
 *                      if iSessId is invalid, record the mix playout.
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessSndStartBgm(int iSessId, String pcFileName, short ucFileType) {
    return MtcCallJNI.Mtc_SessSndStartBgm(iSessId, pcFileName, ucFileType);
  }

/** 
 * @brief MTC session stop send bgm.
 *
 * @param [in] iSessId The ID of session which you want to send sound, 
 *                      if iSessId is invalid, stop send sound.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessSndStopBgm(int iSessId) {
    return MtcCallJNI.Mtc_SessSndStopBgm(iSessId);
  }

/**
 * @brief Reccord call start.
 *
 * It will reccord from call to file.
 *
 * @param [in] pcFileName The reccord file name.
 * @param [in] ucFileType The reccord file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW
 *
 * @retval MtcCommonConstants::ZOK Audio Reccord  successfully.
 * @retval MtcCommonConstants::ZFAILED Audio Reccord failed.
 *
 * @see @ref MtcCall::Mtc_SessRecCallStop
 */
  public static int Mtc_SessRecCallStart(String pcFileName, short ucFileType) {
    return MtcCallJNI.Mtc_SessRecCallStart(pcFileName, ucFileType);
  }

/**
 * @brief Reccord Audio stop.
 *
 * @see @ref MtcCall::Mtc_SessRecCallStart
 */
  public static int Mtc_SessRecCallStop() {
    return MtcCallJNI.Mtc_SessRecCallStop();
  }

/** 
 * @brief Mtc session start recording sound.
 *
 * @param [in] iSessId The ID of session whose sound you want to record.
 * @param [in] pcFileName The recording file name.
 * @param [in] ucFileType The recording file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW.
 * @param [in] iRecMode The recording mode. @ref MtcCallConstants::EN_MTC_CALL_REC_MODE_ALL.
 *
 * @see @ref MtcCall::Mtc_SessRecSndStop
 */
  public static int Mtc_SessRecSndStart(int iSessId, String pcFileName, short ucFileType, int iRecMode) {
    return MtcCallJNI.Mtc_SessRecSndStart(iSessId, pcFileName, ucFileType, iRecMode);
  }

/** 
 * @brief Mtc session stop recording sound.
 *
 * @param [in] iSessId The ID of session.
 *
 * @see @ref MtcCall::Mtc_SessRecSndStart
 */
  public static int Mtc_SessRecSndStop(int iSessId) {
    return MtcCallJNI.Mtc_SessRecSndStop(iSessId);
  }

/** 
 * @brief Mtc session get audio statistics.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval String of audio statistics.
 */
  public static String Mtc_SessGetAudioStat(int iSessId) {
    return MtcCallJNI.Mtc_SessGetAudioStat(iSessId);
  }

/** 
 * @brief Mtc session get video statistics.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval String of video statistics.
 */
  public static String Mtc_SessGetVideoStat(int iSessId) {
    return MtcCallJNI.Mtc_SessGetVideoStat(iSessId);
  }

/**
 * @brief MTC session set state of receiving-side AGC.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bEnable true to enable Rx-AGC, false to disable Rx-AGC.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAgcEnable
 */
  public static int Mtc_SessSetRxAgcEnable(int iSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessSetRxAgcEnable(iSessId, bEnable);
  }

/**
 * @brief MTC session get state of receiving-side AGC.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] *pbEnable Current state of Rx-AGC.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAgcEnable
 */
  public static int Mtc_SessGetRxAgcEnable(int iSessId, MtcNumber pbEnable) {
    return MtcCallJNI.Mtc_SessGetRxAgcEnable(iSessId, pbEnable);
  }

/**
 * @brief MTC session set mode of receiving-side AGC.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] ucMode Mode of Rx-AGC, @ref MtcMediaConstants::EN_MTC_RX_GC_FIXED.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAgcMode
 */
  public static int Mtc_SessSetRxAgcMode(int iSessId, short ucMode) {
    return MtcCallJNI.Mtc_SessSetRxAgcMode(iSessId, ucMode);
  }

/**
 * @brief MTC session get mode of receiving-side AGC.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] *pucMode Mode of Rx-AGC, @ref MtcMediaConstants::EN_MTC_RX_GC_FIXED.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAgcMode
 */
  public static int Mtc_SessGetRxAgcMode(int iSessId, MtcNumber pucMode) {
    return MtcCallJNI.Mtc_SessGetRxAgcMode(iSessId, pucMode);
  }

/**
 * @brief MTC session set traget dBOV of receiving-side AGC.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] wTargetDb Traget dBOV of Rx-AGC.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAgcTarget
 */
  public static int Mtc_SessSetRxAgcTarget(int iSessId, int wTargetDb) {
    return MtcCallJNI.Mtc_SessSetRxAgcTarget(iSessId, wTargetDb);
  }

/**
 * @brief MTC session get traget dBOV of receiving-side AGC.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] *pwTargetDb Traget dBOV of Rx-AGC.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAgcTarget
 */
  public static int Mtc_SessGetRxAgcTarget(int iSessId, MtcNumber pwTargetDb) {
    return MtcCallJNI.Mtc_SessGetRxAgcTarget(iSessId, pwTargetDb);
  }

/**
 * @brief MTC session set state of receiving-side ANR.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bEnable true to enable Rx-ANR, false to disable Rx-ANR.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAnrEnable
 */
  public static int Mtc_SessSetRxAnrEnable(int iSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessSetRxAnrEnable(iSessId, bEnable);
  }

/**
 * @brief MTC session get state of receiving-side ANR.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] *pbEnable Current state of Rx-ANR.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAnrEnable
 */
  public static int Mtc_SessGetRxAnrEnable(int iSessId, MtcNumber pbEnable) {
    return MtcCallJNI.Mtc_SessGetRxAnrEnable(iSessId, pbEnable);
  }

/**
 * @brief MTC session set mode of receiving-side ANR.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] ucMode Mode of Rx-ANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetRxAnrMode
 */
  public static int Mtc_SessSetRxAnrMode(int iSessId, short ucMode) {
    return MtcCallJNI.Mtc_SessSetRxAnrMode(iSessId, ucMode);
  }

/**
 * @brief MTC session get mode of receiving-side ANR.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] *pucMode Mode of Rx-ANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetRxAnrMode
 */
  public static int Mtc_SessGetRxAnrMode(int iSessId, MtcNumber pucMode) {
    return MtcCallJNI.Mtc_SessGetRxAnrMode(iSessId, pucMode);
  }

/**
 * @brief MTC session set state of VAD.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bEnable true to enable VAD, false to disable VAD.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetVadEnable
 */
  public static int Mtc_SessSetVadEnable(int iSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessSetVadEnable(iSessId, bEnable);
  }

/**
 * @brief MTC session get state of VAD.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] *pbEnable Current state of VAD.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetVadEnable
 */
  public static int Mtc_SessGetVadEnable(int iSessId, MtcNumber pbEnable) {
    return MtcCallJNI.Mtc_SessGetVadEnable(iSessId, pbEnable);
  }

/**
 * @brief MTC session set mode of VAD.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] ucMode Mode of VAD, @ref MtcMediaConstants::EN_MTC_VAD_NORMAL.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessGetVadMode
 */
  public static int Mtc_SessSetVadMode(int iSessId, short ucMode) {
    return MtcCallJNI.Mtc_SessSetVadMode(iSessId, ucMode);
  }

/**
 * @brief MTC session get mode of VAD.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] *pucMode Mode of VAD, @ref MtcMediaConstants::EN_MTC_VAD_NORMAL.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessSetVadMode
 */
  public static int Mtc_SessGetVadMode(int iSessId, MtcNumber pucMode) {
    return MtcCallJNI.Mtc_SessGetVadMode(iSessId, pucMode);
  }

/**
 * @brief MTC session set send sound from file loop option.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bLoop The loop option.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCall::Mtc_SessGetSndSendLoopOption
 */
  public static int Mtc_SessSetSndSendLoopOption(int iSessId, boolean bLoop) {
    return MtcCallJNI.Mtc_SessSetSndSendLoopOption(iSessId, bLoop);
  }

/**
 * @brief MTC session get send sound from file loop option.
 *
 * @param [in] iSessId The ID of session.
 * @param [out] *pbLoop Current loop option of  sending sound from file.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCall::Mtc_SessSetSndSendLoopOption
 */
  public static int Mtc_SessGetSndSendLoopOption(int iSessId, MtcNumber pbLoop) {
    return MtcCallJNI.Mtc_SessGetSndSendLoopOption(iSessId, pbLoop);
  }

/**
 * @brief MTC session enable/disable color enhancement.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bEnable true to enable color enhancement, 
 *                     false to disable color enhancement.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 */
  public static int Mtc_SessEnhanceColor(int iSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessEnhanceColor(iSessId, bEnable);
  }

/**
 * @brief MTC session enable/disable CPU load control.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bEnable true to enable CPU load control, 
 *                     false to disable CPU load control.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 */
  public static int Mtc_SessArsEnableCpuCtrl(int iSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessArsEnableCpuCtrl(iSessId, bEnable);
  }

/**
 * @brief MTC session set target usage percent of CPU load control.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] iLoad Target usage percent of CPU load control, should be 0-100.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 */
  public static int Mtc_SessArsSetCupCtrlTgt(int iSessId, int iLoad) {
    return MtcCallJNI.Mtc_SessArsSetCupCtrlTgt(iSessId, iLoad);
  }

/**
 * @brief MTC session enable/disable bandwidth efficient mode.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bEnable true to enable bandwidth efficient mode, 
 *                     false to disable bandwidth efficient mode.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 */
  public static int Mtc_SessArsEnableBem(int iSessId, boolean bEnable) {
    return MtcCallJNI.Mtc_SessArsEnableBem(iSessId, bEnable);
  }

/**
 * @brief MTC session ARS get video bitrate in bps.
 * @param  [in] iSessId  The ID of session.
 * @param  [out] piBitrate Current max bitrate of ARS in bps.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 */
  public static int Mtc_SessArsGetVideoBitrate(int iSessId, MtcNumber piBitrate) {
    return MtcCallJNI.Mtc_SessArsGetVideoBitrate(iSessId, piBitrate);
  }

/**
 * @brief MTC session ARS set video bitrate in bps.
 * @param  [in] iSessId  The ID of session.
 * @param  [in] iBitrate Max bitrate of ARS in bps.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 */
  public static int Mtc_SessArsSetVideoBitrate(int iSessId, int iBitrate) {
    return MtcCallJNI.Mtc_SessArsSetVideoBitrate(iSessId, iBitrate);
  }

/**
 * @brief MTC session start recoding incoming video.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] pcFileName Name of the file which to store the recording data.
 * @param [in] ucFileType File type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW.
 * @param [in] iWidth Video width in pixel of recoding data.
 * @param [in] iHeight Video height in pixel of recoding data.
 * @param [in] bWithAudio true to recording audio data.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRecRecvVideoStop
 */
  public static int Mtc_SessRecRecvVideoStart(int iSessId, String pcFileName, short ucFileType, int iWidth, int iHeight, boolean bWithAudio) {
    return MtcCallJNI.Mtc_SessRecRecvVideoStart(iSessId, pcFileName, ucFileType, iWidth, iHeight, bWithAudio);
  }

/**
 * @brief MTC session start recoding incoming video and two-way audio.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] pcFileName Name of the file which to store the recording data.
 * @param [in] ucFileType File type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW.
 * @param [in] iWidth Video width in pixel of recoding data.
 * @param [in] iHeight Video height in pixel of recoding data.
 * @param [in] bWithAudio true to recording audio data.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRecRecvVideoStop
 */
  public static int Mtc_SessRecRecvVideoStartX(int iSessId, String pcFileName, short ucFileType, int iWidth, int iHeight, boolean bWithAudio) {
    return MtcCallJNI.Mtc_SessRecRecvVideoStartX(iSessId, pcFileName, ucFileType, iWidth, iHeight, bWithAudio);
  }

/**
 * @brief MTC session stop recoding incoming video.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRecRecvVideoStart
 */
  public static int Mtc_SessRecRecvVideoStop(int iSessId) {
    return MtcCallJNI.Mtc_SessRecRecvVideoStop(iSessId);
  }

/**
 * @brief MTC session start recoding sending video.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] pcFileName Name of the file which to store the recording data.
 * @param [in] ucFileType File type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW.
 * @param [in] iWidth Video width in pixel of recoding data.
 * @param [in] iHeight Video height in pixel of recoding data.
 * @param [in] bWithAudio true to recording audio data.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRecSendVideoStop
 */
  public static int Mtc_SessRecSendVideoStart(int iSessId, String pcFileName, short ucFileType, int iWidth, int iHeight, boolean bWithAudio) {
    return MtcCallJNI.Mtc_SessRecSendVideoStart(iSessId, pcFileName, ucFileType, iWidth, iHeight, bWithAudio);
  }

/**
 * @brief MTC session stop recoding sending video.
 *
 * @param [in] iSessId The ID of session.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCall::Mtc_SessRecSendVideoStart
 */
  public static int Mtc_SessRecSendVideoStop(int iSessId) {
    return MtcCallJNI.Mtc_SessRecSendVideoStop(iSessId);
  }

/**
 * @brief Take a snapshot of display render.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] pcFileName Name of the file which to store the picture.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCall::Mtc_SessCaptureSnapshot
 */
  public static int Mtc_SessRenderSnapshot(int iSessId, String pcFileName) {
    return MtcCallJNI.Mtc_SessRenderSnapshot(iSessId, pcFileName);
  }

/**
 * @brief Take a snapshot of capture.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] pcFileName Name of the file which to store the picture.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCall::Mtc_SessRenderSnapshot
 */
  public static int Mtc_SessCaptureSnapshot(int iSessId, String pcFileName) {
    return MtcCallJNI.Mtc_SessCaptureSnapshot(iSessId, pcFileName);
  }

/**
 * @brief MTC session play file as camera.
 *
 * @param [in] pcFileName Video file name.
 * @param [in] iAudioStrmId Audio stream id, @see MtcCall::Mtc_SessGetStrmId.
 * @param [in] iCycle 0 to play once, otherwise to loop play .
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcCall::Mtc_SessFilePlayStop
 */
  public static int Mtc_SessFilePlayAsCamera(String pcFileName, int iAudioStrmId, int iCycle) {
    return MtcCallJNI.Mtc_SessFilePlayAsCamera(pcFileName, iAudioStrmId, iCycle);
  }

/**
 * @brief MTC session stop play file.
 *
 * @param [in] pcFileName Video file name.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcCall::Mtc_SessFilePlayAsCamera
 */
  public static int Mtc_SessFilePlayStop(String pcFileName) {
    return MtcCallJNI.Mtc_SessFilePlayStop(pcFileName);
  }

/**
 * @brief Get stream ID of the call session.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] ucStrmType The stream type of session, @ref EN_MTC_SESS_MEDIA_TYPE.
 *
 * @return The stream id of the call session on succeed, otherwise return ZMAXUINT.
 *
 */
  public static int Mtc_SessGetStrmId(int iSessId, short ucStrmType) {
    return MtcCallJNI.Mtc_SessGetStrmId(iSessId, ucStrmType);
  }

/**
 * @brief MTC session set record video quality; 
 *        Need to be called before Start record.
 *
 * @param [in] iFps Record video framerate.
 * @param [in] ucQuality Record video quality, @ref MtcMediaConstants::EN_MTC_REC_QUALITY_LOW.
 * @param [in] ucFileType File type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessRecSetQuality(int iFps, short ucQuality, short ucFileType) {
    return MtcCallJNI.Mtc_SessRecSetQuality(iFps, ucQuality, ucFileType);
  }

/**
 * @brief MTC session get terminate reason description.
 *
 * @param [in] iStatCode The status code.
 *
 * @return The status code description successfully, otherwise return "UNKNOWN".
 */
  public static String Mtc_SessGetStatDesc(int iStatCode) {
    return MtcCallJNI.Mtc_SessGetStatDesc(iStatCode);
  }

/** 
 * @brief MTC session get history info size.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return The history info size.
 */
  public static int Mtc_SessGetHisInfoSize(int iSessId) {
    return MtcCallJNI.Mtc_SessGetHisInfoSize(iSessId);
  }

/** 
 * @brief MTC session get history info diverting uri.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] iIndex The index of history info.
 * @param [out] ppcName The display name.
 * @param [out] ppcUri The diverting uri.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessGetHisInfoDivUri(int iSessId, int iIndex, MtcString ppcName, MtcString ppcUri) {
    return MtcCallJNI.Mtc_SessGetHisInfoDivUri(iSessId, iIndex, ppcName, ppcUri);
  }

/** 
 * @brief MTC session get history info diverting uri gruu.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] iIndex The index of history info.
 *
 * @return The history info diverting uri gruu.
 */
  public static String Mtc_SessGetHisInfoGruu(int iSessId, int iIndex) {
    return MtcCallJNI.Mtc_SessGetHisInfoGruu(iSessId, iIndex);
  }

/** 
 * @brief MTC session get history info index string.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] iIndex The index of history info.
 *
 * @return The history info index string.
 */
  public static String Mtc_SessGetHisInfoIndex(int iSessId, int iIndex) {
    return MtcCallJNI.Mtc_SessGetHisInfoIndex(iSessId, iIndex);
  }

/** 
 * @brief MTC session get history info cause.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] iIndex The index of history info.
 *
 * @return The history info cause.
 */
  public static int Mtc_SessGetHisInfoCause(int iSessId, int iIndex) {
    return MtcCallJNI.Mtc_SessGetHisInfoCause(iSessId, iIndex);
  }

/** 
 * @brief MTC session receive rtp data .
 *
 * @param [in] iStrmId The ID of stream.
 * @param [in] bVideo The video or audio flag, true for video, false for audio.
 * @param [in] pData The rtp data packet.
 * @param [in] iDataSize The rtp data length.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessRecvRtpData(int iStrmId, boolean bVideo, byte[] pData) {
    return MtcCallJNI.Mtc_SessRecvRtpData(iStrmId, bVideo, pData);
  }

/** 
 * @brief MTC session send rtp data .
 *
 * @param [in] iTptId The ID of transport id.
 * @param [in] pcRmtAddr The remote address.
 * @param [in] pData The rtp data packet.
 * @param [in] iDataSize The rtp data length.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 */
  public static int Mtc_SessSendRtpData(int iTptId, String pcRmtAddr, byte[] pData) {
    return MtcCallJNI.Mtc_SessSendRtpData(iTptId, pcRmtAddr, pData);
  }

/** 
 * @brief MTC session get replaces info string.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return The replaces info string of the curretn call session, 
 *      which includes call dialog infos (call-id, from-tag, to-tag).
 */
  public static String Mtc_SessGetReplaceInfo(int iSessId) {
    return MtcCallJNI.Mtc_SessGetReplaceInfo(iSessId);
  }

/**
 * @brief MTC session get Gain dBOV of receiving-side AGC(Automatic Gain Control).
 *
 * @param [in] iSessId The ID of session.
 * @param [out] *pwGainDb Return the Gain dBOV of receiving-side AGC.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcCall::Mtc_SessSetRxAgcGain
 */
  public static int Mtc_SessGetRxAgcGain(int iSessId, MtcNumber pwGainDb) {
    return MtcCallJNI.Mtc_SessGetRxAgcGain(iSessId, pwGainDb);
  }

/**
 * @brief MTC session set the Gain dBOV of receiving-side AGC(Automatic Gain Control).
 *
 * @param [in] iSessId The ID of session.
 * @param [in] wGainDb The Gain dBOV of receiving-side AGC.
 *                     Range from 0-90, Recommend 0-32.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcCall::Mtc_SessGetRxAgcGain
 */
  public static int Mtc_SessSetRxAgcGain(int iSessId, int wGainDb) {
    return MtcCallJNI.Mtc_SessSetRxAgcGain(iSessId, wGainDb);
  }

/**
 * @brief MTC session et the gain dBOV of AGC(Automatic Gain Control).
 *
 * @param [out] *pwGainDb Return the Gain dBOV of AGC.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcCall::Mtc_SessSetAgcGain
 */
  public static int Mtc_SessGetAgcGain(MtcNumber pwGainDb) {
    return MtcCallJNI.Mtc_SessGetAgcGain(pwGainDb);
  }

/**
 * @brief MTC session set the gain dBOV of AGC(Automatic Gain Control).
 *
 * @param [in] wGainDb The Gain dBOV of AGC;
 *                     Range from 0-90, Recommend 0-32.
 *                     Default 9
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcCall::Mtc_SessGetAgcGain
 */
  public static int Mtc_SessSetAgcGain(int wGainDb) {
    return MtcCallJNI.Mtc_SessSetAgcGain(wGainDb);
  }

/**
 * @brief  MTC session get current microphone mic level(0-100).
 *
 * @return microphone mic level.
 *
 * @see
 */
  public static int Mtc_SessGetMicLv() {
    return MtcCallJNI.Mtc_SessGetMicLv();
  }

/**
 * @brief MTC session get  speaker(playout) speech level(0-100).
 *
 * @param [in] iSessId The ID of session.
 *
 * @return speaker speech level.
 *
 * @see
 */
  public static int Mtc_SessGetSpkLv(int iSessId) {
    return MtcCallJNI.Mtc_SessGetSpkLv(iSessId);
  }

/**
 * @brief MTC session get X-ZTE-Cause string.
 *
 * @param [in] iSessId The ID of session.
 *
 * @return X-ZTE-Cause string.
 *
 * @see
 */
  public static String Mtc_SessGetZTECause(int iSessId) {
    return MtcCallJNI.Mtc_SessGetZTECause(iSessId);
  }

/**
 * @brief MTC session get media server ip address string.
 * 
 * @param [in] iSessId The ID of session.
 *
 * @return Media server ip address string, like "192.168.0.1".
 *
 */
  public static String Mtc_SessGetMediaServerIpAddr(int iSessId) {
    return MtcCallJNI.Mtc_SessGetMediaServerIpAddr(iSessId);
  }

/** 
 * @brief MTC session send subscription.
 *
 * @param [in] pcUri The destination URI to which you want to send subscription.
 * @param [in] pcBody The body string of Subscribe.
 *
 * @return The id of this subscription, otherwise return ZMAXUINT.
 *
 * @see @ref MtcCall::Mtc_SessUnSubs
 *
 */
  public static int Mtc_SessSubs(String pcUri, String pcBody) {
    return MtcCallJNI.Mtc_SessSubs(pcUri, pcBody);
  }

/** 
 * @brief MTC session un-subscribe.
 *
 * @param [in] iSubsId The ID of subscription which you want to send un subscribe.
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see @ref MtcCall::Mtc_SessSubs
 */
  public static int Mtc_SessUnSubs(int iSubsId) {
    return MtcCallJNI.Mtc_SessUnSubs(iSubsId);
  }

/** 
 * @brief MTC session get media stream direction.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bVideo The video stream flag.
 *
 * @retval the media stream direction, @ref MtcCallDbConstants::EN_MTC_DB_STRM_DIR_NONE.
 *
 */
  public static short Mtc_SessGetStrmDirect(int iSessId, boolean bVideo) {
    return MtcCallJNI.Mtc_SessGetStrmDirect(iSessId, bVideo);
  }

/**
 * @brief MTC session enable/disable dynamic reset encoder to change video image aspect.
 *            The function should be called before @ref MtcCall::Mtc_SessCameraAttach.
 *
 * @param [in] iSessId The ID of session.
 * @param [in] bEnable true to enable dynamic reset encoder, false to disable it
 * @param [in] fFixedAspect,
 *             if < 0 the outgoing video image will be adaptive the capture (camera, always 4:3) aspect, 
 *             if =0 it will use codec  settings(always 16:9, to be adaptive with the devices), 
 *             if >0 will be with the setting fixed aspect(like 1.33, 1.77).
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 */
  public static int Mtc_SessEnableAdaptiveAspect(int iSessId, boolean bEnable, float fFixedAspect) {
    return MtcCallJNI.Mtc_SessEnableAdaptiveAspect(iSessId, bEnable, fFixedAspect);
  }

/*
 * @brief Set MVD engine start record capturing video.
 *
 * @param [in] pcCaptureId capture device Id
 * @param [in] pcFileName Video file name.
 * @param [in] ucFileType Video file type, @ref MtcMediaConstants::EN_MTC_MFILE_UNKNOW.
 * @param [in] iWidth Video width.
 * @param [in] iHeight Video height.
 * @param [in] ucAudioSource Audio Source, @ref MtcMediaConstants::EN_MTC_AUDIO_SOURCE_NO
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcCall::Mtc_SessRecCaptStop
 */
  public static int Mtc_SessFileRecCaptStart(String pcCaptureId, String pcFileName, short ucFileType, int iWidth, int iHeight, short ucAudioSource) {
    return MtcCallJNI.Mtc_SessFileRecCaptStart(pcCaptureId, pcFileName, ucFileType, iWidth, iHeight, ucAudioSource);
  }

/**
 * @brief Set MVD engine stop record capturing video.
 *
 * @param [in] pcCaptureId capture device Id
 *
 * @retval MtcCommonConstants::ZOK on succeed.
 * @retval MtcCommonConstants::ZFAILED on failure.
 *
 * @see MtcCall::Mtc_SessFileRecCaptStart
 */
  public static int Mtc_SessRecCaptStop(String pcCaptureId) {
    return MtcCallJNI.Mtc_SessRecCaptStop(pcCaptureId);
  }

}
