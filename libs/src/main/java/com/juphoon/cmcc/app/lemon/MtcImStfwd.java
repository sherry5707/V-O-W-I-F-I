/**
 * @file MtcImStfwd.java
 * @brief MtcImStfwd interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcImStfwd interface
 */
public class MtcImStfwd implements MtcImStfwdConstants {
/**
 * @brief Accept a store and forward session invitation.
 *
 * @param [in] iSessId The session id.
 *
 * @retval MtcCommonConstants::ZOK Accept store and forward session successfully.
 * @retval MtcCommonConstants::ZFAILED Accept store and forward session failed.
 */
  public static int Mtc_ImStFwdAccept(int iSessId) {
    return MtcImStfwdJNI.Mtc_ImStFwdAccept(iSessId);
  }

/**
 * @brief Reject a store and forward session invitation.
 *
 * @param [in] iSessId The session id.
 *
 * @retval MtcCommonConstants::ZOK Reject store and forward session successfully.
 * @retval MtcCommonConstants::ZFAILED Reject store and forward session failed.
 */
  public static int Mtc_ImStFwdReject(int iSessId) {
    return MtcImStfwdJNI.Mtc_ImStFwdReject(iSessId);
  }

/**
 * @brief Get user subject from store and forward session.
 *
 * @param [in] iSessId The session id.
 *
 * @return User subject.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImStFwdGetSubject(int iSessId) {
    return MtcImStfwdJNI.Mtc_ImStFwdGetSubject(iSessId);
  }

/**
 * @brief MTC Get participant type from store and forward session.
 *
 * @param [in] iSessId The session id.
 *
 * @return Type of IM store and forward session participant, see @ref MtcPartpConstants::EN_MTC_PARTP_LST_ONE.
 *
 * If type is @ref EN_MTC_PARTP_LST_ONE, participant can be got by @ref MtcImStfwd::Mtc_ImStFwdGetPartp.
 * If type is @ref EN_MTC_PARTP_LST_PREDEF_GRP, participant can be got by @ref MtcImStfwd::Mtc_ImStFwdGetPartp.
 * If type is @ref EN_MTC_PARTP_LST_URI_LST, participant can be got by @ref MtcImStfwd::Mtc_ImStFwdGetPartpLstId.
 */
  public static int Mtc_ImStFwdGetPartpType(int iSessId) {
    return MtcImStfwdJNI.Mtc_ImStFwdGetPartpType(iSessId);
  }

/**
 * @brief MTC Get participant information from store and forward session.
 *
 * The participant is the remote client who is joining session.
 *
 * @param [in] iSessId The session id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get participant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get participant information failed.
 */
  public static int Mtc_ImStFwdGetPartp(int iSessId, MtcString ppcName, MtcString ppcUri) {
    return MtcImStfwdJNI.Mtc_ImStFwdGetPartp(iSessId, ppcName, ppcUri);
  }

/**
 * @brief Get participant list id from store and forward session.
 *
 * The participant list id is all remote clients who are joining session.
 *
 * @param [in] iSessId The session id.
 *
 * @return The participant list id on succeed or 0 on failed.
 *
 *  The caller is responsible for freeing it by @ref MtcPartp::Mtc_PartpLstDelete.
 */
  public static int Mtc_ImStFwdGetPartpLstId(int iSessId) {
    return MtcImStfwdJNI.Mtc_ImStFwdGetPartpLstId(iSessId);
  }

/**
 * @brief Get original participant URI from store and forward session.
 *
 * The participant is the session initiator who initialized this store and forward session.
 * It will return From uri from session invitation information.
 *
 * @param [in] iSessId The session id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImStFwdGetOrigPartp(int iSessId, MtcString ppcName, MtcString ppcUri) {
    return MtcImStfwdJNI.Mtc_ImStFwdGetOrigPartp(iSessId, ppcName, ppcUri);
  }

/**
 * @brief Get original identity of participant URI from store and forward session.
 *
 * The participant is the session initiator who initialized this store and forward session.
 * It will return identity uri if session invitation has P-Asserted-Identity information.
 *
 * @param [in] iSessId The session id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImStFwdGetOrigIdPartp(int iSessId, MtcString ppcName, MtcString ppcUri) {
    return MtcImStfwdJNI.Mtc_ImStFwdGetOrigIdPartp(iSessId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get date time from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in,out] pstTime The date time value. 
 *
 * @retval MtcCommonConstants::ZOK Get date time successfully.
 * @retval MtcCommonConstants::ZFAILED Get date time failed.
 */
  public static int Mtc_ImStFwdGetSysDateTime(int iSessId, SWIGTYPE_p_ST_MTC_SYS_TIME pstTime) {
    return MtcImStfwdJNI.Mtc_ImStFwdGetSysDateTime(iSessId, SWIGTYPE_p_ST_MTC_SYS_TIME.getCPtr(pstTime));
  }

/**
 * @brief MTC Get date time from store and forward session.
 *
 * @param [in] iSessId The session id.
 *
 * @return message session date time, otherwise return 0.
 */
  public static int Mtc_ImStFwdGetDateTime(int iSessId) {
    return MtcImStfwdJNI.Mtc_ImStFwdGetDateTime(iSessId);
  }

/**
 * @brief MTC Get message Imdn type from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return Type of imdn, see @ref MtcImStfwdConstants::EN_MTC_IM_STFWD_IMDN_UNKNOWN.
 */
  public static int Mtc_ImStFwdMsgGetImdnType(int iSessId, int iMsgId) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetImdnType(iSessId, iMsgId);
  }

/**
 * @brief MTC Get imdn message-id from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The imdn message-id.
 *   The caller must copy it, then use.
 */
  public static String Mtc_ImStFwdMsgGetImdnMsgId(int iSessId, int iMsgId) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetImdnMsgId(iSessId, iMsgId);
  }

/**
 * @brief MTC Get device id from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The device id.
 *   The caller must copy it, then use.
 */
  public static String Mtc_ImStFwdMsgGetDeviceId(int iSessId, int iMsgId) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetDeviceId(iSessId, iMsgId);
  }

/**
 * @brief MTC Get message content type from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return Type of IM message, see @ref MtcImStfwdConstants::EN_MTC_IM_STFWD_CONT_UNKNOWN.
 */
  public static int Mtc_ImStFwdMsgGetContentType(int iSessId, int iMsgId) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetContentType(iSessId, iMsgId);
  }

/**
 * @brief MTC Get message content length from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The message content length.
 */
  public static int Mtc_ImStFwdMsgGetContentLen(int iSessId, int iMsgId) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetContentLen(iSessId, iMsgId);
  }

/**
 * @brief MTC Get message content from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The message content.
 *   The caller must copy it, then use.
 */
  public static String Mtc_ImStFwdMsgGetContent(int iSessId, int iMsgId) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetContent(iSessId, iMsgId);
  }

/**
 * @brief MTC Get multi-media message content from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 * @param [out] ppData The multi-media message content.
 * @param [out] piDataSize The multi-media message content length.
 *
 * @retval MtcCommonConstants::ZOK Get message content successfully.
 * @retval MtcCommonConstants::ZFAILED Get message content failed.
 *   The caller must copy it, then use.
 */
  public static int Mtc_ImStFwdMsgGetMContent(int iSessId, int iMsgId, MtcByteArray ppData) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetMContent(iSessId, iMsgId, ppData);
  }

/**
 * @brief MTC Get participant information from store and forward session.
 *
 * The participant is the remote client who has sent message.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get participant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get participant information failed.
 */
  public static int Mtc_ImStFwdMsgGetPartp(int iSessId, int iMsgId, MtcString ppcName, MtcString ppcUri) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetPartp(iSessId, iMsgId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get message date time from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 * @param [in,out] pstTime The date time value. 
 *
 * @retval MtcCommonConstants::ZOK Get date time successfully.
 * @retval MtcCommonConstants::ZFAILED Get date time failed.
 */
  public static int Mtc_ImStFwdMsgGetSysDateTime(int iSessId, int iMsgId, SWIGTYPE_p_ST_MTC_SYS_TIME pstTime) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetSysDateTime(iSessId, iMsgId, SWIGTYPE_p_ST_MTC_SYS_TIME.getCPtr(pstTime));
  }

/**
 * @brief MTC Get message date time from store and forward session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return message date time, otherwise return 0.
 */
  public static int Mtc_ImStFwdMsgGetDateTime(int iSessId, int iMsgId) {
    return MtcImStfwdJNI.Mtc_ImStFwdMsgGetDateTime(iSessId, iMsgId);
  }

}
