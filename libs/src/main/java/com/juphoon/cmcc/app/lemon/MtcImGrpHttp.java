/**
 * @file MtcImGrpHttp.java
 * @brief MtcImGrpHttp interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcImGrpHttp interface
 */
public class MtcImGrpHttp implements MtcImGrpHttpConstants {
/**
 * @brief MTC Create group chat via http.
 *
 * If IM create a group successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpCreateOk.
 *
 * If IM create a group failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpCreateFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUserUri The controled user URI.
 * @param [in] pcSubject The subject of group.
 * @param [in] pcToken The auth token.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcSourceData The Source type data. 
 *
 * @return The group manage via http id, send create group invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImGrpHttpGrpCreate(Object zCookie, String pcUserUri, String pcSubject, String pcBulletin, String pcToken, int iPartpLstId, String pcSourceData) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGrpCreate(zCookie, pcUserUri, pcSubject, pcBulletin, pcToken, iPartpLstId, pcSourceData);
  }

/**
 * @brief MTC Delete group chat via http.
 *
 * If IM delete a group successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpDeleteOk.
 *
 * If IM delete a group failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpDeleteFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcGrpUri The group URI.
 * @param [in] pcUserUri The controled user URI. 
 * @param [in] pcToken The auth token.
 * @param [in] pcSourceData The Source type data. 
 *
 * @return The group manage via http id, send delete group invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImGrpHttpGrpDelete(Object zCookie, String pcGrpUri, String pcUserUri, String pcToken, String pcSourceData) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGrpDelete(zCookie, pcGrpUri, pcUserUri, pcToken, pcSourceData);
  }

/**
 * @brief MTC Subs group list via http.
 *
 * If IM subs group list successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpSubsLstOk.
 *
 * If IM subs group list failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpSubsLstFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUserUri The controled user URI. 
 * @param [in] pcToken The auth token.
 * @param [in] iGrpLstVer The group list veriosn, default 0.
 * @param [in] iGrpType The group type, @ref MtcImGrpHttpConstants::EN_MTC_IM_GRPHTTP_GRP_TYPE_ALL.
 * @param [in] pcSourceData The Source type data. 
 *
 * @return The group manage via http id, send subs group list invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImGrpHttpSubsGrpLst(Object zCookie, String pcUserUri, String pcToken, int iGrpLstVer, int iGrpType, String pcSourceData) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpSubsGrpLst(zCookie, pcUserUri, pcToken, iGrpLstVer, iGrpType, pcSourceData);
  }

/**
 * @brief MTC Subs group information via http.
 *
 * If IM subs group information successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpSubsInfoOk.
 *
 * If IM subs group information failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpSubsInfoFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcGrpUri The group URI.
 * @param [in] pcUserUri The controled user URI. 
 * @param [in] pcToken The auth token.
 * @param [in] iGrpVer The group version.
 * @param [in] pcSourceData The Source type data. 
 *
 * @return The group manage via http id, send subs group information invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImGrpHttpSubsGrpInfo(Object zCookie, String pcGrpUri, String pcUserUri, String pcToken, int iGrpVer, String pcSourceData) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpSubsGrpInfo(zCookie, pcGrpUri, pcUserUri, pcToken, iGrpVer, pcSourceData);
  }

/**
 * @brief MTC Modify subject via http.
 *
 * If IM modify subject successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpMdfySubjectOk.
 *
 * If IM modify subject failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpMdfySubjectFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcGrpUri The group URI.
 * @param [in] pcUserUri The controled user URI. 
 * @param [in] pcNewSubject The new subject of group.
 * @param [in] pcToken The auth token.
 * @param [in] pcSourceData The Source type data. 
 *
 * @return The group manage via http id, send modify subject invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImGrpHttpMdfySubject(Object zCookie, String pcGrpUri, String pcUserUri, String pcNewSubject, String pcToken, String pcSourceData) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpMdfySubject(zCookie, pcGrpUri, pcUserUri, pcNewSubject, pcToken, pcSourceData);
  }

/**
 * @brief MTC Modify displayname via http.
 *
 * If IM modify displayname successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpMdfyDispNameOk.
 *
 * If IM modify displayname failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpMdfyDispNameFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcGrpUri The group URI.
 * @param [in] pcUserUri The controled user URI.
 * @param [in] pcNewDispName The new displayname of ursr. 
 * @param [in] pcToken The auth token.
 * @param [in] pcSourceData The Source type data. 
 *
 * @return The group manage via http id, send modify displayname invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImGrpHttpMdfyDispName(Object zCookie, String pcGrpUri, String pcUserUri, String pcNewDispName, String pcToken, String pcSourceData) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpMdfyDispName(zCookie, pcGrpUri, pcUserUri, pcNewDispName, pcToken, pcSourceData);
  }

/**
 * @brief MTC Modify chairman via http.
 *
 * If IM modify chairman successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpMdfyChairManOk.
 *
 * If IM modify chairman failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpMdfyChairManFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcGrpUri The group URI.
 * @param [in] pcUserUri The controled user URI.
 * @param [in] pcNewChairManUri The new chairman URI. 
 * @param [in] pcToken The auth token.
 * @param [in] pcSourceData The Source type data. 
 *
 * @return The group manage via http id, send modify chairman invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImGrpHttpMdfyChairMan(Object zCookie, String pcGrpUri, String pcUserUri, String pcNewChairManUri, String pcToken, String pcSourceData) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpMdfyChairMan(zCookie, pcGrpUri, pcUserUri, pcNewChairManUri, pcToken, pcSourceData);
  }

/**
 * @brief MTC Add partp via http.
 *
 * If IM add partp successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpAddPartpOk.
 *
 * If IM add partp failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpAddPartpFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcGrpUri The group URI.
 * @param [in] pcUserUri The controled user URI.
 * @param [in] pcToken The auth token.
 * @param [in] iPartpLstId The participant list id. 
 * @param [in] pcSourceData The Source type data. 
 *
 * @return The group manage via http id, send add partp invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImGrpHttpAddPartp(Object zCookie, String pcGrpUri, String pcUserUri, String pcToken, int iPartpLstId, String pcSourceData) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpAddPartp(zCookie, pcGrpUri, pcUserUri, pcToken, iPartpLstId, pcSourceData);
  }

/**
 * @brief MTC Epl partp via http.
 *
 * If IM epl partp successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpEplPartpOk.
 *
 * If IM epl partp failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbGrpHttpEplPartpFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcGrpUri The group URI.
 * @param [in] pcUserUri The controled user URI.
 * @param [in] pcToken The auth token.
 * @param [in] pcPartpUri The partp uri to epl.
 * @param [in] pcSourceData The Source type data.
 *
 * @return The group manage via http id, send epl partp invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImGrpHttpEplPartp(Object zCookie, String pcGrpUri, String pcUserUri, String pcToken, String pcPartpUri, String pcSourceData) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpEplPartp(zCookie, pcGrpUri, pcUserUri, pcToken, pcPartpUri, pcSourceData);
  }

/**
 * @brief MTC Cancel a group manage via http.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 * @param [in] zCookie The user cookie.
 *
 * @retval MtcCommonConstants::ZOK Cancel group manage via http successfully.
 * @retval MtcCommonConstants::ZFAILED Cancel group manage via http failed.
 */
  public static int Mtc_ImGrpHttpCancel(Object zCookie, int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpCancel(zCookie, iGrpHttpId);
  }

/**
 * @brief MTC Http group list get group list version.
 *
 * @param [in] iGrpHttpId The group manage via http id. 
 *
 * @return group list version.
 */
  public static int Mtc_ImGrpHttpLstGetGrpLstVer(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpLstGetGrpLstVer(iGrpHttpId);
  }

/**
 * @brief MTC Http group list group size of list.
 *
 * @param [in] iGrpHttpId The group manage via http id. 
 *
 * @return group size of list.
 */
  public static int Mtc_ImGrpHttpLstGetGrpSize(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpLstGetGrpSize(iGrpHttpId);
  }

/**
 * @brief MTC Http group list get group id by index.
 *
 * @param [in] iGrpHttpId The group manage via http id. 
 * @param [in] iIndex The group index.
 *
 * @return group id successfully or ZMAXUINT failed.
 */
  public static int Mtc_ImGrpHttpLstGetGrpId(int iGrpHttpId, int iIndex) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpLstGetGrpId(iGrpHttpId, iIndex);
  }

/**
 * @brief MTC Http group list get group URI.
 *
 * @param [in] iGrpId The group id.
 *
 * @return group URI.
 */
  public static String Mtc_ImGrpHttpLstGetGrpUri(int iGrpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpLstGetGrpUri(iGrpId);
  }

/**
 * @brief MTC Http group list get conversation id.
 *
 * @param [in] iGrpId The group id.
 *
 * @return conversation id.
 */
  public static String Mtc_ImGrpHttpLstGetGrpConvId(int iGrpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpLstGetGrpConvId(iGrpId);
  }

/**
 * @brief MTC Http group list get subject.
 *
 * @param [in] iGrpId The group id.
 *
 * @return subject.
 */
  public static String Mtc_ImGrpHttpLstGetGrpSubject(int iGrpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpLstGetGrpSubject(iGrpId);
  }

/**
 * @brief MTC Http group list get group type.
 *
 * @param [in] iGrpId The group id.
 *
 * @return group type @ref MtcImGrpHttpConstants::EN_MTC_IM_GRPHTTP_GRP_TYPE_ALL.
 */
  public static int Mtc_ImGrpHttpLstGetGrpType(int iGrpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpLstGetGrpType(iGrpId);
  }

/**
 * @brief Get user cookie from grphttp.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return User cookie.
 */
  public static Object Mtc_ImGrpHttpGetCookie(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetCookie(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get group version.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return group version.
 */
  public static int Mtc_ImGrpHttpGetGrpVersion(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetGrpVersion(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get subject.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return subject.
 */
  public static String Mtc_ImGrpHttpGetSubject(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetSubject(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get group URI.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return group URI.
 */
  public static String Mtc_ImGrpHttpGetGrpUri(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetGrpUri(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get max user count.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return max user count.
 */
  public static int Mtc_ImGrpHttpGetMaxUsrCnt(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetMaxUsrCnt(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get bulletin.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return bulletin.
 */
  public static String Mtc_ImGrpHttpGetBulletin(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetBulletin(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get validtype.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return validtype @ref MtcImGrpHttpConstants::EN_MTC_GRPHTTP_VALID_ALL.
 */
  public static int Mtc_ImGrpHttpGetValidType(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetValidType(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get display name.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return display name.
 */
  public static String Mtc_ImGrpHttpGetDispname(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetDispname(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get participant list id.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return participant list id.
 */
  public static int Mtc_ImGrpHttpGetPartpLstId(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetPartpLstId(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get creator URI.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return creator URI.
 */
  public static String Mtc_ImGrpHttpGetCreatorUri(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetCreatorUri(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get identifier.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return identifier.
 */
  public static String Mtc_ImGrpHttpGetIdentifier(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetIdentifier(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get Timestamp(ms).
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return Timestamp.
 */
  public static int Mtc_ImGrpHttpGetTimestamp(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetTimestamp(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get need permit.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return need permit.
 */
  public static boolean Mtc_ImGrpHttpGetNeedPermit(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetNeedPermit(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get group type.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return group type @ref MtcImGrpHttpConstants::EN_MTC_IM_GRPHTTP_GRP_TYPE_ALL.
 */
  public static int Mtc_ImGrpHttpGetGrpType(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetGrpType(iGrpHttpId);
  }

/**
 * @brief MTC Group manage get conversation Id.
 *
 * @param [in] iGrpHttpId The group manage via http id.
 *
 * @return conversation Id.
 */
  public static String Mtc_ImGrpHttpGetConvId(int iGrpHttpId) {
    return MtcImGrpHttpJNI.Mtc_ImGrpHttpGetConvId(iGrpHttpId);
  }

}
