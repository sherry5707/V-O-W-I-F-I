/**
 * @file MtcImLarge.java
 * @brief MtcImLarge interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcImLarge interface
 */
public class MtcImLarge implements MtcImLargeConstants {
/**
 * @brief MTC Sending Large Instant Message to One Participant.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * While receiving IM(large message), GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgRecvMsg.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgSend(Object zCookie, String pcUri, String pcMsg, int iMsgType) {
    return MtcImLargeJNI.Mtc_ImLMsgSend(zCookie, pcUri, pcMsg, iMsgType);
  }

/**
 * @brief MTC ReSending Large Instant Message to One Participant
 * Only used to CMCC.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * While receiving IM(large message), GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgRecvMsg.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgReSend(Object zCookie, String pcUri, String pcMsg, int iMsgType, String pcReImdnId) {
    return MtcImLargeJNI.Mtc_ImLMsgReSend(zCookie, pcUri, pcMsg, iMsgType, pcReImdnId);
  }

/**
 * @brief MTC Sending Burn After Reading Large Instant Message to One Participant
 * Only used to CMCC.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * While receiving IM(large message), GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgRecvMsg.
 *
 * Gui can get the burn after reading flag when receiving IM(large message)
 * by @ref MtcImLarge::Mtc_ImLMsgHasBurnInd.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 *
 * @return The large message session id when send burn after reading large message
 *              successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgSendB(Object zCookie, String pcUri, String pcMsg, int iMsgType) {
    return MtcImLargeJNI.Mtc_ImLMsgSendB(zCookie, pcUri, pcMsg, iMsgType);
  }

/**
 * @brief MTC ReSending Burn After Reading Large Instant Message to One Participant
 * Only used to CMCC.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * While receiving IM(large message), GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgRecvMsg.
 *
 * Gui can get the burn after reading flag when receiving IM(large message)
 * by @ref MtcImLarge::Mtc_ImLMsgHasBurnInd.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The large message session id when send burn after reading large message
 *              successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgReSendB(Object zCookie, String pcUri, String pcMsg, int iMsgType, String pcReImdnId) {
    return MtcImLargeJNI.Mtc_ImLMsgReSendB(zCookie, pcUri, pcMsg, iMsgType, pcReImdnId);
  }

/**
 * @brief MTC Sending multi-media Message to One Participant.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * While receiving IM(large message), GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgRecvMsg.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pData The multi-media message body.
 * @param [in] iDataSize The multi-media message size.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgSendM(Object zCookie, String pcUri, byte[] pData, int iMsgType) {
    return MtcImLargeJNI.Mtc_ImLMsgSendM(zCookie, pcUri, pData, iMsgType);
  }

/**
 * @brief MTC ReSending multi-media Message to One Participant
 * Only used to CMCC.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * While receiving IM(large message), GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgRecvMsg.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pData The multi-media message body.
 * @param [in] iDataSize The multi-media message size.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgReSendM(Object zCookie, String pcUri, byte[] pData, int iMsgType, String pcReImdnId) {
    return MtcImLargeJNI.Mtc_ImLMsgReSendM(zCookie, pcUri, pData, iMsgType, pcReImdnId);
  }

/**
 * @brief MTC Reply to specific standalone large message.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * While receiving IM(large message), GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgRecvMsg.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcConvId The conversation-id.
 * @param [in] pcContId The contribution-id which reply to.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgReply(Object zCookie, String pcUri, String pcMsg, int iMsgType, String pcConvId, String pcContId) {
    return MtcImLargeJNI.Mtc_ImLMsgReply(zCookie, pcUri, pcMsg, iMsgType, pcConvId, pcContId);
  }

/**
 * @brief MTC Sending Large Instant Message to URI-List.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgSendU(Object zCookie, int iPartpLstId, String pcMsg, int iMsgType) {
    return MtcImLargeJNI.Mtc_ImLMsgSendU(zCookie, iPartpLstId, pcMsg, iMsgType);
  }

/**
 * @brief MTC ReSending Large Instant Message to URI-List
 * Only used to CMCC.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgReSendU(Object zCookie, int iPartpLstId, String pcMsg, int iMsgType, String pcReImdnId) {
    return MtcImLargeJNI.Mtc_ImLMsgReSendU(zCookie, iPartpLstId, pcMsg, iMsgType, pcReImdnId);
  }

/**
 * @brief MTC Sending Large Instant Message to one participant with spam information.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgLen The message size.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgSendS(Object zCookie, String pcMsg, int iMsgType, String pcFromUri, String pcToUri, long zDate) {
    return MtcImLargeJNI.Mtc_ImLMsgSendS(zCookie, pcMsg, iMsgType, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief MTC ReSending Large Instant Message to one participant with spam information
 * Only used to CMCC.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgLen The message size.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgReSendS(Object zCookie, String pcMsg, int iMsgType, String pcFromUri, String pcToUri, long zDate, String pcReImdnId) {
    return MtcImLargeJNI.Mtc_ImLMsgReSendS(zCookie, pcMsg, iMsgType, pcFromUri, pcToUri, zDate, pcReImdnId);
  }

/**
 * @brief MTC Sending Large Instant Message to one participant with spam information.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgLen The message size.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] iSpamType The spam information type.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgSendST(Object zCookie, String pcMsg, int iMsgType, String pcFromUri, String pcToUri, long zDate, int iSpamType) {
    return MtcImLargeJNI.Mtc_ImLMsgSendST(zCookie, pcMsg, iMsgType, pcFromUri, pcToUri, zDate, iSpamType);
  }

/**
 * @brief MTC ReSending Large Instant Message to one participant with spam information
 * Only used to CMCC.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgLen The message size.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] pcReImdnId The resend imdn message id.
 * @param [in] iSpamType The spam information type.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgReSendST(Object zCookie, String pcMsg, int iMsgType, String pcFromUri, String pcToUri, long zDate, String pcReImdnId, int iSpamType) {
    return MtcImLargeJNI.Mtc_ImLMsgReSendST(zCookie, pcMsg, iMsgType, pcFromUri, pcToUri, zDate, pcReImdnId, iSpamType);
  }

/**
 * @brief MTC Sending Large Instant Message to Public Account.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * While receiving IM(large message), GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgRecvMsg.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgSendP(Object zCookie, String pcUri, String pcMsg, int iMsgType) {
    return MtcImLargeJNI.Mtc_ImLMsgSendP(zCookie, pcUri, pcMsg, iMsgType);
  }

/**
 * @brief MTC ReSending Large Instant Message to Public Account
 * Only used to CMCC.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgSendFailed.
 *
 * While receiving IM(large message), GUI will be notified by callback which 
 * was set by @ref mtcImCbLMsgRecvMsg.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgReSendP(Object zCookie, String pcUri, String pcMsg, int iMsgType, String pcReImdnId) {
    return MtcImLargeJNI.Mtc_ImLMsgReSendP(zCookie, pcUri, pcMsg, iMsgType, pcReImdnId);
  }

/**
 * @brief Sending Large Instant Message with font information to One Participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see EN_MMF_LMSG_CONT_TYPE.
 * @param [in] pcFontInfo The font information of message.
 * @param [in] bBurn The message burn flag.
 * @param [out] piMsgId The id for large message session.
 *
  * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgSendF(Object zCookie, String pcUri, int iPartpLstId, String pcMsg, int iMsgType, String pcFontInfo, boolean bBurn) {
    return MtcImLargeJNI.Mtc_ImLMsgSendF(zCookie, pcUri, iPartpLstId, pcMsg, iMsgType, pcFontInfo, bBurn);
  }

/**
 * @brief ReSending Large Instant Message with font information to One Participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see EN_MMF_LMSG_CONT_TYPE.
 * @param [in] pcFontInfo The font information of message.
 * @param [in] bBurn The message burn flag.
 * @param [in] pcReImdnId The resend imdn message id.
 * @param [out] piMsgId The id for large message session.
 *
  * @return The large message session id when send large message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgReSendF(Object zCookie, String pcUri, int iPartpLstId, String pcMsg, int iMsgType, String pcFontInfo, boolean bBurn, String pcReImdnId) {
    return MtcImLargeJNI.Mtc_ImLMsgReSendF(zCookie, pcUri, iPartpLstId, pcMsg, iMsgType, pcFontInfo, bBurn, pcReImdnId);
  }

/**
 * @brief MTC Get user cookie from a large message.
 *
 * @param [in] iMsgId The large message id.
 *
 * @return User cookie.
 */
  public static Object Mtc_ImLMsgGetCookie(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetCookie(iMsgId);
  }

/**
 * @brief MTC Set user cookie in a large message.
 *
 * @param [in] iMsgId The large message id.
 * @param [in] zCookie The user cookie.
 *
 * @retval MtcCommonConstants::ZOK Set user cookie successfully.
 * @retval MtcCommonConstants::ZFAILED Set user cookie failed.
 */
  public static int Mtc_ImLMsgSetCookie(int iMsgId, Object zCookie) {
    return MtcImLargeJNI.Mtc_ImLMsgSetCookie(iMsgId, zCookie);
  }

/**
 * @brief MTC Get the Imdn type from large message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return Type of large message, see @ref EN_MTC_IM_LMSG_IMDN_TYPE.
 */
  public static int Mtc_ImLMsgGetImdnType(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetImdnType(iMsgId);
  }

/**
 * @brief MTC Get imdn message-id from large message.
 *
 * @param [in] iMsgId The large message id.
 *
 * @return The imdn message-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImLMsgGetImdnMsgId(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetImdnMsgId(iMsgId);
  }

/**
 * @brief MTC Get device id from large message.
 *
 * @param [in] iMsgId The large message id.
 *
 * @return The device id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImLMsgGetDeviceId(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetDeviceId(iMsgId);
  }

/**
 * @brief MTC Get content type from large message.
 *
 * @param [in] iMsgId The large message id.
 *
 * @return Content type, see @ref MtcImLargeConstants::EN_MTC_IM_LMSG_CONT_UNKNOWN....
 */
  public static int Mtc_ImLMsgGetContentType(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetContentType(iMsgId);
  }

/**
 * @brief MTC Get content from large message.
 *
 * @param [in] iMsgId The large message id.
 *
 * @return The message content.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImLMsgGetContent(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetContent(iMsgId);
  }

/**
 * @brief MTC Get multi-media content from large message.
 *
 * @param [in] iMsgId The large message id.
 * @param [out] ppData The multi-media message content.
 * @param [out] piDataSize The multi-media message content length.
 *
 * @return The message content.
 * The caller must copy it, then use.
 */
  public static int Mtc_ImLMsgGetMContent(int iMsgId, MtcByteArray ppData) {
    return MtcImLargeJNI.Mtc_ImLMsgGetMContent(iMsgId, ppData);
  }

/**
 * @brief MTC Get participant type from large message.
 *
 * @param [in] iMsgId The large message id.
 *
 * @return Type of large message participant, see @ref MtcPartpConstants::EN_MTC_PARTP_LST_ONE.
 *
 * If type is EN_MTC_PARTP_LST_ONE, participant can be got by @ref MtcImLarge::Mtc_ImLMsgGetPartp.
 * If type is EN_MTC_PARTP_LST_PREDEF_GRP, participant can be got by @ref MtcImLarge::Mtc_ImLMsgGetPartp.
 * If type is EN_MTC_PARTP_LST_URI_LST, participant can be got by @ref MtcImLarge::Mtc_ImLMsgGetPartpLst.
 */
  public static int Mtc_ImLMsgGetPartpType(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetPartpType(iMsgId);
  }

/**
 * @brief MTC Get participant information from large message.
 * Get receiver information from fetion carbon copy large message.
 *
 * The participant is the remote client who sent large message.
 *
 * @param [in] iMsgId The large message id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get participant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get participant information failed.
 */
  public static int Mtc_ImLMsgGetPartp(int iMsgId, MtcString ppcName, MtcString ppcUri) {
    return MtcImLargeJNI.Mtc_ImLMsgGetPartp(iMsgId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get participant list id from large message.
 *
 * The participant list id is all remote clients who sent large message.
 *
 * @param [in] iMsgId The large message id.
 *
 * @return Participant list id.
 *   The caller is responsible for freeing it by @ref MtcPartp::Mtc_PartpLstDelete.
 */
  public static int Mtc_ImLMsgGetPartpLst(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetPartpLst(iMsgId);
  }

/**
 * @brief MTC Get original participant from large message.
 *
 * The participant is the session initiator who initialized this large message.
 * It will return local URI if local client is the large message initiator.
 * It will return From uri from large message invitation information.
 *
 * @param [in] iMsgId The large message id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImLMsgGetOrigPartp(int iMsgId, MtcString ppcName, MtcString ppcUri) {
    return MtcImLargeJNI.Mtc_ImLMsgGetOrigPartp(iMsgId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get original identity of participant from large message.
 *
 * The participant is the session initiator who initialized large message session.
 * It will return local URI if local client is the session initiator.
 * It will return identity uri if session invitation has P-Asserted-Identity information.
 *
 * @param [in] iMsgId The large message id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImLMsgGetOrigIdPartp(int iMsgId, MtcString ppcName, MtcString ppcUri) {
    return MtcImLargeJNI.Mtc_ImLMsgGetOrigIdPartp(iMsgId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get date time from large message.
 *
 * @param [in] iMsgId The message Id.
 * @param [in,out] pstTime The date time value. 
 *
 * @retval MtcCommonConstants::ZOK Get date time successfully.
 * @retval MtcCommonConstants::ZFAILED Get date time failed.
 */
  public static int Mtc_ImLMsgGetSysDateTime(int iMsgId, SWIGTYPE_p_ST_MTC_SYS_TIME pstTime) {
    return MtcImLargeJNI.Mtc_ImLMsgGetSysDateTime(iMsgId, SWIGTYPE_p_ST_MTC_SYS_TIME.getCPtr(pstTime));
  }

/**
 * @brief MTC Get date time from large message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return large message date time(milliseconds), otherwise return 0.
 */
  public static long Mtc_ImLMsgGetDateTime(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetDateTime(iMsgId);
  }

/**
 * @brief MTC Get the font information from large message.
 *
 * @param [in] iMsgId The large message id.
 *
 * @retval Font information of message, otherwise NULL.
 */
  public static String Mtc_ImLMsgGetFontInfo(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetFontInfo(iMsgId);
  }

/**
 * @brief MTC Get conversation-id from large message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The conversation-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImLMsgGetConvId(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetConvId(iMsgId);
  }

/**
 * @brief MTC Get contribution-id from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The contribution-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImLMsgGetContId(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetContId(iMsgId);
  }

/**
 * @brief MTC Get inreplyto-contribution-id from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The inreplyto-contribution-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImLMsgGetIrtContId(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetIrtContId(iMsgId);
  }

/**
 * @brief MTC Get public messgae indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has public messgae indication, otherwise return false.
 */
  public static boolean Mtc_ImLMsgHasPubInd(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgHasPubInd(iMsgId);
  }

/**
 * @brief MTC Get burn after reading messgae indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has burn after reading messgae indication, otherwise return false.
 */
  public static boolean Mtc_ImLMsgHasBurnInd(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgHasBurnInd(iMsgId);
  }

/**
 * @brief MTC Get burn after reading time length from large message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return burn after reading time length.
 */
  public static int Mtc_ImLMsgGetBurnTimeLen(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetBurnTimeLen(iMsgId);
  }

/**
 * @brief MTC Get spam messgae indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has spam messgae indication, otherwise return false.
 */
  public static boolean Mtc_ImLMsgHasSpamInd(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgHasSpamInd(iMsgId);
  }

/**
 * @brief MTC Get directional messgae indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has directional messgae indication, otherwise return false.
 */
  public static boolean Mtc_ImLMsgHasDirectInd(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgHasDirectInd(iMsgId);
  }

/**
 * @brief MTC Get carbon copy messgae indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has carbon copy messgae indication, otherwise return false.
 */
  public static boolean Mtc_ImLMsgHasCcInd(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgHasCcInd(iMsgId);
  }

/**
 * @brief MTC Get silence messgae indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has silence messgae indication, otherwise return false.
 */
  public static boolean Mtc_ImLMsgHasSilenceInd(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgHasSilenceInd(iMsgId);
  }

/**
 * @brief MTC Get offline messgae indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has offline messgae indication, otherwise return false.
 */
  public static boolean Mtc_ImLMsgHasOffInd(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgHasOffInd(iMsgId);
  }

/**
 * @brief MTC Get app push type from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval app push type if it is a oma push message, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImLMsgGetAppPushType(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetAppPushType(iMsgId);
  }

/**
 * @brief MTC Get revoke message indication flag from large message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has revoke message indication, otherwise return false.
 */
  public static boolean Mtc_ImLMsgHasRevokeMsgInd(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgHasRevokeMsgInd(iMsgId);
  }

/**
 * @brief MTC Get revoke message-id from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke message-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImLMsgGetRevokeMsgId(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetRevokeMsgId(iMsgId);
  }

/**
 * @brief MTC Get revoke result from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke result.
 */
  public static short Mtc_ImLMsgGetRevokeResult(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetRevokeResult(iMsgId);
  }

/**
 * @brief MTC Get revoke from addr from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke from addr.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImLMsgGetRevokeFromAddr(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetRevokeFromAddr(iMsgId);
  }

/**
 * @brief MTC Get revoke to addr from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke to addr.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImLMsgGetRevokeToAddr(int iMsgId) {
    return MtcImLargeJNI.Mtc_ImLMsgGetRevokeToAddr(iMsgId);
  }

}
