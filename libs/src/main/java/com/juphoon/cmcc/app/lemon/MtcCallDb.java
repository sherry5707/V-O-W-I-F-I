/**
 * @file MtcCallDb.java
 * @brief MtcCallDb interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcCallDb interface
 */
public class MtcCallDb implements MtcCallDbConstants {
/**
 * @brief MTC CALL db restore configuration of current user for speicifc mode.
 *
 * @param [in] iMode The combination of MtcCallDbConstants::EN_MTC_CALL_DB_MEDIA_BASE 
 *
 * This interface should be invoke after @ref MtcCli::Mtc_CliInit and 
 * @ref MtcCli::Mtc_CliOpen was called.
 *
 * @retval MtcCommonConstants::ZOK Restore provision successfully.
 * @retval MtcCommonConstants::ZFAILED Restore provision failed.
 */
  public static int Mtc_CallDbRestoreProvision(int iMode) {
    return MtcCallDbJNI.Mtc_CallDbRestoreProvision(iMode);
  }

/**
 * @brief Get the DTMF message type.
 *
 * @return The DTMF message type.
 *         DTMF type MTC MtcCallDbConstants::EN_MTC_DB_DTMF_AUTO, include 
 *         EN_MTC_DB_DTMF_INBAND, EN_MTC_DB_DTMF_OUTBAND, 
 *         EN_MTC_DB_DTMF_INFO, EN_MTC_DB_DTMF_INFO_HW, 
 *         EN_MTC_DB_DTMF_AUTO.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetDtmfType
 */
  public static int Mtc_CallDbGetDtmfType() {
    return MtcCallDbJNI.Mtc_CallDbGetDtmfType();
  }

/**
 * @brief Set the DTMF message type.
 *
 * @param [in] iType The DTMF message type.
 *         DTMF type MtcCallDbConstants::EN_MTC_DB_DTMF_AUTO, include 
 *         EN_MTC_DB_DTMF_INBAND, EN_MTC_DB_DTMF_OUTBAND, 
 *         EN_MTC_DB_DTMF_INFO, EN_MTC_DB_DTMF_INFO_HW, 
 *         EN_MTC_DB_DTMF_AUTO.
 *
 * @retval MtcCommonConstants::ZOK Set the DTMF message type successfully.
 * @retval MtcCommonConstants::ZFAILED Set the DTMF message type failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetDtmfType
 */
  public static int Mtc_CallDbSetDtmfType(int iType) {
    return MtcCallDbJNI.Mtc_CallDbSetDtmfType(iType);
  }

/**
 * @brief Get the DTMF message payload.
 *
 * @return The DTMF message payload.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetDtmfPayload
 */
  public static int Mtc_CallDbGetDtmfPayload() {
    return MtcCallDbJNI.Mtc_CallDbGetDtmfPayload();
  }

/**
 * @brief Set the DTMF message payload.
 *
 * @param [in] iPayload The DTMF message payload.
 *
 * @retval MtcCommonConstants::ZOK Set the DTMF message payload successfully.
 * @retval MtcCommonConstants::ZFAILED Set the DTMF message payload failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetDtmfPayload
 */
  public static int Mtc_CallDbSetDtmfPayload(int iPayload) {
    return MtcCallDbJNI.Mtc_CallDbSetDtmfPayload(iPayload);
  }

/**
 * @brief Get the watch DTMF flag.
 *
 * @retval true It will notify watcher when receive DTMF.
 * @retval false Don't notify.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetDtmfWatch
 */
  public static boolean Mtc_CallDbGetDtmfWatch() {
    return MtcCallDbJNI.Mtc_CallDbGetDtmfWatch();
  }

/**
 * @brief Set the watch DTMF flag.
 *
 * @param [in] bWatch If true, it will notify watcher when receive DTMF.
 *                    false, Don't notify.
 *
 * @retval MtcCommonConstants::ZOK Set watch DTMF flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set watch DTMF flag failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetDtmfWatch
 */
  public static int Mtc_CallDbSetDtmfWatch(boolean bWatch) {
    return MtcCallDbJNI.Mtc_CallDbSetDtmfWatch(bWatch);
  }

/**
 * @brief Get audio jitter buffer value in millisecconds.
 *
 * @param [out] piMinDelay minimum jitter buffer delay.
 * @param [out] piMaxPacketSize maximum jitter buffer packet numbers.
 *
 * @retval MtcCommonConstants::ZOK Get successfully.
 * @retval MtcCommonConstants::ZFAILED Get failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAudioJitterParms
 */
  public static int Mtc_CallDbGetAudioJitterParms(MtcNumber piMinDelay, MtcNumber piMaxPacketSize) {
    return MtcCallDbJNI.Mtc_CallDbGetAudioJitterParms(piMinDelay, piMaxPacketSize);
  }

/**
 * @brief Set audio jitter buffer value in millisecconds.
 *
 * @param [in] iMinDelay minimum jitter buffer delay.
 * @param [in] iMaxPacketSize maximum jitter buffer packet numbers.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAudioJitterParms
 */
  public static int Mtc_CallDbSetAudioJitterParms(int iMinDelay, int iMaxPacketSize) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioJitterParms(iMinDelay, iMaxPacketSize);
  }

/**
 * @brief Get audio QOS.
 *
 * @param [out] pbAec Audio echo cancel option.
 * @param [out] pbAnr Audio noise reduction.
 * @param [out] pbAgc Audio gain control option.
 * @param [out] pbVad Audio silence detection.
 *
 * @retval MtcCommonConstants::ZOK Get audio QOS successfully.
 * @retval MtcCommonConstants::ZFAILED Get audio QOS failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAudioQos
 */
  public static int Mtc_CallDbGetAudioQos(MtcNumber pbAec, MtcNumber pbAnr, MtcNumber pbAgc, MtcNumber pbVad) {
    return MtcCallDbJNI.Mtc_CallDbGetAudioQos(pbAec, pbAnr, pbAgc, pbVad);
  }

/**
 * @brief Set audio QOS.
 *
 * @param [in] bAec Audio echo cancel option.
 * @param [in] bAnr Audio noise reduction.
 * @param [in] bAgc Audio gain control option.
 * @param [in] bVad Audio silence detection.
 *
 * @retval MtcCommonConstants::ZOK Set audio QOS successfully.
 * @retval MtcCommonConstants::ZFAILED Set audio QOS failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAudioQos
 */
  public static int Mtc_CallDbSetAudioQos(boolean bAec, boolean bAnr, boolean bAgc, boolean bVad) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioQos(bAec, bAnr, bAgc, bVad);
  }

/**
 * @brief Set state of AEC.
 *
 * @param [in] bEnable true to enable AEC, false to disable AEC.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAecEnable
 */
  public static int Mtc_CallDbSetAecEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAecEnable(bEnable);
  }

/**
 * @brief Get state of AEC.
 *
 * @retval true indicate AEC is enabled.
 * @retval false indicate AEC is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetAecEnable
 */
  public static boolean Mtc_CallDbGetAecEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAecEnable();
  }

/**
 * @brief Set mode of AEC.
 *
 * @param [in] ucMode Mode of AEC, @ref MtcMediaConstants::EN_MTC_EC_AEC.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAecMode
 */
  public static int Mtc_CallDbSetAecMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetAecMode(ucMode);
  }

/**
 * @brief Get mode of AEC.
 *
 * @return Current AEC mode, @ref MtcMediaConstants::EN_MTC_EC_AEC.
 *
 * @see MtcCallDb::Mtc_CallDbSetAecMode
 */
  public static short Mtc_CallDbGetAecMode() {
    return MtcCallDbJNI.Mtc_CallDbGetAecMode();
  }

/**
 * @brief Set state of VAD.
 *
 * @param [in] bEnable true to enable VAD, false to disable VAD.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetVadEnable
 */
  public static int Mtc_CallDbSetVadEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVadEnable(bEnable);
  }

/**
 * @brief Get state of VAD.
 *
 * @retval true indicate VAD is enabled.
 * @retval false indicate VAD is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetVadEnable
 */
  public static boolean Mtc_CallDbGetVadEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetVadEnable();
  }

/**
 * @brief Set mode of VAD.
 *
 * @param [in] ucMode Mode of VAD, @ref MtcMediaConstants::EN_MTC_VAD_NORMAL.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetVadMode
 */
  public static int Mtc_CallDbSetVadMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetVadMode(ucMode);
  }

/**
 * @brief Get mode of VAD.
 *
 * @return Current VAD mode, @ref MtcMediaConstants::EN_MTC_VAD_NORMAL.
 *
 * @see MtcCallDb::Mtc_CallDbSetVadMode
 */
  public static short Mtc_CallDbGetVadMode() {
    return MtcCallDbJNI.Mtc_CallDbGetVadMode();
  }

/**
 * @brief Set state of AGC.
 *
 * @param [in] bEnable true to enable AGC, false to disable AGC.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAgcEnable
 */
  public static int Mtc_CallDbSetAgcEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAgcEnable(bEnable);
  }

/**
 * @brief Get state of AGC.
 *
 * @retval true indicate AGC is enabled.
 * @retval false indicate AGC is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetAgcEnable
 */
  public static boolean Mtc_CallDbGetAgcEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAgcEnable();
  }

/**
 * @brief Set mode of AGC.
 *
 * @param [in] ucMode Mode of AGC, @ref MtcMediaConstants::EN_MTC_GC_ANALOG.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAgcMode
 */
  public static int Mtc_CallDbSetAgcMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetAgcMode(ucMode);
  }

/**
 * @brief Get mode of AGC.
 *
 * @return Current AGC mode, @ref MtcMediaConstants::EN_MTC_GC_ANALOG.
 *
 * @see MtcCallDb::Mtc_CallDbSetAgcMode
 */
  public static short Mtc_CallDbGetAgcMode() {
    return MtcCallDbJNI.Mtc_CallDbGetAgcMode();
  }

/**
 * @brief Set target dBOV of AGC.
 *
 * @param [in] ucTargetDb Target dBOV of AGC, should be 0 - 30.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAgcTarget
 */
  public static int Mtc_CallDbSetAgcTarget(short ucTargetDb) {
    return MtcCallDbJNI.Mtc_CallDbSetAgcTarget(ucTargetDb);
  }

/**
 * @brief Get target dBOV of AGC.
 *
 * @return Current target dBOV of AGC.
 *
 * @see MtcCallDb::Mtc_CallDbSetAgcTarget
 */
  public static short Mtc_CallDbGetAgcTarget() {
    return MtcCallDbJNI.Mtc_CallDbGetAgcTarget();
  }

/**
 * @brief Set state of RxAGC.
 *
 * @param [in] bEnable true to enable RxAGC, false to disable RxAGC.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAgcEnable
 */
  public static int Mtc_CallDbSetRxAgcEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAgcEnable(bEnable);
  }

/**
 * @brief Get state of RxAGC.
 *
 * @retval true indicate RxAGC is enabled.
 * @retval false indicate RxAGC is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAgcEnable
 */
  public static boolean Mtc_CallDbGetRxAgcEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAgcEnable();
  }

/**
 * @brief Set mode of RxAGC.
 *
 * @param [in] ucMode Mode of RxAGC, @ref MtcMediaConstants::EN_MTC_RX_GC_FIXED.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAgcMode
 */
  public static int Mtc_CallDbSetRxAgcMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAgcMode(ucMode);
  }

/**
 * @brief Get mode of RxAGC.
 *
 * @return Current RxAGC mode, @ref MtcMediaConstants::EN_MTC_RX_GC_FIXED.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAgcMode
 */
  public static short Mtc_CallDbGetRxAgcMode() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAgcMode();
  }

/**
 * @brief Set target dBOV of RxAGC.
 *
 * @param [in] ucTargetDb Target dBOV of RxAGC, should be 0 - 30.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAgcTarget
 */
  public static int Mtc_CallDbSetRxAgcTarget(short ucTargetDb) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAgcTarget(ucTargetDb);
  }

/**
 * @brief Get target dBOV of RxAGC.
 *
 * @return Current target dBOV of RxAGC.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAgcTarget
 */
  public static short Mtc_CallDbGetRxAgcTarget() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAgcTarget();
  }

/**
 * @brief Set state of ANR.
 *
 * @param [in] bEnable true to enable ANR, false to disable ANR.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAnrEnable
 */
  public static int Mtc_CallDbSetAnrEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAnrEnable(bEnable);
  }

/**
 * @brief Get state of ANR.
 *
 * @retval true indicate ANR is enabled.
 * @retval false indicate ANR is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetAnrEnable
 */
  public static boolean Mtc_CallDbGetAnrEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAnrEnable();
  }

/**
 * @brief Set mode of ANR.
 *
 * @param [in] ucMode Mode of ANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAnrMode
 */
  public static int Mtc_CallDbSetAnrMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetAnrMode(ucMode);
  }

/**
 * @brief Get mode of ANR.
 *
 * @return Current mode of ANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @see MtcCallDb::Mtc_CallDbSetAnrMode
 */
  public static short Mtc_CallDbGetAnrMode() {
    return MtcCallDbJNI.Mtc_CallDbGetAnrMode();
  }

/**
 * @brief Get ARS option of audio stream.
 *
 * @retval true ARS is enabled for audio stream.
 * @retval false ARS is disabled for audio stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoArs
 */
  public static boolean Mtc_CallDbGetAudioArsEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAudioArsEnable();
  }

/**
 * @brief Set ARS option of audio stream.
 *
 * @param [in] bEnable true to enable ARS, otherwise to disable ARS.
 *
 * @retval MtcCommonConstants::ZOK Set the audio ARS option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the audio ARS option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoArs
 */
  public static int Mtc_CallDbSetAudioArsEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioArsEnable(bEnable);
  }

/**
 * @brief Set state of RxANR.
 *
 * @param [in] bEnable true to enable RxANR, false to disable RxANR.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAnrEnable
 */
  public static int Mtc_CallDbSetRxAnrEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAnrEnable(bEnable);
  }

/**
 * @brief Get state of RxANR.
 *
 * @retval true indicate RxANR is enabled.
 * @retval false indicate RxANR is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAnrEnable
 */
  public static boolean Mtc_CallDbGetRxAnrEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAnrEnable();
  }

/**
 * @brief Set mode of RxANR.
 *
 * @param [in] ucMode Mode of RxANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRxAnrMode
 */
  public static int Mtc_CallDbSetRxAnrMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetRxAnrMode(ucMode);
  }

/**
 * @brief Get mode of RxANR.
 *
 * @return Current mode of RxANR, @ref MtcMediaConstants::EN_MTC_NS_LOW.
 *
 * @see MtcCallDb::Mtc_CallDbSetRxAnrMode
 */
  public static short Mtc_CallDbGetRxAnrMode() {
    return MtcCallDbJNI.Mtc_CallDbGetRxAnrMode();
  }

/**
 * @brief Set state of audio redundant.
 *
 * @param [in] bEnable true to enable audio redundant, false to disable audio redundant.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetAudioRed
 */
  public static int Mtc_CallDbSetAudioRed(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioRed(bEnable);
  }

/**
 * @brief Get state of audio redundant.
 *
 * @retval true indicate audio redundant is enabled.
 * @retval false indicate audio redundant is disabled.
 *
 * @see MtcCallDb::Mtc_CallDbSetAudioRed
 */
  public static boolean Mtc_CallDbGetAudioRed() {
    return MtcCallDbJNI.Mtc_CallDbGetAudioRed();
  }

/**
 * @brief Get RTX option from database.
 *
 * @retval true Start RTX.
 * @retval false Do not start RTX.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAudioRtxEnable
 */
  public static boolean Mtc_CallDbGetAudioRtxEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAudioRtxEnable();
  }

/**
 * @brief Set RTX option.
 *
 * @param [in] bEnable RTX option.
 *
 * @retval MtcCommonConstants::ZOK Set RTX option successfully.
 * @retval MtcCommonConstants::ZFAILED Set RTX option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAudioRtxEnable
 */
  public static int Mtc_CallDbSetAudioRtxEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioRtxEnable(bEnable);
  }

/**
 * @brief Set AMR-WB bitrate(bps).
 *
 * @param [in] iBitrate bitrate(bps) of AMR-WB. The value can only be (6600, 8850, 
 *      12650, 14250, 15850, 18250, 19850, 23050, 23850).
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 */
  public static int Mtc_CallDbSetAmrWbBitrate(int iBitrate) {
    return MtcCallDbJNI.Mtc_CallDbSetAmrWbBitrate(iBitrate);
  }

/**
 * @brief Get AMR-WB bitrate.
 *
 * @return The bitrate(bps) of AMR-WB .
 */
  public static int Mtc_CallDbGetAmrWbBitrate() {
    return MtcCallDbJNI.Mtc_CallDbGetAmrWbBitrate();
  }

/**
 * @brief Set AMR bitrate(bps).
 *
 * @param [in] iBitrate bitrate(bps) of AMR. The value can only be (4750, 5150, 
 *      5900, 6700, 7400, 7950, 10200, 12200).
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 */
  public static int Mtc_CallDbSetAmrBitrate(int iBitrate) {
    return MtcCallDbJNI.Mtc_CallDbSetAmrBitrate(iBitrate);
  }

/**
 * @brief Get AMR bitrate.
 *
 * @return The bitrate of AMR .
 */
  public static int Mtc_CallDbGetAmrBitrate() {
    return MtcCallDbJNI.Mtc_CallDbGetAmrBitrate();
  }

/**
 * @brief Get supporting audio codec count
 *
 * @return The count of audio codec supported.
 */
  public static int Mtc_CallDbGetSuptAudioCodecCount() {
    return MtcCallDbJNI.Mtc_CallDbGetSuptAudioCodecCount();
  }

/**
 * @brief Get supporting audio codec from database.
 *
 * @param [in] iIndex Codec index from 0 to (count - 1). Count get by
                       @ref MtcCallDb::Mtc_CallDbGetSuptAudioCodecCount.
 *
 * @return The string of Codec name successfully or empty string failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSuptAudioCodecCount
 */
  public static String Mtc_CallDbGetSuptAudioCodec(int iIndex) {
    return MtcCallDbJNI.Mtc_CallDbGetSuptAudioCodec(iIndex);
  }

/**
 * @brief Get used audio codec count
 *
 * @return The count of audio codec supported.
 */
  public static int Mtc_CallDbGetAudioCodecCount() {
    return MtcCallDbJNI.Mtc_CallDbGetAudioCodecCount();
  }

/**
 * @brief Get audio codec from database.
 *
 * @param [in] ucPriority Codec priority.
 *
 * @return The string of Codec name successfully or empty string failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAudioCodecByPriority
 */
  public static String Mtc_CallDbGetAudioCodecByPriority(short ucPriority) {
    return MtcCallDbJNI.Mtc_CallDbGetAudioCodecByPriority(ucPriority);
  }

/**
 * @brief Set the audio codec enable or disable.
 *
 * @param [in] pcCodec Codec name.
 * @param [in] bEnable true for enable, other for disable.
 *
 * @retval MtcCommonConstants::ZOK Set the audio codec enable or disable successfully.
 * @retval MtcCommonConstants::ZFAILED Set the audio codec enable or disable failed.
 */
  public static int Mtc_CallDbSetAudioCodecEnable(String pcCodec, boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioCodecEnable(pcCodec, bEnable);
  }

/**
 * @brief Set the audio codec priority.
 *
 * @param [in] pcName Codec name.
 * @param [in] ucPriority Codec priority.
 *
 * @retval MtcCommonConstants::ZOK Set the audio codec priority successfully.
 * @retval MtcCommonConstants::ZFAILED Set the audio codec priority failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAudioCodecByPriority
 */
  public static int Mtc_CallDbSetAudioCodecByPriority(String pcName, short ucPriority) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioCodecByPriority(pcName, ucPriority);
  }

/**
 * @brief Get AMR octet-align enable flag .
 *
 * @retval true AMR octet-align enable.
 * @retval false AMR octet-align disable.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAmrOctAlign
 */
  public static boolean Mtc_CallDbGetAmrOctAlign() {
    return MtcCallDbJNI.Mtc_CallDbGetAmrOctAlign();
  }

/**
 * @brief Set AMR octet-align enable flag .
 *
 * @param [in] bEnable true for enable, other for disable.
 *
 * @retval MtcCommonConstants::ZOK Set the AMR octect-align enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set the AMR octect-align enable failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAmrOctAlign
 */
  public static int Mtc_CallDbSetAmrOctAlign(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAmrOctAlign(bEnable);
  }

/**
 * @brief Get AMR-WB octet-align enable flag .
 *
 * @retval true AMR-WB octet-align enable.
 * @retval false AMR-WB octet-align disable.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAmrWbOctAlign
 */
  public static boolean Mtc_CallDbGetAmrWbOctAlign() {
    return MtcCallDbJNI.Mtc_CallDbGetAmrWbOctAlign();
  }

/**
 * @brief Set AMR-WB octet-align enable flag .
 *
 * @param [in] bEnable true for enable, other for disable.
 *
 * @retval MtcCommonConstants::ZOK Set the AMR-WB octet-align enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set the AMR-WB octet-align enable failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAmrWbOctAlign
 */
  public static int Mtc_CallDbSetAmrWbOctAlign(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAmrWbOctAlign(bEnable);
  }

/**
 * @brief Get default volume value for speaker.
 *
 * @return Default volume value for speaker, from 0-20.
 */
  public static int Mtc_CallDbGetSpkDftVol() {
    return MtcCallDbJNI.Mtc_CallDbGetSpkDftVol();
  }

/**
 * @brief Set default volume value for speaker.
 *
 * @param [in] iVol Default volume value for speaker, from 0-20.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 */
  public static int Mtc_CallDbSetSpkDftVol(int iVol) {
    return MtcCallDbJNI.Mtc_CallDbSetSpkDftVol(iVol);
  }

/**
 * @brief Get supporting video codec count
 *
 * @return The count of video codec supported.
 */
  public static int Mtc_CallDbGetSuptVideoCodecCount() {
    return MtcCallDbJNI.Mtc_CallDbGetSuptVideoCodecCount();
  }

/**
 * @brief Get supporting video codec from database.
 *
 * @param [in] iIndex Codec index from 0 to (count - 1). Count get by
                       @ref MtcCallDb::Mtc_CallDbGetSuptVideoCodecCount.
 *
 * @return The string of Codec name successfully or empty string failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSuptVideoCodecCount
 */
  public static String Mtc_CallDbGetSuptVideoCodec(int iIndex) {
    return MtcCallDbJNI.Mtc_CallDbGetSuptVideoCodec(iIndex);
  }

/**
 * @brief Get video codec count.
 *
 * @return Video used codec count.
 */
  public static int Mtc_CallDbGetVideoCodecCount() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoCodecCount();
  }

/**
 * @brief Get video codec from database.
 *
 * @param [in] ucPriority Codec priority.
 *
 * @return The string of Codec name successfully or empty string failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoCodecByPriority
 */
  public static String Mtc_CallDbGetVideoCodecByPriority(short ucPriority) {
    return MtcCallDbJNI.Mtc_CallDbGetVideoCodecByPriority(ucPriority);
  }

/**
 * @brief Get codec priority auto adjust flag from database.
 *
 * @retval true Indicates codec priority will auto adjust.
 * @retval false Indicates codec priority will not auto adjust.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCodecPriorityAutoAdjust
 */
  public static boolean Mtc_CallDbGetCodecPriorityAutoAdjust() {
    return MtcCallDbJNI.Mtc_CallDbGetCodecPriorityAutoAdjust();
  }

/**
 * @brief Set the video codec enable or disable.
 *
 * @param [in] pcCodec Codec name.
 * @param [in] bEnable true for enable, other for disable.
 *
 * @retval MtcCommonConstants::ZOK Set the video codec enable or disable successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video codec enable or disable failed.
 */
  public static int Mtc_CallDbSetVideoCodecEnable(String pcCodec, boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoCodecEnable(pcCodec, bEnable);
  }

/**
 * @brief Set the video codec priority.
 *
 * @param [in] pcCodec Codec name.
 * @param [in] ucPriority Codec priority.
 *
 * @retval MtcCommonConstants::ZOK Set the video codec priority successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video codec priority failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoCodecByPriority
 */
  public static int Mtc_CallDbSetVideoCodecByPriority(String pcCodec, short ucPriority) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoCodecByPriority(pcCodec, ucPriority);
  }

/**
 * @brief Set the codec priority auto adjust flag.
 *
 * @param [in] bAdjust Auto adjust flag.
 *
 * @retval MtcCommonConstants::ZOK Set the auto adjust flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set the auto adjust flag failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCodecPriorityAutoAdjust
 */
  public static int Mtc_CallDbSetCodecPriorityAutoAdjust(boolean bAdjust) {
    return MtcCallDbJNI.Mtc_CallDbSetCodecPriorityAutoAdjust(bAdjust);
  }

/**
 * @brief Set video h264 profile.
 *
 * @param [in] ucProfile Video h264 profile parameter.
 * @ref  MtcCallDbConstants::EN_MTC_DB_H264_PROFILE_BASELINE.
 *
 * @retval MtcCommonConstants::ZOK Set the video h264 profile successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video h264 profile failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoH264Profile
 */
  public static int Mtc_CallDbSetVideoH264Profile(short ucProfile) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoH264Profile(ucProfile);
  }

/**
 * @brief Get video h264 profile.
 *
 * @return Video h264 profile, @ref  MtcCallDbConstants::EN_MTC_DB_H264_PROFILE_BASELINE.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoH264Profile
 */
  public static short Mtc_CallDbGetVideoH264Profile() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoH264Profile();
  }

/**
 * @brief Set video h264 consraint sets, which should be set according to profile(see h264 rfc for details).
 *
 * @param [in] ucProfile Video h264 consraint sets parameter.
 * @ref  MtcCallDbConstants::EN_MTC_DB_H264_CONSTRAINT_SETS0.
 *
 * @retval MtcCommonConstants::ZOK Set the video h264 consraint sets successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video h264 consraint sets failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoH264Constraint
 */
  public static int Mtc_CallDbSetVideoH264Constraint(short ucConstraint) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoH264Constraint(ucConstraint);
  }

/**
 * @brief Get video h264 consraint sets.
 *
 * @return Video h264 consraint sets, @ref  MtcCallDbConstants::EN_MTC_DB_H264_CONSTRAINT_SETS0.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoH264Constraint
 */
  public static short Mtc_CallDbGetVideoH264Constraint() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoH264Constraint();
  }

/**
 * @brief Set video h264 packet mode.
 *
 * @param [in] ucMode Video h264 packet mode parameter.
 *
 * @retval MtcCommonConstants::ZOK Set the video h264 packet mode successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video h264 packet mode  failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoH264Packetmode
 */
  public static int Mtc_CallDbSetVideoH264Packetmode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoH264Packetmode(ucMode);
  }

/**
 * @brief Get video h264 packet mode.
 *
 * @return Video h264 packet mode, @ref  MtcCallDbConstants::EN_MTC_DB_H264_PACKET_MODE_0.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoH264Packetmode
 */
  public static short Mtc_CallDbGetVideoH264Packetmode() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoH264Packetmode();
  }

/**
 * @brief Set video image attribute enable.
 *
 * @param [in] bEnable true to enable image attribute, false to disable.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoImgAttrEnable
 */
  public static int Mtc_CallDbSetVideoImgAttrEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoImgAttrEnable(bEnable);
  }

/**
 * @brief Get video image attribute enable.
 *
 * @retval true indicate image attribute is enabled.
 * @retval false indicate image attribute is disabled.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoImgAttrEnable
 */
  public static boolean Mtc_CallDbGetVideoImgAttrEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoImgAttrEnable();
  }

/**
 * @brief Set video cvo attribute enable.
 *
 * @param [in] bEnable true to enable cvo attribute, false to disable.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoCvoEnable
 */
  public static int Mtc_CallDbSetVideoCvoEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoCvoEnable(bEnable);
  }

/**
 * @brief Get video cvo attribute enable.
 *
 * @retval true indicate video cvo attribute is enabled.
 * @retval false indicate video cvo attribute is disabled.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoCvoEnable
 */
  public static boolean Mtc_CallDbGetVideoCvoEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoCvoEnable();
  }

/**
 * @brief Get video nack RTT in millisecconds.
 *
 * @param [out] piMinRtt minimum video nack rtt(ms).
 * @param [out] piMaxRtt maximum video nack rtt(ms).
 *
 * @retval MtcCommonConstants::ZOK Get successfully.
 * @retval MtcCommonConstants::ZFAILED Get failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoNackRttParms
 */
  public static int Mtc_CallDbGetVideoNackRttParms(MtcNumber piMinRtt, MtcNumber piMaxRtt) {
    return MtcCallDbJNI.Mtc_CallDbGetVideoNackRttParms(piMinRtt, piMaxRtt);
  }

/**
 * @brief Set video nack RTT in millisecconds.
 *
 * @param [in] iMinRtt minimum video nack RTT(ms).
 * @param [in] iMaxRtt maximum video nack RTT(ms).
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoNackRttParms
 */
  public static int Mtc_CallDbSetVideoNackRttParms(int iMinRtt, int iMaxRtt) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoNackRttParms(iMinRtt, iMaxRtt);
  }

/**
 * @brief Get video bitrate.
 *
 * @retval Video bitrate parameter in bps.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoBitrate
 */
  public static int Mtc_CallDbGetVideoBitrate() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoBitrate();
  }

/**
 * @brief Set video bitrate.
 *
 * @param [in] iBitRate Video bitrate parameter in bps.
 *
 * @retval MtcCommonConstants::ZOK Set the video bitrate successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video bitrate failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoBitrate
 */
  public static int Mtc_CallDbSetVideoBitrate(int iBitRate) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoBitrate(iBitRate);
  }

/**
 * @brief Get video frame rate.
 *
 * @retval Video frame rate parameter in fps.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoFramerate
 */
  public static int Mtc_CallDbGetVideoFramerate() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoFramerate();
  }

/**
 * @brief Set video frame rate.
 *
 * @param [in] iFrameRate Video frame rate parameter in fps.
 *
 * @retval MtcCommonConstants::ZOK Set the video frame rate successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video frame rate failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoFramerate
 */
  public static int Mtc_CallDbSetVideoFramerate(int iFrameRate) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoFramerate(iFrameRate);
  }

/**
 * @brief Get video resolution.
 *
 * @param [out] piWidth Pixel value in horizontal direction.
 * @param [out] piHeight Pixel value in vertical direction.
 *
 * @retval MtcCommonConstants::ZOK Get the video resolution successfully.
 * @retval MtcCommonConstants::ZFAILED Get the video resolution failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoResolution
 */
  public static int Mtc_CallDbGetVideoResolution(MtcNumber piWidth, MtcNumber piHeight) {
    return MtcCallDbJNI.Mtc_CallDbGetVideoResolution(piWidth, piHeight);
  }

/**
 * @brief Set video resolution.
 *
 * @param [in] iWidth Pixel value in horizontal direction.
 * @param [in] iHeight Pixel value in vertical direction.
 *
 * @retval MtcCommonConstants::ZOK Set the video resolution successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video resolution failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoResolution
 */
  public static int Mtc_CallDbSetVideoResolution(int iWidth, int iHeight) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoResolution(iWidth, iHeight);
  }

/**
 * @brief Get video resolution.
 *
 * @return The string of video resolution name or "UNKNOWN" failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoResolutionX
 */
  public static String Mtc_CallDbGetVideoResolutionX() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoResolutionX();
  }

/**
 * @brief Set video resolution.
 *
 * @param [in] pcName Video resolution name string.
 *
 * @retval MtcCommonConstants::ZOK Set the video resolution successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video resolution failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoResolutionX
 */
  public static int Mtc_CallDbSetVideoResolutionX(String pcName) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoResolutionX(pcName);
  }

/**
 * @brief Get media device manager option.
 *
 * @retval true Enable media device manager.
 * @retval false Disable media device manager.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetMdmEnable
 */
  public static boolean Mtc_CallDbGetMdmEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetMdmEnable();
  }

/**
 * @brief Set media device manager option.
 *
 * @param [in] bEnable true to enable media device manager, otherwise to disable.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetMdmEnable
 */
  public static int Mtc_CallDbSetMdmEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetMdmEnable(bEnable);
  }

/**
 * @brief Get resolution control of video stream.
 *
 * @retval true Resolution control is enabled for video stream.
 * @retval false Resolution control is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetResolutionControl
 */
  public static boolean Mtc_CallDbGetResolutionControl() {
    return MtcCallDbJNI.Mtc_CallDbGetResolutionControl();
  }

/**
 * @brief Set resolution control of video stream.
 *
 * @param [in] bEnable true to enable resolution control, otherwise to disable.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetResolutionControl
 */
  public static int Mtc_CallDbSetResolutionControl(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetResolutionControl(bEnable);
  }

/**
 * @brief Set video resolution control mode.
 *
 * @param [in] ucMode Mode of video resolution control, @ref MtcCallDbConstants::EN_MTC_RES_CTRL_NORMAL.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetVideoResCtrlMode
 */
  public static int Mtc_CallDbSetVideoResCtrlMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoResCtrlMode(ucMode);
  }

/**
 * @brief Get video resolution control mode.
 *
 * @return Current video resolution control mode, @ref MtcCallDbConstants::EN_MTC_RES_CTRL_NORMAL.
 *
 * @see MtcCallDb::Mtc_CallDbSetVideoResCtrlMode
 */
  public static short Mtc_CallDbGetVideoResCtrlMode() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoResCtrlMode();
  }

/**
 * @brief Get framerate control of video stream.
 *
 * @retval true Framerate control is enabled for video stream.
 * @retval false Framerate control is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetFramerateControl
 */
  public static boolean Mtc_CallDbGetFramerateControl() {
    return MtcCallDbJNI.Mtc_CallDbGetFramerateControl();
  }

/**
 * @brief Set framerate control of video stream.
 *
 * @param [in] bEnable true to enable framerate control, otherwise to disable.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetFramerateControl
 */
  public static int Mtc_CallDbSetFramerateControl(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetFramerateControl(bEnable);
  }

/**
 * @brief Get CPU load control of video stream.
 *
 * @retval true CPU load control is enabled for video stream.
 * @retval false CPU load control is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCpuLoadControl
 */
  public static boolean Mtc_CallDbGetCpuLoadControl() {
    return MtcCallDbJNI.Mtc_CallDbGetCpuLoadControl();
  }

/**
 * @brief Set CPU load control of video stream.
 *
 * @param [in] bEnable true to enable CPU load control, otherwise to disable.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCpuLoadControl
 */
  public static int Mtc_CallDbSetCpuLoadControl(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetCpuLoadControl(bEnable);
  }

/**
 * @brief Get CPU load control of video stream.
 *
 * @return CPU load control target, from 0 to 100.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCpuLoadTarget
 */
  public static int Mtc_CallDbGetCpuLoadTarget() {
    return MtcCallDbJNI.Mtc_CallDbGetCpuLoadTarget();
  }

/**
 * @brief Set CPU load control of video stream.
 *
 * @param [in] iTarget CPU load control target, from 0 to 100.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCpuLoadTarget
 */
  public static int Mtc_CallDbSetCpuLoadTarget(int iTarget) {
    return MtcCallDbJNI.Mtc_CallDbSetCpuLoadTarget(iTarget);
  }

/**
 * @brief Get FIR of video stream.
 *
 * @retval true FIR is enabled for video stream.
 * @retval false FIR is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetFir
 */
  public static boolean Mtc_CallDbGetFir() {
    return MtcCallDbJNI.Mtc_CallDbGetFir();
  }

/**
 * @brief Set FIR of video stream.
 *
 * @param [in] bEnable true to enable FIR, otherwise to disable.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetFir
 */
  public static int Mtc_CallDbSetFir(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetFir(bEnable);
  }

/**
 * @brief Get FIR using INFO method of video stream.
 *
 * @retval true FIR using INFO method is enabled for video stream.
 * @retval false FIR using INFO method is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetFirByInfo
 */
  public static boolean Mtc_CallDbGetFirByInfo() {
    return MtcCallDbJNI.Mtc_CallDbGetFirByInfo();
  }

/**
 * @brief Set FIR using INFO method of video stream.
 *
 * @param [in] bEnable true to enable FIR by INFO method, otherwise to disable.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetFirByInfo
 */
  public static int Mtc_CallDbSetFirByInfo(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetFirByInfo(bEnable);
  }

/**
 * @brief Get key frame period of video stream.
 *
 * @return Key frame period in milliseconds for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetFramerateControl
 */
  public static int Mtc_CallDbGetKeyPeriod() {
    return MtcCallDbJNI.Mtc_CallDbGetKeyPeriod();
  }

/**
 * @brief Set framerate control of video stream.
 *
 * @param [in] iTimeLen Key frame period in milliseconds.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetKeyPeriod
 */
  public static int Mtc_CallDbSetKeyPeriod(int iTimeLen) {
    return MtcCallDbJNI.Mtc_CallDbSetKeyPeriod(iTimeLen);
  }

/**
 * @brief Get video key frame repeat count at start.
 *
 * @return Key frame repeat count at start.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetKeyRepeat
 */
  public static int Mtc_CallDbGetKeyRepeat() {
    return MtcCallDbJNI.Mtc_CallDbGetKeyRepeat();
  }

/**
 * @brief Set video key frame repeat count at start.
 *
 * @param [in] iCount Key frame repeat count at start.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetKeyRepeat
 */
  public static int Mtc_CallDbSetKeyRepeat(int iCount) {
    return MtcCallDbJNI.Mtc_CallDbSetKeyRepeat(iCount);
  }

/**
 * @brief Get bandwidth efficiency mode of video stream.
 *
 * @retval true BEM is enabled for video stream.
 * @retval false BEM is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoBem
 */
  public static boolean Mtc_CallDbGetVideoBem() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoBem();
  }

/**
 * @brief Set bandwidth efficiency mode of video stream.
 *
 * @param [in] bEnable true to enable BEM, otherwise to disable BEM.
 *
 * @retval MtcCommonConstants::ZOK Set the video BEM option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video BEM option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoBem
 */
  public static int Mtc_CallDbSetVideoBem(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoBem(bEnable);
  }

/**
 * @brief Get bandwidth for video stream.
 * 
 * @param  [out] piDownBps Downstream bandwidth in bps.
 * @param  [out] piUpBps   Upstream bandwidth in bps.
 * 
 * @retval MtcCommonConstants::ZOK Set the video bandwidth option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video bandwidth option failed.
 */
  public static int Mtc_CallDbGetVideoBandwidth(MtcNumber piDownBps, MtcNumber piUpBps) {
    return MtcCallDbJNI.Mtc_CallDbGetVideoBandwidth(piDownBps, piUpBps);
  }

/**
 * @brief Set bandwidth for video stream.
 *
 * @param  [in] iDownBps Downstream bandwidth in bps.
 * @param  [in] iUpBps   Upstream bandwidth in bps.
 *
 * @retval MtcCommonConstants::ZOK Set the video bandwidth option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video bandwidth option failed.
 */
  public static int Mtc_CallDbSetVideoBandwidth(int iDownBps, int iUpBps) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoBandwidth(iDownBps, iUpBps);
  }

/**
 * @brief Get coordination of video orientation is enabled or not for send.
 *
 * @retval true Coordination of video orientation is enabled for send.
 * @retval false Coordination of video orientation is disabled for send.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoOrientSend
 */
  public static boolean Mtc_CallDbGetVideoOrientSend() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoOrientSend();
  }

/**
 * @brief Set coordination of video orientation is enabled or not for send.
 *
 * @param [in] bEnable true enable coordination of video orientation for send.
 *
 * @retval MtcCommonConstants::ZOK Set option successfully.
 * @retval MtcCommonConstants::ZFAILED Set option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoOrientSend
 */
  public static int Mtc_CallDbSetVideoOrientSend(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoOrientSend(bEnable);
  }

/**
 * @brief Get coordination of video orientation is enabled or not for receive.
 *
 * @retval true Coordination of video orientation is enabled for receive.
 * @retval false Coordination of video orientation is disabled for receive.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoOrientRecv
 */
  public static boolean Mtc_CallDbGetVideoOrientRecv() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoOrientRecv();
  }

/**
 * @brief Set coordination of video orientation is enabled or not for receive.
 *
 * @param [in] bEnable true enable coordination of video orientation for receive.
 *
 * @retval MtcCommonConstants::ZOK Set option successfully.
 * @retval MtcCommonConstants::ZFAILED Set option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoOrientRecv
 */
  public static int Mtc_CallDbSetVideoOrientRecv(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoOrientRecv(bEnable);
  }

/**
 * @brief Get RTP extension ID for coordination of video orientation.
 *
 * @return RTP extension ID.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoOrientId
 */
  public static int Mtc_CallDbGetVideoOrientId() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoOrientId();
  }

/**
 * @brief Set RTP extension ID for coordination of video orientation.
 *
 * @param [in] iId RTP extension ID.
 *
 * @retval MtcCommonConstants::ZOK Set option successfully.
 * @retval MtcCommonConstants::ZFAILED Set option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoOrientId
 */
  public static int Mtc_CallDbSetVideoOrientId(int iId) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoOrientId(iId);
  }

/**
 * @brief Get ARS option of video stream.
 *
 * @retval true ARS is enabled for video stream.
 * @retval false ARS is disabled for video stream.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoArs
 */
  public static boolean Mtc_CallDbGetVideoArs() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoArs();
  }

/**
 * @brief Set ARS option of video stream.
 *
 * @param [in] bEnable true to enable ARS, otherwise to disable ARS.
 *
 * @retval MtcCommonConstants::ZOK Set the video ARS option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video ARS option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoArs
 */
  public static int Mtc_CallDbSetVideoArs(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoArs(bEnable);
  }

/**
 * @brief Set mode of ARS.
 *
 * @param [in] ucMode Mode of ARS, @ref MtcMediaConstants::EN_MTC_ARS_QUALITY_SPATIAL.
 *
 * @retval MtcCommonConstants::ZOK on successfully.
 * @retval MtcCommonConstants::ZFAILED on failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetArsMode
 */
  public static int Mtc_CallDbSetArsMode(short ucMode) {
    return MtcCallDbJNI.Mtc_CallDbSetArsMode(ucMode);
  }

/**
 * @brief Get mode of ARS.
 *
 * @return Current ARS mode, @ref MtcMediaConstants::EN_MTC_ARS_QUALITY_SPATIAL.
 *
 * @see MtcCallDb::Mtc_CallDbSetArsMode
 */
  public static short Mtc_CallDbGetArsMode() {
    return MtcCallDbJNI.Mtc_CallDbGetArsMode();
  }

/**
 * @brief Get ARS parameter from database.
 *
 * @param [out] piBrHi Highest bitrate.
 * @param [out] piBrLo Lowest bitrate.
 * @param [out] piFrHi Highest framerate.
 * @param [out] piFrLo Lowest framerate.

 * @retval MtcCommonConstants::ZOK Get successfully.
 * @retval MtcCommonConstants::ZFAILED Get failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoArsParm
 */
  public static int Mtc_CallDbGetVideoArsParm(MtcNumber piBrHi, MtcNumber piBrLo, MtcNumber piFrHi, MtcNumber piFrLo) {
    return MtcCallDbJNI.Mtc_CallDbGetVideoArsParm(piBrHi, piBrLo, piFrHi, piFrLo);
  }

/**
 * @brief Set ARS parameter.
 *
 * @param [in] iBrHi Highest bitrate.
 * @param [in] iBrLo Lowest bitrate.
 * @param [in] iFrHi Highest framerate.
 * @param [in] iFrLo Lowest framerate.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoArsParm
 */
  public static int Mtc_CallDbSetVideoArsParm(int iBrHi, int iBrLo, int iFrHi, int iFrLo) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoArsParm(iBrHi, iBrLo, iFrHi, iFrLo);
  }

/**
 * @brief Set ARS parameter.
 *
 * @param [in] bNetWorkType the network type.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoArsParm
 */
  public static int Mtc_CallDbSetVideoArsParmX(boolean bNetWorkType) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoArsParmX(bNetWorkType);
  }

/**
 * @brief Get the video FEC type.
 *
 * @return The video FEC type @ref MTC MtcCallDbConstants::EN_MTC_DB_FEC_NONE.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoFecType
 */
  public static int Mtc_CallDbGetVideoFecType() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoFecType();
  }

/**
 * @brief Set the video FEC type.
 *
 * @param [in] iType The video FEC type.  FEC type @ref MtcCallDbConstants::EN_MTC_DB_FEC_NONE.
 *
 * @retval MtcCommonConstants::ZOK Set the video FEC type successfully.
 * @retval MtcCommonConstants::ZFAILED Set the video FEC type failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoFecType
 */
  public static int Mtc_CallDbSetVideoFecType(int iType) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoFecType(iType);
  }

/**
 * @brief Get RTCP option from database.
 *
 * @retval true Start RTCP.
 * @retval false Do not start RTCP.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRtcpEnable
 */
  public static boolean Mtc_CallDbGetRtcpEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetRtcpEnable();
  }

/**
 * @brief Set RTCP option.
 *
 * @param [in] bEnable RTCP option.
 *
 * @retval MtcCommonConstants::ZOK Set RTCP option successfully.
 * @retval MtcCommonConstants::ZFAILED Set RTCP option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRtcpEnable
 */
  public static int Mtc_CallDbSetRtcpEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetRtcpEnable(bEnable);
  }

/**
 * @brief Get RTP port from database.
 *
 * @param [out] pwAMinPort RTP audio min port.
 * @param [out] pwAMaxPort RTP audio max port.
 * @param [out] pwVMinPort RTP video min port.
 * @param [out] pwVMaxPort RTP video max port.

 * @retval MtcCommonConstants::ZOK Get RTP port successfully.
 * @retval MtcCommonConstants::ZFAILED Get RTP port failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRtpPort
 */
  public static int Mtc_CallDbGetRtpPort(MtcNumber pwAMinPort, MtcNumber pwAMaxPort, MtcNumber pwVMinPort, MtcNumber pwVMaxPort) {
    return MtcCallDbJNI.Mtc_CallDbGetRtpPort(pwAMinPort, pwAMaxPort, pwVMinPort, pwVMaxPort);
  }

/**
 * @brief Set RTP port.
 *
 * @param [in] wAMinPort RTP audio min port.
 * @param [in] wAMaxPort RTP audio max port.
 * @param [in] wVMinPort RTP video min port.
 * @param [in] wVMaxPort RTP video max port.
 *
 * @retval MtcCommonConstants::ZOK Set RTP port successfully.
 * @retval MtcCommonConstants::ZFAILED Set RTP port failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRtpPort
 */
  public static int Mtc_CallDbSetRtpPort(int wAMinPort, int wAMaxPort, int wVMinPort, int wVMaxPort) {
    return MtcCallDbJNI.Mtc_CallDbSetRtpPort(wAMinPort, wAMaxPort, wVMinPort, wVMaxPort);
  }

/**
 * @brief Get RTP break detection time length in seconds from database.
 *
 * @return RTP break detection time length.
 *
 * @see MtcCallDb::Mtc_CallDbSetRtpBreakTime
 */
  public static int Mtc_CallDbGetRtpBreakTime() {
    return MtcCallDbJNI.Mtc_CallDbGetRtpBreakTime();
  }

/**
 * @brief Set RTP break detection time length in seconds.
 *
 * @param [in] iTimeLen RTP break detection time length in seconds.
 *
 * @retval MtcCommonConstants::ZOK Set RTP break detection time length successfully.
 * @retval MtcCommonConstants::ZFAILED Set RTP break detection time length failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetRtpBreakTime
 */
  public static int Mtc_CallDbSetRtpBreakTime(int iTimeLen) {
    return MtcCallDbJNI.Mtc_CallDbSetRtpBreakTime(iTimeLen);
  }

/**
 * @brief Get SRTP crypto type from database.
 *
 * @return SRTP crypto type, @ref MtcCallDbConstants::EN_MTC_DB_SRTP_CRYPTO_OFF.
 *
 * @see MtcCallDb::Mtc_CallDbSetSrtpCryptoType
 */
  public static int Mtc_CallDbGetSrtpCryptoType() {
    return MtcCallDbJNI.Mtc_CallDbGetSrtpCryptoType();
  }

/**
 * @brief Set SRTP crypto type.
 *
 * @param [in] iType SRTP crypto type, @ref MtcCallDbConstants::EN_MTC_DB_SRTP_CRYPTO_OFF.
 *
 * @retval MtcCommonConstants::ZOK Set SRTP crypto type successfully.
 * @retval MtcCommonConstants::ZFAILED Set SRTP crypto type failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetSrtpCryptoType
 */
  public static int Mtc_CallDbSetSrtpCryptoType(int iType) {
    return MtcCallDbJNI.Mtc_CallDbSetSrtpCryptoType(iType);
  }

/**
 * @brief Get authenticated SRTP option from database.
 *
 * @retval true Enable authenticated SRTP.
 * @retval false Disable authenticated SRTP.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSrtpAuthRtp
 */
  public static boolean Mtc_CallDbGetSrtpAuthRtp() {
    return MtcCallDbJNI.Mtc_CallDbGetSrtpAuthRtp();
  }

/**
 * @brief Set authenticated SRTP option.
 *
 * @param [in] bEnable true to enable authenticated SRTP, false to disable.
 *
 * @retval MtcCommonConstants::ZOK Set authenticated SRTP option successfully.
 * @retval MtcCommonConstants::ZFAILED Set authenticated SRTP option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSrtpAuthRtp
 */
  public static int Mtc_CallDbSetSrtpAuthRtp(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetSrtpAuthRtp(bEnable);
  }

/**
 * @brief Get encrypted SRTP option from database.
 *
 * @retval true Enable encrypted SRTP.
 * @retval false Disable encrypted SRTP.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSrtpEncryptRtp
 */
  public static boolean Mtc_CallDbGetSrtpEncryptRtp() {
    return MtcCallDbJNI.Mtc_CallDbGetSrtpEncryptRtp();
  }

/**
 * @brief Set encrypted SRTP option.
 *
 * @param [in] bEnable true to enable encrypted SRTP, false to disable.
 *
 * @retval MtcCommonConstants::ZOK Set encrypted SRTP option successfully.
 * @retval MtcCommonConstants::ZFAILED Set encrypted SRTP option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSrtpEncryptRtp
 */
  public static int Mtc_CallDbSetSrtpEncryptRtp(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetSrtpEncryptRtp(bEnable);
  }

/**
 * @brief Get encrypted SRTCP option from database.
 *
 * @retval true Enable encrypted SRTCP.
 * @retval false Disable encrypted SRTCP.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSrtpEncryptRtcp
 */
  public static boolean Mtc_CallDbGetSrtpEncryptRtcp() {
    return MtcCallDbJNI.Mtc_CallDbGetSrtpEncryptRtcp();
  }

/**
 * @brief Set encrypted SRTCP option.
 *
 * @param [in] bEnable true to enable encrypted SRTCP, false to disable.
 *
 * @retval MtcCommonConstants::ZOK Set encrypted SRTCP option successfully.
 * @retval MtcCommonConstants::ZFAILED Set encrypted SRTCP option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSrtpEncryptRtcp
 */
  public static int Mtc_CallDbSetSrtpEncryptRtcp(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetSrtpEncryptRtcp(bEnable);
  }

/**
 * @brief Get NACK option from database.
 *
 * @retval true Start NACK.
 * @retval false Do not start NACK.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetNackEnable
 */
  public static boolean Mtc_CallDbGetNackEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetNackEnable();
  }

/**
 * @brief Set NACK option.
 *
 * @param [in] bEnable NACK option.
 *
 * @retval MtcCommonConstants::ZOK Set NACK option successfully.
 * @retval MtcCommonConstants::ZFAILED Set NACK option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetNackEnable
 */
  public static int Mtc_CallDbSetNackEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetNackEnable(bEnable);
  }

/**
 * @brief Get RTX option from database.
 *
 * @retval true Start RTX.
 * @retval false Do not start RTX.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRtxEnable
 */
  public static boolean Mtc_CallDbGetRtxEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetRtxEnable();
  }

/**
 * @brief Set RTX option.
 *
 * @param [in] bEnable RTX option.
 *
 * @retval MtcCommonConstants::ZOK Set RTX option successfully.
 * @retval MtcCommonConstants::ZFAILED Set RTX option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRtxEnable
 */
  public static int Mtc_CallDbSetRtxEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetRtxEnable(bEnable);
  }

/**
 * @brief Get TMMBR option from database.
 *
 * @retval true Start TMMBR.
 * @retval false Do not start TMMBR.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetTmmbrEnable
 */
  public static boolean Mtc_CallDbGetTmmbrEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetTmmbrEnable();
  }

/**
 * @brief Set TMMBR option.
 *
 * @param [in] bEnable TMMBR option.
 *
 * @retval MtcCommonConstants::ZOK Set TMMBR option successfully.
 * @retval MtcCommonConstants::ZFAILED Set TMMBR option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetTmmbrEnable
 */
  public static int Mtc_CallDbSetTmmbrEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetTmmbrEnable(bEnable);
  }

/**
 * @brief Get audio rtcp-mux option from database.
 *
 * @retval true Start audio rtcp-mux.
 * @retval false Do not start audio rtcp-mux.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAudioRtcpMuxEnable
 */
  public static boolean Mtc_CallDbGetAudioRtcpMuxEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAudioRtcpMuxEnable();
  }

/**
 * @brief Set audio rtcp-mux option.
 *
 * @param [in] bEnable audio rtcp-mux option.
 *
 * @retval MtcCommonConstants::ZOK Set audio rtcp-mux option successfully.
 * @retval MtcCommonConstants::ZFAILED Set audio rtcp-mux option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAudioRtcpMuxEnable
 */
  public static int Mtc_CallDbSetAudioRtcpMuxEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAudioRtcpMuxEnable(bEnable);
  }

/**
 * @brief Get video rtcp-mux option from database.
 *
 * @retval true Start video rtcp-mux.
 * @retval false Do not start video rtcp-mux.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoRtcpMuxEnable
 */
  public static boolean Mtc_CallDbGetVideoRtcpMuxEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoRtcpMuxEnable();
  }

/**
 * @brief Set video rtcp-mux option.
 *
 * @param [in] bEnable video rtcp-mux option.
 *
 * @retval MtcCommonConstants::ZOK Set video rtcp-mux option successfully.
 * @retval MtcCommonConstants::ZFAILED Set video rtcp-mux option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoRtcpMuxEnable
 */
  public static int Mtc_CallDbSetVideoRtcpMuxEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoRtcpMuxEnable(bEnable);
  }

/**
 * @brief Get RPSI option from database.
 *
 * @retval true Start RPSI.
 * @retval false Do not start RPSI.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRpsiEnable
 */
  public static boolean Mtc_CallDbGetRpsiEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetRpsiEnable();
  }

/**
 * @brief Set RPSI option.
 *
 * @param [in] bEnable RPSI option.
 *
 * @retval MtcCommonConstants::ZOK Set RPSI option successfully.
 * @retval MtcCommonConstants::ZFAILED Set RPSI option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRpsiEnable
 */
  public static int Mtc_CallDbSetRpsiEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetRpsiEnable(bEnable);
  }

/**
 * @brief Get small NALU option from database.
 *
 * @retval true Enable small NALU.
 * @retval false Disable small NALU.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSmallNaluEnable
 */
  public static boolean Mtc_CallDbGetSmallNaluEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetSmallNaluEnable();
  }

/**
 * @brief Set small NALU option.
 *
 * @param [in] bEnable Small NALU option.
 *
 * @retval MtcCommonConstants::ZOK Set small NALU option successfully.
 * @retval MtcCommonConstants::ZFAILED Set small NALU option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSmallNaluEnable
 */
  public static int Mtc_CallDbSetSmallNaluEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetSmallNaluEnable(bEnable);
  }

/**
 * @brief Get packet time length from database.
 *
 * @return Packet time length.
 *
 * @see MtcCallDb::Mtc_CallDbSetPtime
 */
  public static int Mtc_CallDbGetPtime() {
    return MtcCallDbJNI.Mtc_CallDbGetPtime();
  }

/**
 * @brief Set packet time length.
 *
 * @param [in] iTimeLen Max packet time length.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetPtime
 */
  public static int Mtc_CallDbSetPtime(int iTimeLen) {
    return MtcCallDbJNI.Mtc_CallDbSetPtime(iTimeLen);
  }

/**
 * @brief Get max packet time length from database.
 *
 * @return Max packet time length.
 *
 * @see MtcCallDb::Mtc_CallDbSetMaxPtime
 */
  public static int Mtc_CallDbGetMaxPtime() {
    return MtcCallDbJNI.Mtc_CallDbGetMaxPtime();
  }

/**
 * @brief Set max packet time length.
 *
 * @param [in] iTimeLen Max packet time length.
 *
 * @retval MtcCommonConstants::ZOK Set successfully.
 * @retval MtcCommonConstants::ZFAILED Set failed.
 *
 * @see MtcCallDb::Mtc_CallDbGetMaxPtime
 */
  public static int Mtc_CallDbSetMaxPtime(int iTimeLen) {
    return MtcCallDbJNI.Mtc_CallDbSetMaxPtime(iTimeLen);
  }

/**
 * @brief Get the automatically accepted call option from database.
 *
 * @retval true Accept call automatically.
 * @retval false Do not accept call automatically.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAutoAcptCall
 */
  public static boolean Mtc_CallDbGetAutoAcptCall() {
    return MtcCallDbJNI.Mtc_CallDbGetAutoAcptCall();
  }

/**
 * @brief Set the automatically accepted call option.
 *
 * @param [in] bEnable Automatically accepted call option.
 *
 * @retval MtcCommonConstants::ZOK Set the option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAutoAcptCall
 */
  public static int Mtc_CallDbSetAutoAcptCall(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAutoAcptCall(bEnable);
  }

/**
 * @brief Get the callin while calling option from database.
 *
 * @retval true Enable callin while calling.
 * @retval false Disable callin while calling.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCwc
 */
  public static boolean Mtc_CallDbGetCwc() {
    return MtcCallDbJNI.Mtc_CallDbGetCwc();
  }

/**
 * @brief Set the callin while calling option.
 *
 * @param [in] bEnable Enable callin while calling.
 *
 * @retval MtcCommonConstants::ZOK Set the option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCwc
 */
  public static int Mtc_CallDbSetCwc(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetCwc(bEnable);
  }

/**
 * @brief Get the do not disturb option from database.
 *
 * @retval true Do not disturb.
 * @retval false Normal.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetDoNotDisturb
 */
  public static boolean Mtc_CallDbGetDoNotDisturb() {
    return MtcCallDbJNI.Mtc_CallDbGetDoNotDisturb();
  }

/**
 * @brief Set the do not disturb option.
 *
 * @param [in] bEnable The do not disturb option.
 *
 * @retval MtcCommonConstants::ZOK Set the option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetDoNotDisturb
 */
  public static int Mtc_CallDbSetDoNotDisturb(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetDoNotDisturb(bEnable);
  }

/**
 * @brief Get the call forward unconditional information.
 *
 * @param [out] ppcUri Unconditional call forward uri.
 *
 * @retval true Call forword on uncoditional enabled.
 * @retval false Call forword on uncoditional disabled.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCfuInfo
 */
  public static boolean Mtc_CallDbGetCfuInfo(MtcString ppcUri) {
    return MtcCallDbJNI.Mtc_CallDbGetCfuInfo(ppcUri);
  }

/**
 * @brief Set the call forward unconditional information.
 *
 * @param [in] bEnable Unconditional call forward option.
 * @param [in] pcUri Unconditional call forward URI.
 *
 * @retval MtcCommonConstants::ZOK Set call forward unconditional information successfully.
 * @retval MtcCommonConstants::ZFAILED Set call forward unconditional information failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCfuInfo
 */
  public static int Mtc_CallDbSetCfuInfo(boolean bEnable, String pcUri) {
    return MtcCallDbJNI.Mtc_CallDbSetCfuInfo(bEnable, pcUri);
  }

/**
 * @brief Get the call forward on busy information.
 *
 * @param [out] ppcUri On busy call forward uri.
 *
 * @retval true Call forword on busy enabled.
 * @retval false Call forword on busy disabled.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCfbInfo
 */
  public static boolean Mtc_CallDbGetCfbInfo(MtcString ppcUri) {
    return MtcCallDbJNI.Mtc_CallDbGetCfbInfo(ppcUri);
  }

/**
 * @brief Set the call forward on busy information.
 *
 * @param [in] bEnable On busy call forward option.
 * @param [in] pcUri On busy call forward URI.
 *
 * @retval MtcCommonConstants::ZOK Set call forward on busy information successfully.
 * @retval MtcCommonConstants::ZFAILED Set call forward on busy information failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCfbInfo
 */
  public static int Mtc_CallDbSetCfbInfo(boolean bEnable, String pcUri) {
    return MtcCallDbJNI.Mtc_CallDbSetCfbInfo(bEnable, pcUri);
  }

/**
 * @brief Get call forward on no answer information.
 *
 * @param [out] ppcUri No answer call forward uri.
 * @param [out] piWaitLen No answer call forward wait time length.
 *
 * @retval true Call forword on no answer enabled.
 * @retval false Call forword on no answer disabled.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetCfnaInfo
 */
  public static boolean Mtc_CallDbGetCfnaInfo(MtcString ppcUri, MtcNumber piWaitLen) {
    return MtcCallDbJNI.Mtc_CallDbGetCfnaInfo(ppcUri, piWaitLen);
  }

/**
 * @brief Set call forward no answer information.
 *
 * @param [in] bEnable No answer call forward option.
 * @param [in] pcUri No answer call forward URI.
 * @param [in] iWaitLen No answer call forward wait time length.
 *
 * @retval MtcCommonConstants::ZOK Set call forward no answer information successfully.
 * @retval MtcCommonConstants::ZFAILED Set call forward no answer information failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetCfnaInfo
 */
  public static int Mtc_CallDbSetCfnaInfo(boolean bEnable, String pcUri, int iWaitLen) {
    return MtcCallDbJNI.Mtc_CallDbSetCfnaInfo(bEnable, pcUri, iWaitLen);
  }

/**
 * @brief Get privacy option from database.
 *
 * @param [in] ucOpt Privacy option type, it can be one of MTC_PRIVACY_NONE,
 *                   MTC_PRIVACY_ID, MTC_PRIVACY_HEADER, MTC_PRIVACY_SESSION
 *                   and MTC_PRIVACY_CRITICAL.
 *
 * @retval true Corresponding privacy option is enable.
 * @retval false Corresponding privacy option is disable.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetPrivacyOpt
 */
  public static boolean Mtc_CallDbGetPrivacyOpt(short ucOpt) {
    return MtcCallDbJNI.Mtc_CallDbGetPrivacyOpt(ucOpt);
  }

/**
 * @brief Set privacy option from database.
 *
 * @param [in] ucOpt Privacy option type, it can be one of MTC_PRIVACY_NONE,
 *                   MTC_PRIVACY_ID, MTC_PRIVACY_HEADER, MTC_PRIVACY_SESSION
 *                   and MTC_PRIVACY_CRITICAL.
 * @param [in] bEnable true to enable corresponding privacy option.
 *
 * @retval MtcCommonConstants::ZOK Set the option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the option option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetPrivacyOpt
 */
  public static int Mtc_CallDbSetPrivacyOpt(short ucOpt, boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetPrivacyOpt(ucOpt, bEnable);
  }

/**
 * @brief Get symmetrical negotiation from database.
 *
 * @retval true Symmetrical negotiation is enable.
 * @retval false Symmetrical negotiation is disable.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSymNego
 */
  public static boolean Mtc_CallDbGetSymNego() {
    return MtcCallDbJNI.Mtc_CallDbGetSymNego();
  }

/**
 * @brief Set symmetrical negotiation.
 *
 * @param [in] bEnable true to enable symmetrical negotiation.
 *
 * @retval MtcCommonConstants::ZOK Set the option successfully.
 * @retval MtcCommonConstants::ZFAILED Set the option option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSymNego
 */
  public static int Mtc_CallDbSetSymNego(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetSymNego(bEnable);
  }

/**
 * @brief Get session timer information.
 *
 * @param [out] piType Session timer type, @ref MtcCallDbConstants::EN_MTC_DB_SESSION_TIME_OFF.
 * @param [out] piRefresherType Session timer refresher type, @ref MtcCallDbConstants::EN_MTC_DB_REFRESHER_DEFAULT.
 * @param [out] piTmrLen Session timer length.
 * @param [out] piMinTmrLen Min session timer length.
 *
 * @retval true Get session timer information successfully.
 * @retval false Get session timer information failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSessTmrInfo
 */
  public static int Mtc_CallDbGetSessTmrInfo(MtcNumber piType, MtcNumber piRefresherType, MtcNumber piTmrLen, MtcNumber piMinTmrLen) {
    return MtcCallDbJNI.Mtc_CallDbGetSessTmrInfo(piType, piRefresherType, piTmrLen, piMinTmrLen);
  }

/**
 * @brief Set session timer information.
 *
 * @param [in] iType Session timer type, @ref MtcCallDbConstants::EN_MTC_DB_SESSION_TIME_OFF.
 * @param [in] iRefresherType Session timer refresher type, @ref MtcCallDbConstants::EN_MTC_DB_REFRESHER_DEFAULT.
 * @param [in] iTmrLen Session timer length.
 * @param [in] iMinTmrLen Min session timer length.
 *
 * @retval MtcCommonConstants::ZOK Set the session timer successfully.
 * @retval MtcCommonConstants::ZFAILED Set the session timer failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSymNego
 */
  public static int Mtc_CallDbSetSessTmrInfo(int iType, int iRefresherType, int iTmrLen, int iMinTmrLen) {
    return MtcCallDbJNI.Mtc_CallDbSetSessTmrInfo(iType, iRefresherType, iTmrLen, iMinTmrLen);
  }

/**
 * @brief Get the Dscp Value of Voice Call service.
 *
 * @retval The Dscp Value of Voice Call service.
 * 
 * @see @ref MtcCallDb::Mtc_CallDbSetVoiceDscpValue
 */
  public static int Mtc_CallDbGetVoiceDscpValue() {
    return MtcCallDbJNI.Mtc_CallDbGetVoiceDscpValue();
  }

/**
 * @brief Get the Dscp Value of Video Call service.
 *
 * @retval The Dscp Value of Video Call service.
 * 
 * @see @ref MtcCallDb::Mtc_CallDbSetVideoDscpValue
 */
  public static int Mtc_CallDbGetVideoDscpValue() {
    return MtcCallDbJNI.Mtc_CallDbGetVideoDscpValue();
  }

/**
 * @brief Get the authorization for user to use best effort IP Voice Call service.
 *
 * @retval 0 Indicates that best effort IP Voice Call service is disabled.
 * @retval 1 Indicates that best effort IP Voice Call service is enabled for 
 *   non-3GPP/non-3GPP2 access only (e.g. Wi-Fi, xDSL).
 * @retval 2 Indicates that best effort IP Voice Call service is enabled for  
 *   non-3GPP/non-3GPP2 access (e.g. Wi-Fi, xDSL) and for LTE access.
 * @retval 3 Indicates that best effort IP Voice Call service is enabled for  
 *   non-3GPP/non-3GPP2 access (e.g. Wi-Fi, xDSL) and for LTE/HSPA access.
 * @retval 4 Indicates that best effort IP Voice Call service is enabled for ANY 
 *   access except 2G access.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRcsIpVoiceCallAuth
 */
  public static int Mtc_CallDbGetRcsIpVoiceCallAuth() {
    return MtcCallDbJNI.Mtc_CallDbGetRcsIpVoiceCallAuth();
  }

/**
 * @brief Get the authorization for user to use best effort IP Video Call service.
 *
 * @retval 0 Indicates that best effort IP Video Call service is disabled.
 * @retval 1 Indicates that best effort IP Video Call service is enabled for 
 *   non-3GPP/non-3GPP2 access only (e.g. Wi-Fi, xDSL).
 * @retval 2 Indicates that best effort IP Video Call service is enabled for  
 *   non-3GPP/non-3GPP2 access (e.g. Wi-Fi, xDSL) and for LTE access.
 * @retval 3 Indicates that best effort IP Video Call service is enabled for  
 *   non-3GPP/non-3GPP2 access (e.g. Wi-Fi, xDSL) and for LTE/HSPA access.
 * @retval 4 Indicates that best effort IP Video Call service is enabled for ANY 
 *   access except 2G access.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRcsIpVideoCallAuth
 */
  public static int Mtc_CallDbGetRcsIpVideoCallAuth() {
    return MtcCallDbJNI.Mtc_CallDbGetRcsIpVideoCallAuth();
  }

/**
 * @brief Get a device in RCS-AA mode whether it can initiate Voice calls even if the 
 *   recipient user does not show service capability for voice calls.
 *   It is required in devices that can function in RCS-AA mode.
 *   It will not be instantiated if the service provider does not support the best effort IP 
 *   Voice Call service.
 *
 * @retval true Indicates an IP Voice Call cannot be initiated if an error (480/404) 
 *   is returned to a request for the recipient user's service capabilities or service capabilities 
 *   do not indicate the support of IP Voice Call.
 * @retval false Indicates an IP Voice Call to be initiated even if an error (480/404) 
 *   is returned to a request for the recipient user?s service capabilities or service capabilities 
 *   do not indicate the support of IP Voice Call.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetIpCallBreakOut
 */
  public static boolean Mtc_CallDbGetIpCallBreakOut() {
    return MtcCallDbJNI.Mtc_CallDbGetIpCallBreakOut();
  }

/**
 * @brief Get a device in RCS-CS mode whether it can initiate Voice calls even if the 
 *   recipient user does not show service capability for voice calls.
 *   It is required in devices that can function in RCS-CS mode.
 *   It will not be instantiated if the service provider does not support the best effort IP 
 *   Voice Call service.
 *
 * @retval true Indicates an IP Voice Call cannot be initiated if an error (480/404) 
 *   is returned to a request for the recipient user's service capabilities or service capabilities 
 *   do not indicate the support of IP Voice Call.
 * @retval false Indicates an IP Voice Call to be initiated even if an error (480/404) 
 *   is returned to a request for the recipient user's service capabilities or service capabilities 
 *   do not indicate the support of IP Voice Call.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetIpCallBreakOutCs
 */
  public static boolean Mtc_CallDbGetIpCallBreakOutCs() {
    return MtcCallDbJNI.Mtc_CallDbGetIpCallBreakOutCs();
  }

/**
 * @brief Get a device in RCS-CS mode whether it can offer to upgrade a CS call to 
 *   an IP Video Call.
 *   It is required in devices that can function in RCS-CS mode.
 *   It is will not be instantiated if the service provider does not support the IP Video Call service.
 *
 * @retval true Indicates allow upgrade of CS Voice call to best effort IP Video Call.
 * @retval false does not allow upgrade of CS Voice call to best effort IP Video Call.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVCallUpgFromCs
 */
  public static boolean Mtc_CallDbGetVCallUpgFromCs() {
    return MtcCallDbJNI.Mtc_CallDbGetVCallUpgFromCs();
  }

/**
 * @brief Get an RCS-CS device whether it can initiate a best effort IP Video Call 
 *   upgrade without first tearing down the CS voice call.
 *   It is required in devices that can function in RCS-CS mode.
 *   It is will not be instantiated if the service provider does not support the IP Video Call service.
 *
 * @retval true Indicates a best effort IP Video Call can be initiated even before the CS voice 
 *    call is torn down.
 * @retval false Indicates a best effort IP Video Call can only be initiated once the CS voice 
 *   call has been torn down.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVCallUpgAttemptEarly
 */
  public static boolean Mtc_CallDbGetVCallUpgAttemptEarly() {
    return MtcCallDbJNI.Mtc_CallDbGetVCallUpgAttemptEarly();
  }

/**
 * @brief Get an RCS-AA or RCS-CS device whether it can initiate a best effort IP 
 *   Video Call upgrade even if service capability exchange fails with 480 Temporarily 
 *   Unavailable or 408 Timeout.
 *   It is required in devices that can function in RCS-AA mode or in RCS-CS mode.
 *   It is will not be instantiated if the service provider does not support the IP Video Call service.
 *
 * @retval true Indicates a best effort IP Video Call can be initiated even if 
 *   480/408 error is returned.
 * @retval false Indicates a best effort IP Video Call can only be initiated if the capability is 
 *   returned from the request for the recipient user's service capabilities.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetVCallUpgOnCapError
 */
  public static boolean Mtc_CallDbGetVCallUpgOnCapError() {
    return MtcCallDbJNI.Mtc_CallDbGetVCallUpgOnCapError();
  }

/**
 * @brief Set the Dscp Value of Voice Call service.
 *
 * @param [in] iVoiceDscpValue The Dscp Value of Voice Call service.the value range is 0~63.
 *
 * @retval MtcCommonConstants::ZOK Set Dscp Value of Voice Call service successfully.
 * @retval MtcCommonConstants::ZFAILED Set Dscp Value of Voice Call service failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVoiceDscpValue
 */
  public static int Mtc_CallDbSetVoiceDscpValue(int iVoiceDscpValue) {
    return MtcCallDbJNI.Mtc_CallDbSetVoiceDscpValue(iVoiceDscpValue);
  }

/**
 * @brief Set the Dscp Value of Video Call service.
 *
 * @param [in] iVoiceDscpValue The Dscp Value of Video Call service.the value range is 0~63.
 *
 * @retval MtcCommonConstants::ZOK Set Dscp Value of Video Call service successfully.
 * @retval MtcCommonConstants::ZFAILED Set Dscp Value of Video Call service failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVideoDscpValue
 */
  public static int Mtc_CallDbSetVideoDscpValue(int iVideoDscpValue) {
    return MtcCallDbJNI.Mtc_CallDbSetVideoDscpValue(iVideoDscpValue);
  }

/**
 * @brief Set the authorization for user to use best effort IP Voice Call service.
 *
 * @param [in] iRcsIpVoiceCallAuth The best effort IP Voice Call service type.
 *
 * @retval MtcCommonConstants::ZOK Set IP Voice Call service type successfully.
 * @retval MtcCommonConstants::ZFAILED Set IP Voice Call service type failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRcsIpVoiceCallAuth
 */
  public static int Mtc_CallDbSetRcsIpVoiceCallAuth(int iRcsIpVoiceCallAuth) {
    return MtcCallDbJNI.Mtc_CallDbSetRcsIpVoiceCallAuth(iRcsIpVoiceCallAuth);
  }

/**
 * @brief Set the authorization for user to use best effort IP Video Call service.
 *
 * @param [in] iRcsIpVideoCallAuth The best effort IP Video Call service type.
 *
 * @retval MtcCommonConstants::ZOK Set IP Video Call service type successfully.
 * @retval MtcCommonConstants::ZFAILED Set IP Video Call service type failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRcsIpVideoCallAuth
 */
  public static int Mtc_CallDbSetRcsIpVideoCallAuth(int iRcsIpVideoCallAuth) {
    return MtcCallDbJNI.Mtc_CallDbSetRcsIpVideoCallAuth(iRcsIpVideoCallAuth);
  }

/**
 * @brief Set a device in RCS-AA mode whether it can initiate Voice calls even if the 
 *   recipient user does not show service capability for voice calls.
 *   It is required in devices that can function in RCS-AA mode.
 *   It will not be instantiated if the service provider does not support the best effort IP 
 *   Voice Call service.
 *
 * @param [in] bIpCallBreakOut The initiate Voice calls enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetIpCallBreakOut
 */
  public static int Mtc_CallDbSetIpCallBreakOut(boolean bIpCallBreakOut) {
    return MtcCallDbJNI.Mtc_CallDbSetIpCallBreakOut(bIpCallBreakOut);
  }

/**
 * @brief Set a device in RCS-CS mode whether it can initiate Voice calls even if the 
 *   recipient user does not show service capability for voice calls.
 *   It is required in devices that can function in RCS-CS mode.
 *   It will not be instantiated if the service provider does not support the best effort IP 
 *   Voice Call service.
 *
 * @param [in] bIpCallBreakOutCs The initiate Voice calls enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetIpCallBreakOutCs
 */
  public static int Mtc_CallDbSetIpCallBreakOutCs(boolean bIpCallBreakOutCs) {
    return MtcCallDbJNI.Mtc_CallDbSetIpCallBreakOutCs(bIpCallBreakOutCs);
  }

/**
 * @brief Set a device in RCS-CS mode whether it can offer to upgrade a CS call to 
 *   an IP Video Call.
 *   It is required in devices that can function in RCS-CS mode.
 *   It is will not be instantiated if the service provider does not support the IP Video Call service.
 *
 * @param [in] bVCallUpgFromCs The upgrade enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVCallUpgFromCs
 */
  public static int Mtc_CallDbSetVCallUpgFromCs(boolean bVCallUpgFromCs) {
    return MtcCallDbJNI.Mtc_CallDbSetVCallUpgFromCs(bVCallUpgFromCs);
  }

/**
 * @brief Set an RCS-CS device whether it can initiate a best effort IP Video Call 
 *   upgrade without first tearing down the CS voice call.
 *   It is required in devices that can function in RCS-CS mode.
 *   It is will not be instantiated if the service provider does not support the IP Video Call service.
 *
 * @param [in] bVCallUpgAttemptEarly The upgrade enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVCallUpgAttemptEarly
 */
  public static int Mtc_CallDbSetVCallUpgAttemptEarly(boolean bVCallUpgAttemptEarly) {
    return MtcCallDbJNI.Mtc_CallDbSetVCallUpgAttemptEarly(bVCallUpgAttemptEarly);
  }

/**
 * @brief Set an RCS-AA or RCS-CS device whether it can initiate a best effort IP 
 *   Video Call upgrade even if service capability exchange fails with 480 Temporarily 
 *   Unavailable or 408 Timeout.
 *   It is required in devices that can function in RCS-AA mode or in RCS-CS mode.
 *   It is will not be instantiated if the service provider does not support the IP Video Call service.
 *
 * @param [in] bVCallUpgOnCapError The upgrade enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetVCallUpgOnCapError
 */
  public static int Mtc_CallDbSetVCallUpgOnCapError(boolean bVCallUpgOnCapError) {
    return MtcCallDbJNI.Mtc_CallDbSetVCallUpgOnCapError(bVCallUpgOnCapError);
  }

/**
 * @brief Get call prefix content.
 *
 * @return The string of call prefix content.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetPrefixCont
 */
  public static String Mtc_CallDbGetPrefixCont() {
    return MtcCallDbJNI.Mtc_CallDbGetPrefixCont();
  }

/**
 * @brief Set call prefix content.
 *
 * @param [in] pcPrefixCont Call prefix content.
 *
 * @retval MtcCommonConstants::ZOK Set the call prefix content successfull.
 * @retval MtcCommonConstants::ZFAILED Set the call prefix content failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetPrefixCont
 */
  public static int Mtc_CallDbSetPrefixCont(String pcPrefixCont) {
    return MtcCallDbJNI.Mtc_CallDbSetPrefixCont(pcPrefixCont);
  }

/**
 * @brief Get call prefix option.
 *
 * @return The call prefix option, @ref MtcCallDbConstants::EN_MTC_DB_PREFIX_OPT_NO_USE.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetPrefixOption
 */
  public static int Mtc_CallDbGetPrefixOption() {
    return MtcCallDbJNI.Mtc_CallDbGetPrefixOption();
  }

/**
 * @brief Set call prefix option.
 *
 * @param [in] iPrefixOpt Call prefix option, @ref MtcCallDbConstants::EN_MTC_DB_PREFIX_OPT_NO_USE.
 *
 * @retval MtcCommonConstants::ZOK Set the call prefix option successfull.
 * @retval MtcCommonConstants::ZFAILED Set the call prefix option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetPrefixOption
 */
  public static int Mtc_CallDbSetPrefixOption(int iPrefixOpt) {
    return MtcCallDbJNI.Mtc_CallDbSetPrefixOption(iPrefixOpt);
  }

/**
 * @brief Get the p-asserted-identity policy.
 *
 * @return The call p-asserted-identity policy, @ref MtcCallDbConstants::EN_MTC_DB_PAI_POLICY_SIP.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetPAIPolicy
 */
  public static int Mtc_CallDbGetPAIPolicy() {
    return MtcCallDbJNI.Mtc_CallDbGetPAIPolicy();
  }

/**
 * @brief Set the p-asserted-identity policy.
 *
 * @param [in] iPAIPolicy p-asserted-identity policy, @ref MtcCallDbConstants::EN_MTC_DB_PAI_POLICY_SIP.
 *
 * @retval MtcCommonConstants::ZOK Set the p-asserted-identity policy successfull.
 * @retval MtcCommonConstants::ZFAILED Set the p-asserted-identity policy failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetPAIPolicy
 */
  public static int Mtc_CallDbSetPAIPolicy(int iPAIPolicy) {
    return MtcCallDbJNI.Mtc_CallDbSetPAIPolicy(iPAIPolicy);
  }

/**
 * @brief Set RTP packet report option.
 *
 * @param [in] bEnable RTP packet report option.
 * @param [in] bAudio  Audio flag.
 * @param [in] bVideo Video flag.
 *
 * @retval MtcCommonConstants::ZOK Set RTP packet report option successfully.
 * @retval MtcCommonConstants::ZFAILED Set RTP packet report option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetRtpReportEnable
 */
  public static int Mtc_CallDbSetRtpReportEnable(boolean bEnable, boolean bAudio, boolean bVideo) {
    return MtcCallDbJNI.Mtc_CallDbSetRtpReportEnable(bEnable, bAudio, bVideo);
  }

/**
 * @brief Get RTP packet report option from database.
 *
 * @param [in] bVideo Video flag(true for video, false for audio).
 *
 * @retval true Start RTP packet  report.
 * @retval false Do not start RTP packet report.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetRtpReportEnable
 */
  public static boolean Mtc_CallDbGetRtpReportEnable(boolean bVideo) {
    return MtcCallDbJNI.Mtc_CallDbGetRtpReportEnable(bVideo);
  }

/**
 * @brief Get the H264 payload.
 *
 * @return The H264 payload(118-127 recommended).
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetH264Payload
 */
  public static int Mtc_CallDbGetH264Payload() {
    return MtcCallDbJNI.Mtc_CallDbGetH264Payload();
  }

/**
 * @brief Set the H264  payload.
 *
 * @param [in] iPayload The H264 payload(118-127 recommended).
 *
 * @retval MtcCommonConstants::ZOK Set the H264 payload successfully.
 * @retval MtcCommonConstants::ZFAILED Set the H264 payload failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetH264Payload
 */
  public static int Mtc_CallDbSetH264Payload(int iPayload) {
    return MtcCallDbJNI.Mtc_CallDbSetH264Payload(iPayload);
  }

/**
 * @brief Set SDK auto ring(send 18x) enable.
 *
 * @param [in] bEnable SDK auto ring(send 18x) enable option.
 *
 * @retval MtcCommonConstants::ZOK Set SDK auto ring(send 18x) enable option successfully.
 * @retval MtcCommonConstants::ZFAILED Set SDK auto ring(send 18x) enable option failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAutoRingEnable
 */
  public static int Mtc_CallDbSetAutoRingEnable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSetAutoRingEnable(bEnable);
  }

/**
 * @brief Get SDK auto ring(send 18x) enable option from database.
 *
 * @retval true SDK auto ring(send 18x) enable.
 * @retval false SDK auto ring(send 18x) disable.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAutoRingEnable
 */
  public static boolean Mtc_CallDbGetAutoRingEnable() {
    return MtcCallDbJNI.Mtc_CallDbGetAutoRingEnable();
  }

/**
 * @brief Set the audio stream direction type..
 *
 * @param [in] iType The audio stream direction type. @ref MtcCallDbConstants::EN_MTC_DB_STRM_DIR_NONE.
 *
 * @retval MtcCommonConstants::ZOK Set the audio stream direction type successfully.
 * @retval MtcCommonConstants::ZFAILED Set tthe audio stream direction type failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetAstrmDirectionType
 */
  public static int Mtc_CallDbSetAstrmDirectionType(int iType) {
    return MtcCallDbJNI.Mtc_CallDbSetAstrmDirectionType(iType);
  }

/**
 * @brief Get the audio stream direction type.
 *
 * @return The audio stream direction  type. @ref MtcCallDbConstants::EN_MTC_DB_STRM_DIR_NONE.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetAstrmDirectionType
 */
  public static int Mtc_CallDbGetAstrmDirectionType() {
    return MtcCallDbJNI.Mtc_CallDbGetAstrmDirectionType();
  }

/**
 * @brief Set 182 enable.
 *
 * @param [in] bEnable If true(default value),  UE will return 182 response if receiving an incoming 
 *                      call when it's in call; if false, UE will return 180 response if receiving
 *                      an incoming call when it's in call.
 *
 * @retval MtcCommonConstants::ZOK Set 182 enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set 182 enable flag failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGet182Enable
 */
  public static int Mtc_CallDbSet182Enable(boolean bEnable) {
    return MtcCallDbJNI.Mtc_CallDbSet182Enable(bEnable);
  }

/**
 * @brief Get get 182 enable state.
 *
 * @retval true(default value) UE will return 182 response if receiving an incoming call when it's in call.
 * @retval false UE will return 180 response if receiving an incoming call when it's in call.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSet182Enable
 */
  public static boolean Mtc_CallDbGet182Enable() {
    return MtcCallDbJNI.Mtc_CallDbGet182Enable();
  }

/**
 * @brief Get session subscribe user query event expires.
 *
 * @param [out] piExpire Expires timer length.
 *
 * @retval true Get subscribe user query event expires successfully.
 * @retval false Get subscribe user query event expires failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbSetSubsUserQueryExpire
 */
  public static int Mtc_CallDbGetSubsUserQueryExpire(MtcNumber piExpire) {
    return MtcCallDbJNI.Mtc_CallDbGetSubsUserQueryExpire(piExpire);
  }

/**
 * @brief Set subscribe user query event expires.
 *
 * @param [in] iExpire user query event expire timer length.
 *
 * @retval MtcCommonConstants::ZOK Set subscribe user query event expires successfully.
 * @retval MtcCommonConstants::ZFAILED Set subscribe user query event expires failed.
 *
 * @see @ref MtcCallDb::Mtc_CallDbGetSubsUserQueryExpire
 */
  public static int Mtc_CallDbSetSubsUserQueryExpire(int iExpire) {
    return MtcCallDbJNI.Mtc_CallDbSetSubsUserQueryExpire(iExpire);
  }

}
