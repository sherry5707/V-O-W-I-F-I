/**
 * @file MtcCliDbConstants.java
 * @brief MtcCliDbConstants constants
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcCliDbConstants constants
 */
public interface MtcCliDbConstants {
  public final static String MTC_PUSH_SERVER_IOS = "0"; /**< @brief push server of IOS */
  public final static String MTC_PUSH_SERVER_IOS_ICSS = "01"; /**< @brief push server of IOS by chinasofti */
  public final static String MTC_PUSH_SERVER_IOS_CMCC = "02"; /**< @brief push server of IOS by cmcc */
  public final static String MTC_PUSH_SERVER_IOS_CMIC = "03"; /**< @brief push server of IOS by cmic */
  public final static String MTC_PUSH_SERVER_IOS_COLLEGE = "04"; /**< @brief push server of IOS by college */
  public final static String MTC_PUSH_SERVER_IOS_HK = "05"; /**< @brief push server of IOS by Hong Kong */
  public final static String MTC_PUSH_SERVER_HUAWEI = "1"; /**< @brief push server of HUAWEI */
  public final static String MTC_PUSH_SERVER_XIAOMI = "2"; /**< @brief push server of XIAOMI */
  public final static String MTC_PUSH_SERVER_AOI = "3"; /**< @brief push server of AOI */
  // EN_MTC_TPT_TYPE 
  public final static int EN_MTC_TPT_UDP = 0; /**< @brief UDP transport */
  public final static int EN_MTC_TPT_TCP = EN_MTC_TPT_UDP + 1; /**< @brief TCP transport */
  public final static int EN_MTC_TPT_TLS = EN_MTC_TPT_TCP + 1; /**< @brief TLS transport */

  // EN_MTC_TLS_METHOD_TYPE 
  public final static int EN_MTC_TLS_METHOD_SSLV2 = 0; /**< @brief tls SSLv2 method */
  public final static int EN_MTC_TLS_METHOD_SSLV3 = EN_MTC_TLS_METHOD_SSLV2 + 1; /**< @brief tls SSLv3 method */
  public final static int EN_MTC_TLS_METHOD_SSLV23 = EN_MTC_TLS_METHOD_SSLV3 + 1; /**< @brief tls SSLv3(port v2) method */
  public final static int EN_MTC_TLS_METHOD_TLS1 = EN_MTC_TLS_METHOD_SSLV23 + 1; /**< @brief tls TLSv1.0 method */
  public final static int EN_MTC_TLS_METHOD_TLS1_1 = EN_MTC_TLS_METHOD_TLS1 + 1; /**< @brief tls TLSv1.1 method */
  public final static int EN_MTC_TLS_METHOD_TLS1_2 = EN_MTC_TLS_METHOD_TLS1_1 + 1; /**< @brief tls TLSv1.2 method */
  public final static int EN_MTC_TLS_METHOD_DTLS1 = EN_MTC_TLS_METHOD_TLS1_2 + 1; /**< @brief tls DTLSv1.0 method */

  // EN_MTC_TLS_VERY_TYPE 
  public final static int EN_MTC_TLS_VERY_NONE = 0; /**< @brief tls verify none */
  public final static int EN_MTC_TLS_VERY_OPTION = EN_MTC_TLS_VERY_NONE + 1; /**< @brief tls verify option */
  public final static int EN_MTC_TLS_VERY_OPTION_NO_CA = EN_MTC_TLS_VERY_OPTION + 1; /**< @brief tls verify option with no ca */
  public final static int EN_MTC_TLS_VERY_REQUIRE = EN_MTC_TLS_VERY_OPTION_NO_CA + 1; /**< @brief tls verify require */

  // EN_MTC_ACC_NET_TYPE 
  public final static int EN_MTC_ACC_NET_UNKNOWN = 0; /**< @brief unknown */
  public final static int EN_MTC_ACC_NET_IEEE_802_11 = EN_MTC_ACC_NET_UNKNOWN + 1; /**< @brief IEEE-802.11 */
  public final static int EN_MTC_ACC_NET_IEEE_802_11A = EN_MTC_ACC_NET_IEEE_802_11 + 1; /**< @brief IEEE-802.11a". */
  public final static int EN_MTC_ACC_NET_IEEE_802_11B = EN_MTC_ACC_NET_IEEE_802_11A + 1; /**< @brief IEEE-802.11b". */
  public final static int EN_MTC_ACC_NET_IEEE_802_11G = EN_MTC_ACC_NET_IEEE_802_11B + 1; /**< @brief IEEE-802.11g */
  public final static int EN_MTC_ACC_NET_IEEE_802_11N = EN_MTC_ACC_NET_IEEE_802_11G + 1; /**< @brief IEEE-802.11n */
  public final static int EN_MTC_ACC_NET_3GPP_GERAN = EN_MTC_ACC_NET_IEEE_802_11N + 1; /**< @brief 3GPP-GERAN". */
  public final static int EN_MTC_ACC_NET_3GPP_UTRAN_FDD = EN_MTC_ACC_NET_3GPP_GERAN + 1; /**< @brief 3GPP-UTRAN-FDD". */
  public final static int EN_MTC_ACC_NET_3GPP_UTRAN_TDD = EN_MTC_ACC_NET_3GPP_UTRAN_FDD + 1; /**< @brief 3GPP-UTRAN-TDD". */
  public final static int EN_MTC_ACC_NET_3GPP_E_UTRAN_FDD = EN_MTC_ACC_NET_3GPP_UTRAN_TDD + 1; /**< @brief 3GPP-E-UTRAN-FDD */
  public final static int EN_MTC_ACC_NET_3GPP_E_UTRAN_TDD = EN_MTC_ACC_NET_3GPP_E_UTRAN_FDD + 1; /**< @brief 3GPP-E-UTRAN-TDD */
  public final static int EN_MTC_ACC_NET_3GPP_UTRAN = EN_MTC_ACC_NET_3GPP_E_UTRAN_TDD + 1; /**< @brief 3GPP-UTRAN */
  public final static int EN_MTC_ACC_NET_3GPP_E_UTRAN = EN_MTC_ACC_NET_3GPP_UTRAN + 1; /**< @brief 3GPP-E-UTRAN */
  public final static int EN_MTC_ACC_NET_3GPP_WLAN = EN_MTC_ACC_NET_3GPP_E_UTRAN + 1; /**< @brief 3GPP-WLAN */
  public final static int EN_MTC_ACC_NET_3GPP_GAN = EN_MTC_ACC_NET_3GPP_WLAN + 1; /**< @brief 3GPP-GAN */
  public final static int EN_MTC_ACC_NET_3GPP_HSPA = EN_MTC_ACC_NET_3GPP_GAN + 1; /**< @brief 3GPP-HSPA */
  public final static int EN_MTC_ACC_NET_3GPP_CDMA2000 = EN_MTC_ACC_NET_3GPP_HSPA + 1; /**< @brief 3GPP-CDMA2000". */
  public final static int EN_MTC_ACC_NET_3GPP2_1X = EN_MTC_ACC_NET_3GPP_CDMA2000 + 1; /**< @brief 3GPP2-1X */
  public final static int EN_MTC_ACC_NET_3GPP2_1X_FEMTO = EN_MTC_ACC_NET_3GPP2_1X + 1; /**< @brief 3GPP2-1X-Femto */
  public final static int EN_MTC_ACC_NET_3GPP2_1X_HRPD = EN_MTC_ACC_NET_3GPP2_1X_FEMTO + 1; /**< @brief 3GPP2-1X-HRPD */
  public final static int EN_MTC_ACC_NET_3GPP2_UMB = EN_MTC_ACC_NET_3GPP2_1X_HRPD + 1; /**< @brief 3GPP2-UMB */
  public final static int EN_MTC_ACC_NET_ADSL = EN_MTC_ACC_NET_3GPP2_UMB + 1; /**< @brief ADSL */
  public final static int EN_MTC_ACC_NET_ADSL2 = EN_MTC_ACC_NET_ADSL + 1; /**< @brief ADSL2 */
  public final static int EN_MTC_ACC_NET_ADSL2X = EN_MTC_ACC_NET_ADSL2 + 1; /**< @brief ADSL2+ */
  public final static int EN_MTC_ACC_NET_RADSL = EN_MTC_ACC_NET_ADSL2X + 1; /**< @brief RADSL */
  public final static int EN_MTC_ACC_NET_SDSL = EN_MTC_ACC_NET_RADSL + 1; /**< @brief SDSL */
  public final static int EN_MTC_ACC_NET_HDSL = EN_MTC_ACC_NET_SDSL + 1; /**< @brief HDSL */
  public final static int EN_MTC_ACC_NET_HDSL2 = EN_MTC_ACC_NET_HDSL + 1; /**< @brief HDSL2 */
  public final static int EN_MTC_ACC_NET_G_SHDSL = EN_MTC_ACC_NET_HDSL2 + 1; /**< @brief G.SHDSL */
  public final static int EN_MTC_ACC_NET_VDSL = EN_MTC_ACC_NET_G_SHDSL + 1; /**< @brief VDSL */
  public final static int EN_MTC_ACC_NET_IDSL = EN_MTC_ACC_NET_VDSL + 1; /**< @brief IDSL */
  public final static int EN_MTC_ACC_NET_IEEE_802_3 = EN_MTC_ACC_NET_IDSL + 1; /**< @brief IEEE-802.3 */
  public final static int EN_MTC_ACC_NET_IEEE_802_3A = EN_MTC_ACC_NET_IEEE_802_3 + 1; /**< @brief IEEE-802.3a */
  public final static int EN_MTC_ACC_NET_IEEE_802_3E = EN_MTC_ACC_NET_IEEE_802_3A + 1; /**< @brief IEEE-802.3e */
  public final static int EN_MTC_ACC_NET_IEEE_802_3I = EN_MTC_ACC_NET_IEEE_802_3E + 1; /**< @brief IEEE-802.3i */
  public final static int EN_MTC_ACC_NET_IEEE_802_3J = EN_MTC_ACC_NET_IEEE_802_3I + 1; /**< @brief IEEE-802.3j */
  public final static int EN_MTC_ACC_NET_IEEE_802_3U = EN_MTC_ACC_NET_IEEE_802_3J + 1; /**< @brief IEEE-802.3u */
  public final static int EN_MTC_ACC_NET_IEEE_802_3AB = EN_MTC_ACC_NET_IEEE_802_3U + 1; /**< @brief IEEE-802.3ab */
  public final static int EN_MTC_ACC_NET_IEEE_802_3AE = EN_MTC_ACC_NET_IEEE_802_3AB + 1; /**< @brief IEEE-802.3ae */
  public final static int EN_MTC_ACC_NET_IEEE_802_3AK = EN_MTC_ACC_NET_IEEE_802_3AE + 1; /**< @brief IEEE-802.3ak */
  public final static int EN_MTC_ACC_NET_IEEE_802_3AQ = EN_MTC_ACC_NET_IEEE_802_3AK + 1; /**< @brief IEEE-802.3aq */
  public final static int EN_MTC_ACC_NET_IEEE_802_3AN = EN_MTC_ACC_NET_IEEE_802_3AQ + 1; /**< @brief IEEE-802.3an */
  public final static int EN_MTC_ACC_NET_IEEE_802_3Y = EN_MTC_ACC_NET_IEEE_802_3AN + 1; /**< @brief IEEE-802.3y */
  public final static int EN_MTC_ACC_NET_IEEE_802_3Z = EN_MTC_ACC_NET_IEEE_802_3Y + 1; /**< @brief IEEE-802.3z */
  public final static int EN_MTC_ACC_NET_GPON = EN_MTC_ACC_NET_IEEE_802_3Z + 1; /**< @brief GPON */
  public final static int EN_MTC_ACC_NET_XGPON1 = EN_MTC_ACC_NET_GPON + 1; /**< @brief XGPON1 */
  public final static int EN_MTC_ACC_NET_GSTN = EN_MTC_ACC_NET_XGPON1 + 1; /**< @brief GSTN */

  // EN_MTC_RCSE_SWITCH_TYPE 
  public final static int EN_MTC_RCSE_SWITCH_PERM = 0; /**< @brief the setting is shown permanently */
  public final static int EN_MTC_RCSE_SWITCH_ROAMING = EN_MTC_RCSE_SWITCH_PERM + 1; /**< @brief the setting is only shown during roaming */
  public final static int EN_MTC_RCSE_SWITCH_NEVER = EN_MTC_RCSE_SWITCH_ROAMING + 1; /**< @brief RCS Switch is never shown */

  // EN_MTC_IMS_AUTH_TYPE 
  public final static int EN_MTC_IMS_AUTH_UNKNOWN = 0; /**< @brief unknown */
  public final static int EN_MTC_IMS_AUTH_EARLY_IMS = EN_MTC_IMS_AUTH_UNKNOWN + 1; /**< @brief Early IMS */
  public final static int EN_MTC_IMS_AUTH_IMS_AKA = EN_MTC_IMS_AUTH_EARLY_IMS + 1; /**< @brief IMS AKA */
  public final static int EN_MTC_IMS_AUTH_SIP_DIGEST = EN_MTC_IMS_AUTH_IMS_AKA + 1; /**< @brief SIP DIGEST (without TLS) */

  // EN_MTC_REG_EXP_TYPE 
  public final static int EN_MTC_REG_EXP_CONTACT = 0; /**< @brief expires value in register CONTACT header(default) */
  public final static int EN_MTC_REG_EXP_ALONE = EN_MTC_REG_EXP_CONTACT + 1; /**< @brief expires value in register EXPIRES header */
  public final static int EN_MTC_REG_EXP_BOTH = EN_MTC_REG_EXP_ALONE + 1; /**< @brief expires value both in register  CONTACT & EXPIRES header */

  // EN_MTC_XCAP_AUTH_TYPE 
  public final static int EN_MTC_XCAP_AUTH_UNKNOWN = 0; /**< @brief unknown */
  public final static int EN_MTC_XCAP_AUTH_EARLY_IMS = EN_MTC_XCAP_AUTH_UNKNOWN + 1; /**< @brief early ims */
  public final static int EN_MTC_XCAP_AUTH_DIGEST = EN_MTC_XCAP_AUTH_EARLY_IMS + 1; /**< @brief digest */

  // EN_MTC_PA_AUTH_TYPE 
  public final static int EN_MTC_PA_AUTH_UNKNOW = 0; /**< @brief unknown */
  public final static int EN_MTC_PA_AUTH_DIGEST = EN_MTC_PA_AUTH_UNKNOW + 1; /**< @brief digest */
  public final static int EN_MTC_PA_AUTH_UA = EN_MTC_PA_AUTH_DIGEST + 1; /**< @brief unify authentication */

  // EN_MTC_PROFILE_AUTH_TYPE 
  public final static int EN_MTC_PROFILE_AUTH_UNKNOW = 0; /**< @brief unknown */
  public final static int EN_MTC_PROFILE_AUTH_DIGEST = EN_MTC_PROFILE_AUTH_UNKNOW + 1; /**< @brief digest */
  public final static int EN_MTC_PROFILE_AUTH_UA = EN_MTC_PROFILE_AUTH_DIGEST + 1; /**< @brief unify authentication */

  // EN_MTC_QRCARD_AUTH_TYPE 
  public final static int EN_MTC_QRCARD_AUTH_UNKNOW = 0; /**< @brief unknown */
  public final static int EN_MTC_QRCARD_AUTH_DIGEST = EN_MTC_QRCARD_AUTH_UNKNOW + 1; /**< @brief digest */
  public final static int EN_MTC_QRCARD_AUTH_UA = EN_MTC_QRCARD_AUTH_DIGEST + 1; /**< @brief unify authentication */

  // EN_MTC_URI_FMT_TYPE 
  public final static int EN_MTC_URI_FMT_TEL = 0; /**< @brief tel uri */
  public final static int EN_MTC_URI_FMT_SIP = EN_MTC_URI_FMT_TEL + 1; /**< @brief sip uri */

  // EN_MTC_DATA_BEARER_TYPE 
  public final static int EN_MTC_DATA_BEARER_UNKNOWN = 0; /**< @brief unknown */
  public final static int EN_MTC_DATA_BEARER_2G = EN_MTC_DATA_BEARER_UNKNOWN + 1; /**< @brief 2G */
  public final static int EN_MTC_DATA_BEARER_EDGE = EN_MTC_DATA_BEARER_2G + 1; /**< @brief EDGE */
  public final static int EN_MTC_DATA_BEARER_3G = EN_MTC_DATA_BEARER_EDGE + 1; /**< @brief 3G */
  public final static int EN_MTC_DATA_BEARER_HSPA = EN_MTC_DATA_BEARER_3G + 1; /**< @brief HSPA */
  public final static int EN_MTC_DATA_BEARER_LTE = EN_MTC_DATA_BEARER_HSPA + 1; /**< @brief LTE */
  public final static int EN_MTC_DATA_BEARER_WIFI = EN_MTC_DATA_BEARER_LTE + 1; /**< @brief WIFI */

  // EN_MTC_ROAM_TYPE 
  public final static int EN_MTC_ROAM_NONE = 0; /**< @brief none */
  public final static int EN_MTC_ROAM_INT = EN_MTC_ROAM_NONE + 1; /**< @brief international */
  public final static int EN_MTC_ROAM_NAT = EN_MTC_ROAM_INT + 1; /**< @brief national */

  // EN_MTC_KEEP_ALIVE_TYPE 
  public final static int EN_MTC_KEEP_ALIVE_DISABLE = 0; /**< @brief disable */
  public final static int EN_MTC_KEEP_ALIVE_SIP = EN_MTC_KEEP_ALIVE_DISABLE + 1; /**< @brief use SIP keep alive */
  public final static int EN_MTC_KEEP_ALIVE_OPTIONS = EN_MTC_KEEP_ALIVE_SIP + 1; /**< @brief use OPTIONS keep alive */

  // EN_MTC_MSRP_KEEP_ALIVE_TYPE 
  public final static int EN_MTC_MSRP_KEEP_ALIVE_DISABLE = 0; /**< @brief disable keep alive */
  public final static int EN_MTC_MSRP_KEEP_ALIVE_CRLN = EN_MTC_MSRP_KEEP_ALIVE_DISABLE + 1; /**< @brief use "\r\n\r\n" */
  public final static int EN_MTC_MSRP_KEEP_ALIVE_MSG = EN_MTC_MSRP_KEEP_ALIVE_CRLN + 1; /**< @brief use bodiless message */

  // EN_MTC_NAT_TRAVERSAL_TYPE 
  public final static int EN_MTC_NAT_TRAVERSAL_OFF = 0; /**< @brief not use Nat Traversal */
  public final static int EN_MTC_NAT_TRAVERSAL_STUN = EN_MTC_NAT_TRAVERSAL_OFF + 1; /**< @brief using STUN */
  public final static int EN_MTC_NAT_TRAVERSAL_TURN = EN_MTC_NAT_TRAVERSAL_STUN + 1; /**< @brief using TURN */
  public final static int EN_MTC_NAT_TRAVERSAL_ICE = EN_MTC_NAT_TRAVERSAL_TURN + 1; /**< @brief using ICE */

  // EN_MTC_STG_USETYPE 
  public final static int EN_MTC_STG_USETYPE_CLOSE = 0; /**< @brief close stg */
  public final static int EN_MTC_STG_USETYPE_OPEN = EN_MTC_STG_USETYPE_CLOSE + 1; /**< @brief open stg */

  // EN_MTC_STG_TRANSPORT 
  public final static int EN_MTC_STG_TRANSPORT_UDP = 0; /**< @brief udp tunnel */
  public final static int EN_MTC_STG_TRANSPORT_TCP = EN_MTC_STG_TRANSPORT_UDP + 1; /**< @brief tcp tunnel */
  public final static int EN_MTC_STG_TRANSPORT_TLS = EN_MTC_STG_TRANSPORT_TCP + 1; /**< @brief tls tunnel */
  public final static int EN_MTC_STG_TRANSPORT_DTLS = EN_MTC_STG_TRANSPORT_TLS + 1; /**< @brief dtls tunnel */

  // EN_MTC_UID_POLICY_TYPE 
  public final static int EN_MTC_UID_POLICY_DFT = 0; /* use uri for register */
  public final static int EN_MTC_UID_POLICY_FIRST = EN_MTC_UID_POLICY_DFT + 1; /* use uri in P-Associated-URI */
  public final static int EN_MTC_UID_POLICY_SIP_MSISDN = EN_MTC_UID_POLICY_FIRST + 1; /* use sip MSISDN uri in P-Associated-URI */
  public final static int EN_MTC_UID_POLICY_SIP_IMSI = EN_MTC_UID_POLICY_SIP_MSISDN + 1; /* use sip IMSI uri in P-Associated-URI */
  public final static int EN_MTC_UID_POLICY_TEL = EN_MTC_UID_POLICY_SIP_IMSI + 1; /* use tel uri in P-Associated-URI */
  public final static int EN_MTC_UID_POLICY_SIZE = EN_MTC_UID_POLICY_TEL + 1;

  // EN_MTC_ADDR_TYPE 
  public final static int EN_MTC_ADDR_IPV4 = 0; /* ipv4 adress */
  public final static int EN_MTC_ADDR_IPV6 = EN_MTC_ADDR_IPV4 + 1; /* ipv6 adress */
  public final static int EN_MTC_ADDR_FQDN = EN_MTC_ADDR_IPV6 + 1; /* fqdn */

  // EN_MTC_HTTP_PROXY_TYPE 
  public final static int EN_MTC_HTTP_PROXY_OFF = 0;
  public final static int EN_MTC_HTTP_PROXY_HTTP = EN_MTC_HTTP_PROXY_OFF + 1;
  public final static int EN_MTC_HTTP_PROXY_HTTPS = EN_MTC_HTTP_PROXY_HTTP + 1;

}
