/**
 * @file MtcImDb.java
 * @brief MtcImDb interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcImDb interface
 */
public class MtcImDb implements MtcImDbConstants {
/**
 * @brief MTC im db restore configuration of current user for speicifc mode.
 *
 * @param [in] iMode The combination of MtcProfConstants::EN_MTC_PROF_SERVICE_VOIP 
 *
 * This interface should be invoke after @ref MtcCli::Mtc_CliInit and 
 * @ref MtcCli::Mtc_CliOpen was called.
 *
 * @retval MtcCommonConstants::ZOK Restore provision successfully.
 * @retval MtcCommonConstants::ZFAILED Restore provision failed.
 */
  public static int Mtc_ImDbRestoreProvision(int iMode) {
    return MtcImDbJNI.Mtc_ImDbRestoreProvision(iMode);
  }

/**
 * @brief Get IM defer retrieve factory URI.
 *
 * @return The string of defer retrieve URI.
 * The caller must copy it, then use.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetDeferRetvUri
 */
  public static String Mtc_ImDbGetDeferRetvUri() {
    return MtcImDbJNI.Mtc_ImDbGetDeferRetvUri();
  }

/**
 * @brief Get IM defer delete factory URI.
 *
 * @return The string of defer delete URI.
 * The caller must copy it, then use.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetDeferDelUri
 */
  public static String Mtc_ImDbGetDeferDelUri() {
    return MtcImDbJNI.Mtc_ImDbGetDeferDelUri();
  }

/**
 * @brief Get IM imdn send delivery succeed request enable.
 *
 * @retval true Send delivery succeed request is enable.
 * @retval false Send delivery succeed request is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSendDeliSuccReqEnable
 */
  public static boolean Mtc_ImDbGetSendDeliSuccReqEnable() {
    return MtcImDbJNI.Mtc_ImDbGetSendDeliSuccReqEnable();
  }

/**
 * @brief Get IM imdn send delivery failed request enable.
 *
 * @retval true Send delivery failed request is enable.
 * @retval false Send delivery failed request is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSendDeliFailReqEnable
 */
  public static boolean Mtc_ImDbGetSendDeliFailReqEnable() {
    return MtcImDbJNI.Mtc_ImDbGetSendDeliFailReqEnable();
  }

/**
 * @brief Get IM imdn send delivery forwarded request enable.
 *
 * @retval true Send delivery forwarded request is enable.
 * @retval false Send delivery forwarded request is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSendDeliFwdReqEnable
 */
  public static boolean Mtc_ImDbGetSendDeliFwdReqEnable() {
    return MtcImDbJNI.Mtc_ImDbGetSendDeliFwdReqEnable();
  }

/**
 * @brief Get IM imdn send delivery succeed request enbale in group chat.
 *
 * @retval true Send delivery succeed request is enable.
 * @retval false Send delivery succeed request is diasble.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSendDeliSuccReqEnableG
 */
  public static boolean Mtc_ImDbGetSendDeliSuccReqEnableG() {
    return MtcImDbJNI.Mtc_ImDbGetSendDeliSuccReqEnableG();
  }

/**
 * @brief Get IM imdn send delivery failed request enable in group chat.
 *
 * @retval true Send delivery failed request is enable.
 * @retval false Send delivery failed request is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSendDeliFailReqEnableG
 */
  public static boolean Mtc_ImDbGetSendDeliFailReqEnableG() {
    return MtcImDbJNI.Mtc_ImDbGetSendDeliFailReqEnableG();
  }

/**
 * @brief Get IM imdn send display request enable in group chat.
 *
 * @retval true Send display request is enable.
 * @retval false Send display request is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSendDispReqEnableG
 */
  public static boolean Mtc_ImDbGetSendDispReqEnableG() {
    return MtcImDbJNI.Mtc_ImDbGetSendDispReqEnableG();
  }

/**
 * @brief Get IM imdn send display request enable.
 *
 * @retval true Send display request is enable.
 * @retval false Send display request is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSendDispReqEnable
 */
  public static boolean Mtc_ImDbGetSendDispReqEnable() {
    return MtcImDbJNI.Mtc_ImDbGetSendDispReqEnable();
  }

/**
 * @brief Get IM imdn send delivery response enable.
 *
 * @retval true Send delivery response is enable.
 * @retval false Send delivery response is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSendDeliRspEnable
 */
  public static boolean Mtc_ImDbGetSendDeliRspEnable() {
    return MtcImDbJNI.Mtc_ImDbGetSendDeliRspEnable();
  }

/**
 * @brief Get IM imdn send display response enable.
 *
 * @retval true Send display response is enable.
 * @retval false Send display response is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSendDispRspEnable
 */
  public static boolean Mtc_ImDbGetSendDispRspEnable() {
    return MtcImDbJNI.Mtc_ImDbGetSendDispRspEnable();
  }

/**
 * @brief Get IM imdn auto send delivery notification.
 *
 * @retval true Send delivery request is enable.
 * @retval false Send delivery request is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetImdnAutoSendDeliNtfy
 */
  public static boolean Mtc_ImDbGetImdnAutoSendDeliNtfy() {
    return MtcImDbJNI.Mtc_ImDbGetImdnAutoSendDeliNtfy();
  }

/**
 * @brief Get IM cpim base64 encode enable.
 *
 * @retval true base64 encode is enable.
 * @retval false base64 encode is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetCpimBase64EncodeEnable
 */
  public static boolean Mtc_ImDbGetCpimBase64EncodeEnable() {
    return MtcImDbJNI.Mtc_ImDbGetCpimBase64EncodeEnable();
  }

/**
 * @brief Get IM thumbnail base64 encode enable.
 *
 * @retval true base64 encode is enable.
 * @retval false base64 encode is disable.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetThumbBase64EncodeEnable
 */
  public static boolean Mtc_ImDbGetThumbBase64EncodeEnable() {
    return MtcImDbJNI.Mtc_ImDbGetThumbBase64EncodeEnable();
  }

/**
 * @brief Get IM pres-srv-cap enable.
 *
 * @retval true pres-srv-cap is enable.
 * @retval false pres-srv-cap is disable.
 */
  public static boolean Mtc_ImDbGetPresSrvCap() {
    return MtcImDbJNI.Mtc_ImDbGetPresSrvCap();
  }

/**
 * @brief Get IM max adhoc group size.
 *
 * @return The max adhoc group size.
 */
  public static int Mtc_ImDbGetMaxAdhocGroupSize() {
    return MtcImDbJNI.Mtc_ImDbGetMaxAdhocGroupSize();
  }

/**
 * @brief Get IM conference factory uri.
 *
 * @return The conference factory uri.
 */
  public static String Mtc_ImDbGetConfFctyUri() {
    return MtcImDbJNI.Mtc_ImDbGetConfFctyUri();
  }

/**
 * @brief Get IM exploder uri.
 *
 * @return The exploder uri.
 */
  public static String Mtc_ImDbGetExploderUri() {
    return MtcImDbJNI.Mtc_ImDbGetExploderUri();
  }

/**
 * @brief Get IM deferred msg func uri.
 *
 * @return The deferred msg func uri.
 */
  public static String Mtc_ImDbGetDeferredMsgFuncUri() {
    return MtcImDbJNI.Mtc_ImDbGetDeferredMsgFuncUri();
  }

/**
 * @brief Get IM multi-text uri.
 *
 * @return The multi-text uri.
 */
  public static String Mtc_ImDbGetMultiTextUri() {
    return MtcImDbJNI.Mtc_ImDbGetMultiTextUri();
  }

/**
 * @brief Get IM msgmatter-fcty-uri.
 *
 * @return The msgmatter-fcty-uri.
 */
  public static String Mtc_ImDbGetMsgMatterUri() {
    return MtcImDbJNI.Mtc_ImDbGetMsgMatterUri();
  }

/**
 * @brief Get IM the authorization for the user to use the chat service.
 *
 * @retval true Indicates that chat service is enabled.
 * @retval false Indicates that chat service is disabled.
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetChatAuth.
 */
  public static boolean Mtc_ImDbGetChatAuth() {
    return MtcImDbJNI.Mtc_ImDbGetChatAuth();
  }

/**
 * @brief Get IM the authorization for the user to use the group chat service.
 *
 * @retval true Indicates that group chat service is enabled.
 * @retval false Indicates that group chat service is disabled.
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetGroupChatAuth.
 */
  public static boolean Mtc_ImDbGetGroupChatAuth() {
    return MtcImDbJNI.Mtc_ImDbGetGroupChatAuth();
  }

/**
 * @brief Get IM the authorization for user to use the standalone messaging service.
 *
 * @retval true The standalone messaging service is provided and uses CPM.
 * @retval false The standalone messaging service is not provided.
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetStandaloneMsgAuth.
 */
  public static boolean Mtc_ImDbGetStandaloneMsgAuth() {
    return MtcImDbJNI.Mtc_ImDbGetStandaloneMsgAuth();
  }

/**
 * @brief Get IM whether the chat capability needs to be on independently of 
 *   whether or not the other end is registered.
 *
 * @retval true RCS Messaging Server based store and forward is enabled.
 * @retval false RCS Messaging Server based store and forward is disabled.
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetImCapAlwaysOn.
 */
  public static boolean Mtc_ImDbGetImCapAlwaysOn() {
    return MtcImDbJNI.Mtc_ImDbGetImCapAlwaysOn();
  }

/**
 * @brief Get IM whether the UX should alert the user that messages are handled 
 *   differently when the store and forward functionality is involved.
 *   It is required to be instantiated if a service provider enables Chat. 
 *
 * @retval true The user is made aware via the UX when the messages are deferred using S&F.
 * @retval false The user is not aware that messages are deferred.
 *  
 * @see @ref MtcImDb::Mtc_ImDbSetImWarnSf.
 */
  public static boolean Mtc_ImDbGetImWarnSf() {
    return MtcImDbJNI.Mtc_ImDbGetImWarnSf();
  }

/**
 * @brief Get IM whether the service provider for the device provides the full store 
 *   and forward feature for Group Chat.
 *   It is required to be instantiated if a service provider enables Group Chat. 
 *
 * @retval true Indicates support for Full Store and Forward for Group Chat.
 * @retval false Indicates no support for Full Store and Forward for Group Chat (default value).
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetGroupChatFullStandFwd.
 */
  public static boolean Mtc_ImDbGetGroupChatFullStandFwd() {
    return MtcImDbJNI.Mtc_ImDbGetGroupChatFullStandFwd();
  }

/**
 * @brief Get IM whether the service provider allows all users to be invited for a 
 *   group chat or only those that support the full store and forward feature for Group Chat.
 *   It is only relevant to be instantiated if a service provider enables Group Chat, but is not 
 *   required to be instantiated even then.
 *
 * @retval true Indicates that only users that support for Full Store and Forward may be 
 *   invited for Group Chat.
 * @retval false Indicates all users may be invited for Group Chat regardless of their 
 *   support for Full Store and Forward (default value).
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetGroupChatOnlyFStandFwd.
 */
  public static boolean Mtc_ImDbGetGroupChatOnlyFStandFwd() {
    return MtcImDbJNI.Mtc_ImDbGetGroupChatOnlyFStandFwd();
  }

/**
 * @brief Get IM whether the Chat capability needs to be on independently of 
 *   whether or not the other end is an RCS contact.
 *   It is required to be instantiated if a service provider enables Chat. 
 *
 * @retval true RCS Messaging Server based interworking is enabled.
 * @retval false RCS Messaging Server based interworking is disabled.
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetImCapNonRcs.
 */
  public static boolean Mtc_ImDbGetImCapNonRcs() {
    return MtcImDbJNI.Mtc_ImDbGetImCapNonRcs();
  }

/**
 * @brief Get IM whether the UX should alert the user that messages are handled 
 *   differently when the interworking functionality is involved.
 *   It is required to be instantiated if a service provider enables Chat. 
 *
 * @retval true The user is made aware via the UX when the messages are interworked to SMS/MMS.
 * @retval false The user is not aware that messages are interworked.
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetImWarnIw.
 */
  public static boolean Mtc_ImDbGetImWarnIw() {
    return MtcImDbJNI.Mtc_ImDbGetImWarnIw();
  }

/**
 * @brief Get IM the authorization for the device to propose automatically a SMS 
 *   fallback in case of chat initiation failure.
 *   It is required to be instantiated if a service provider enables 1-to-1 Chat.
 *
 * @retval true Indicates authorization is non ok.
 * @retval false Indicates authorization is ok.
 */
  public static boolean Mtc_ImDbGetSmsFallbackAuth() {
    return MtcImDbJNI.Mtc_ImDbGetSmsFallbackAuth();
  }

/**
 * @brief Get IM the automatic/manual chat session answer mode.
 *   It is required to be instantiated if a service provider enables 1-to-1 Chat.
 *
 * @retval true Indicates automatic answer mode (default value).
 * @retval false Indicates manual answer mode.
 */
  public static boolean Mtc_ImDbGetAutAccept() {
    return MtcImDbJNI.Mtc_ImDbGetAutAccept();
  }

/**
 * @brief Get IM parameter when the receiver client/device implementation should return the 
 *   200 OK initiating the MSRP session associated to a 1-to-1 chat.
 *   It is required to be instantiated if a service provider enables 1-to-1 Chat. 
 *
 * @retval 0 (RCS 5.1 default): 
 *   The 200 OK is sent when the receiver consumes the notification by opening the chat window.
 * @retval 1 (RCS Release 2-4 default): 
 *   The 200 OK is sent when the receiver starts to type a message to be sent back in the chat window.
 * @retval 2 (new option): 
 *   The 200 OK is sent when the receiver presses the button to send a message (That 
 *   is the message will be buffered in the client until the MSRP session is established).
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetImSessionStart.
 */
  public static int Mtc_ImDbGetImSessionStart() {
    return MtcImDbJNI.Mtc_ImDbGetImSessionStart();
  }

/**
 * @brief Get IM the automatic/manual Group Chat session answer mode.
 *   It is required to be instantiated if a service provider enables Group Chat.
 *
 * @retval true Indicates automatic answer mode (default value).
 * @retval false Indicates manual answer mode.
 */
  public static boolean Mtc_ImDbGetAutAcceptGroupChat() {
    return MtcImDbJNI.Mtc_ImDbGetAutAcceptGroupChat();
  }

/**
 * @brief Get IM controls whether the initial message in the chat is sent in a CPIM body of the 
 *   SIP INVITE request or can only be sent once the MSRP session has been set up.
 *   It is required to be instantiated if a service provider enables 1-to-1 Chat. 
 *
 * @retval true Indicates the message is added to the INVITE request as a CPIM body.
 * @retval false Indicates the message is sent in the MSRP.
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetFirstMsgInvite.
 */
  public static boolean Mtc_ImDbGetFirstMsgInvite() {
    return MtcImDbJNI.Mtc_ImDbGetFirstMsgInvite();
  }

/**
 * @brief Get IM the timeout for a chat session in idle mode (when there is no chat user activity).
 *   It is required to be instantiated if a service provider enables Chat.
 *
 * @return The timer value in seconds.
 */
  public static int Mtc_ImDbGetTimerIdle() {
    return MtcImDbJNI.Mtc_ImDbGetTimerIdle();
  }

/**
 * @brief Get IM the maximum authorized number of sessions established from the device. 
 *   Once this number is reached a new session may not be established anymore until 
 *   another session is torn down.
 *   It is required to be instantiated if a service provider enables Chat.
 *
 * @return The max number of concurrent sessions, when set to 0 this limit does not apply.
 */
  public static int Mtc_ImDbGetMaxConcurrentSession() {
    return MtcImDbJNI.Mtc_ImDbGetMaxConcurrentSession();
  }

/**
 * @brief Get IM controls whether or not the device can send and receive other content than 
 *   text in the chat session.
 *   It is not required to be instantiated if a service provider does not enable Chat.
 *
 * @retval true Indicates all content allowed by SIMPLE IM or CPM may be sent in the chat session.
 * @retval false Indicates the device can only sent and receive text content within the chat.
 */
  public static boolean Mtc_ImDbGetMultiMediaChat() {
    return MtcImDbJNI.Mtc_ImDbGetMultiMediaChat();
  }

/**
 * @brief Get IM the maximum authorized size of a content chat message in a 1-to-1 chat session.
 *   It is required to be instantiated if a service provider enables 1-to-1 Chat.
 *
 * @return The content maximum size in bytes.
 */
  public static int Mtc_ImDbGetMaxSize1To1() {
    return MtcImDbJNI.Mtc_ImDbGetMaxSize1To1();
  }

/**
 * @brief Set IM the maximum authorized size of a chat content message in a Group Chat session.
 *  It is required to be instantiated if a service provider enables Group Chat.
 *
 * @return The content maximum size in bytes.
 */
  public static int Mtc_ImDbSetMaxSize1ToM(int iMaxSize) {
    return MtcImDbJNI.Mtc_ImDbSetMaxSize1ToM(iMaxSize);
  }

/**
 * @brief Get IM the maximum authorized size of a chat content message in a Group Chat session.
 *  It is required to be instantiated if a service provider enables Group Chat.
 *
 * @return The content maximum size in bytes.
 */
  public static int Mtc_ImDbGetMaxSize1ToM() {
    return MtcImDbJNI.Mtc_ImDbGetMaxSize1ToM();
  }

/**
 * @brief Get IM the maximum authorized content size of a text or multimedia message.
 *
 * @return The content maximum size in bytes.
 */
  public static int Mtc_ImDbGetMaxSizeStandalone() {
    return MtcImDbJNI.Mtc_ImDbGetMaxSizeStandalone();
  }

/**
 * @brief Get IM the server url of the Network-based Common Message Store server.
 *
 * @return the server url for accessing the Message Store, 
 *   if set to an empty string, the Message Store is not available.
 */
  public static String Mtc_ImDbGetMsServerUrl() {
    return MtcImDbJNI.Mtc_ImDbGetMsServerUrl();
  }

/**
 * @brief Get IM the server port of the Network-based Common Message Store server.
 *
 * @return the server port for accessing the Message Store, 
 */
  public static int Mtc_ImDbGetMsServerPort() {
    return MtcImDbJNI.Mtc_ImDbGetMsServerPort();
  }

/**
 * @brief Get IM the TLS enable flag for accessing the Network-based Common Message Store server.
 *
 * @return the TLS enable flag for accessing the Message Store, 
 */
  public static boolean Mtc_ImDbGetMsUseTls() {
    return MtcImDbJNI.Mtc_ImDbGetMsUseTls();
  }

/**
 * @brief Get IM the if the message storage follow and support CMCC.
 *
 * @return cmcc support enable flag of the Message Store, 
 */
  public static boolean Mtc_ImDbGetMsCmccSupport() {
    return MtcImDbJNI.Mtc_ImDbGetMsCmccSupport();
  }

/**
 * @brief Get IM the authentication prot type of message store.
 *
 * @return authentication prot type of the Message Store, 
 */
  public static boolean Mtc_ImDbGetMsAuthProt() {
    return MtcImDbJNI.Mtc_ImDbGetMsAuthProt();
  }

/**
 * @brief Get IM the user name of the Network-based Common Message Store server.
 *
 * @return the user name for accessing the Message Store, 
 */
  public static String Mtc_ImDbGetMsUserName() {
    return MtcImDbJNI.Mtc_ImDbGetMsUserName();
  }

/**
 * @brief Get IM the user password for accessing the Network-based Common Message Store server.
 *
 * @return the user password for accessing the Message Store, 
 */
  public static String Mtc_ImDbGetMsUserPwd() {
    return MtcImDbJNI.Mtc_ImDbGetMsUserPwd();
  }

/**
 * @brief Get IM the user msidn for accessing the Network-based Common Message Store server.
 *
 * @return the user msidn for accessing the Message Store, 
 */
  public static String Mtc_ImDbGetMsUserMsisdn() {
    return MtcImDbJNI.Mtc_ImDbGetMsUserMsisdn();
  }

/**
 * @brief Get IM the cache directory for accessing the Network-based Common Message Store server.
 *
 * @return the cache directory for accessing the Message Store, 
 */
  public static String Mtc_ImDbGetMsCacheDir() {
    return MtcImDbJNI.Mtc_ImDbGetMsCacheDir();
  }

/**
 * @brief Get IM the group list version.
 *
 * @return group list version.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetGrpLstVers.
 */
  public static int Mtc_ImDbGetGrpLstVers() {
    return MtcImDbJNI.Mtc_ImDbGetGrpLstVers();
  }

/**
 * @brief Get IM the spam uri.
 *
 * @return the spam uri, 
 */
  public static String Mtc_ImDbGetSpamUri() {
    return MtcImDbJNI.Mtc_ImDbGetSpamUri();
  }

/**
 * @brief Get IM parameter allows selecting what technology is used for the chat 
 *   service in 1-1 chat and group chat as well as for the File Transfer service.
 *   It is required to be instantiated if a service provider enables Chat.
 *
 * @retval true CPM service is selected.
 * @retval false SIMPLE IM service is selected (default value).
 *
 * @see @ref MtcImDb::Mtc_ImDbSetImMsgTech.
 */
  public static boolean Mtc_ImDbGetImMsgTech() {
    return MtcImDbJNI.Mtc_ImDbGetImMsgTech();
  }

/**
 * @brief Get IM the authorization for user to use the File Transfer service.
 *
 * @retval true Indicates that File Transfer service is enabled.
 * @retval false Indicates that File Transfer service is disabled.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtAuth.
 */
  public static boolean Mtc_ImDbGetFtAuth() {
    return MtcImDbJNI.Mtc_ImDbGetFtAuth();
  }

/**
 * @brief Get IM the maximum authorized size of a file that can be transfers using 
 *   the RCS File Transfer service.
 *   It is required to be instantiated in case a service provider enables File Transfer.
 *
 * @return The maximum file size threshold (in KB) or 0 to disable the limit.
 */
  public static int Mtc_ImDbGetMaxSizeFileTr() {
    return MtcImDbJNI.Mtc_ImDbGetMaxSizeFileTr();
  }

/**
 * @brief Get IM the chat revoke timer be used to determines the maximum time
 *    that user can revoke the message had sended to somebody.
 * @return The Chat revoke timer value.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetImChatRevokeTimer.
 */
  public static int Mtc_ImDbGetImChatRevokeTimer() {
    return MtcImDbJNI.Mtc_ImDbGetImChatRevokeTimer();
  }

/**
 * @brief Get IM the cmcc chat revoke timer be used to determines the maximum time
 *    that user can revoke the message had sended to somebody.
 * @return The Cmcc Chat revoke timer value.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetImCmccChatRevokeTimer.
 */
  public static int Mtc_ImDbGetImCmccChatRevokeTimer() {
    return MtcImDbJNI.Mtc_ImDbGetImCmccChatRevokeTimer();
  }

/**
 * @brief Get IM the file transfer size threshold when the user should be 
*    warned about the potential charges associated to the transfer of a large file .
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @return The file size threshold (in KB) or 0 to disable the warning.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtWarnSize.
 */
  public static int Mtc_ImDbGetFtWarnSize() {
    return MtcImDbJNI.Mtc_ImDbGetFtWarnSize();
  }

/**
 * @brief Get IM controls whether or not the device can send and receive a thumbnail 
 *   in a File Transfer invitation
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @retval true The device may send or receive thumbnails in the File Transfer Invitation.
 * @retval false The device cannot send or receive a thumbnail in the File Transfer invitation 
 *   and should handle the capability exchange accordingly.
 */
  public static boolean Mtc_ImDbGetFtThumb() {
    return MtcImDbJNI.Mtc_ImDbGetFtThumb();
  }

/**
 * @brief Get IM whether the File Transfer store and forward functionality is enabled
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @retval true The file store and forward functionality is enabled and, consequently, 
 *   the file transfer store and forward capability is reported as available.
 * @retval false means the opposite, consequently, the capability is reported as not available.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtStAndFwEnabled.
 */
  public static boolean Mtc_ImDbGetFtStAndFwEnabled() {
    return MtcImDbJNI.Mtc_ImDbGetFtStAndFwEnabled();
  }

/**
 * @brief Get IM the maximum number of 1 to many recipient.
 *
 * @return the maximum 1 to many recipient.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetMax1ToNRecipient.
 */
  public static int Mtc_ImDbGetMax1ToNRecipient() {
    return MtcImDbJNI.Mtc_ImDbGetMax1ToNRecipient();
  }

/**
 * @brief Get IM the file transfer maximum number of 1 to many recipient.
 *
 * @return the file transfer maximum 1 to many recipient.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtMax1ToNRecipient.
 */
  public static int Mtc_ImDbGetFtMax1ToNRecipient() {
    return MtcImDbJNI.Mtc_ImDbGetFtMax1ToNRecipient();
  }

/**
 * @brief Get IM whether the file transfer capability needs to be on independently of 
 *   whether or not the other end is registered.
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @retval true RCS Messaging Server based store and forward is enabled.
 * @retval false RCS Messaging Server based store and forward is disabled.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtCapAlwaysOn.
 */
  public static boolean Mtc_ImDbGetFtCapAlwaysOn() {
    return MtcImDbJNI.Mtc_ImDbGetFtCapAlwaysOn();
  }

/**
 * @brief Get IM whether a File Transfer invitation can be automatically accepted.
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @retval true Indicates the File Transfer invitation shall be accepted if the size of the file 
 *   is smaller than the File Transfer warning size as configured by the FT WARN SIZE parameter.
 * @retval false Indicates automatic acceptance is not possible (regardless of the size of the file).
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtAutAccept.
 */
  public static boolean Mtc_ImDbGetFtAutAccept() {
    return MtcImDbJNI.Mtc_ImDbGetFtAutAccept();
  }

/**
 * @brief Get IM parameter configures the URI of the HTTP content server where files are 
 *   going to be uploaded on the originating side if the destination cannot accept within
 *   the validity period.
 *   Note: it is not required to be instantiated because it is not mandatory for a service provider 
 *   to have this originating solution based on a HTTP content server.
 *
 * @return The string containing the URI of the HTTP content server in charge of storing the files.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtHttpCsUri.
 */
  public static String Mtc_ImDbGetFtHttpCsUri() {
    return MtcImDbJNI.Mtc_ImDbGetFtHttpCsUri();
  }

/**
 * @brief Get IM parameter configures the user of the HTTP content server where files are 
 *   going to be uploaded on the originating side if the destination cannot accept within
 *   the validity period.
 *   Note: it is not required to be instantiated because it is not mandatory for a service provider 
 *   to have this originating solution based on a HTTP content server.
 *
 * @return The string containing the user of the HTTP content server in charge of storing the files.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtHttpCsUser.
 */
  public static String Mtc_ImDbGetFtHttpCsUser() {
    return MtcImDbJNI.Mtc_ImDbGetFtHttpCsUser();
  }

/**
 * @brief Get IM parameter configures the password of the HTTP content server where files are 
 *   going to be uploaded on the originating side if the destination cannot accept within
 *   the validity period.
 *   Note: it is not required to be instantiated because it is not mandatory for a service provider 
 *   to have this originating solution based on a HTTP content server.
 *
 * @return The string containing the password of the HTTP content server in charge of storing the files.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtHttpCsPwd.
 */
  public static String Mtc_ImDbGetFtHttpCsPwd() {
    return MtcImDbJNI.Mtc_ImDbGetFtHttpCsPwd();
  }

/**
 * @brief Get IM file transfer mechanism (MSRP or HTTP) shall be used by default 
 *   if both ends support both of them.
 *   It is required to be instantiated if a Service Provider enables File Transfer and configures 
 *   the URI for the HTTP content server to enable File Transfer using HTTP
 *
 * @return The file transfer mechanism type, see @ref MtcImDbConstants::EN_MTC_IM_FT_MECH_UNKNOWN.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtDefaultMech.
 */
  public static int Mtc_ImDbGetFtDefaultMech() {
    return MtcImDbJNI.Mtc_ImDbGetFtDefaultMech();
  }

/**
 * @brief Get IM file transfer download file path directory for save 
 *
 * @return The download file path directory.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtFileDirect.
 */
  public static String Mtc_ImDbGetFtFileDirect() {
    return MtcImDbJNI.Mtc_ImDbGetFtFileDirect();
  }

/**
 * @brief Get IM the authorization for user to use Image Share service.
 *
 * @retval true Indicates that Image Share service is enabled.
 * @retval false Indicates that Image Share service is disabled.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetIsAuth.
 */
  public static boolean Mtc_ImDbGetIsAuth() {
    return MtcImDbJNI.Mtc_ImDbGetIsAuth();
  }

/**
 * @brief Get IM the maximum authorized size of the content that can be sent in 
 *   an Image Share session .
 *
 * @return content maximum size in bytes, value equals to 0 means no limitation.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetMaxSizeImageShare.
 */
  public static int Mtc_ImDbGetMaxSizeImageShare() {
    return MtcImDbJNI.Mtc_ImDbGetMaxSizeImageShare();
  }

/**
 * @brief Get IM the ImageShareQuery for user to use Image Share service.
 *
 * @retval true Indicates that send query with sdp before Image Share.
 * @retval false Indicates that not send query before Image Share.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetImageShareQuery.
 */
  public static int Mtc_ImDbGetImageShareQuery() {
    return MtcImDbJNI.Mtc_ImDbGetImageShareQuery();
  }

/**
 * @brief Get IM media protocal type.
 *
 * @return media protocal type, @see @ref MtcImDbConstants::EN_MTC_IM_PROTO_MSRP_TCP.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetMediaProtoType.
 */
  public static int Mtc_ImDbGetMediaProtoType() {
    return MtcImDbJNI.Mtc_ImDbGetMediaProtoType();
  }

/**
 * @brief Get IM file transfer maxnumber running vusers.
 *
 * @return IM file transfer maxnumber running vusers.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetFtMaxRunVusers.
 */
  public static int Mtc_ImDbGetFtMaxRunVusers() {
    return MtcImDbJNI.Mtc_ImDbGetFtMaxRunVusers();
  }

/**
 * @brief Get IM use session mode message.
 *
 * @return IM use session mode message.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetUseSessModeMsg.
 */
  public static boolean Mtc_ImDbGetUseSessModeMsg() {
    return MtcImDbJNI.Mtc_ImDbGetUseSessModeMsg();
  }

/**
 * @brief Get IM get http get conference info server port.
 *
 * @return conference info server port.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetHttpGetConfInfoServPort.
 */
  public static int Mtc_ImDbGetHttpGetConfInfoServPort() {
    return MtcImDbJNI.Mtc_ImDbGetHttpGetConfInfoServPort();
  }

/**
 * @brief Get vemoticon version.
 *
 * @return The exploder uri.
 */
  public static String Mtc_ImDbGetVemMsgVersion() {
    return MtcImDbJNI.Mtc_ImDbGetVemMsgVersion();
  }

/**
 * @brief Get subscribe conference info expire.
 *
 * @return The subscribe expire.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetSubsConfInfoExpire.
 */
  public static int Mtc_ImDbGetSubsConfInfoExpire() {
    return MtcImDbJNI.Mtc_ImDbGetSubsConfInfoExpire();
  }

/**
 * @brief Get cc allowd terminal type.
 *
 * @return The allowd terminal type @ref MtcImDbConstants::EN_MTC_PMSG_ALLOWDTER_PC_NONE.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetCCAllowedTerminalType.
 */
  public static short Mtc_ImDbGetCCAllowedTerminalType() {
    return MtcImDbJNI.Mtc_ImDbGetCCAllowedTerminalType();
  }

/**
 * @brief Get IM allowed sms.
 *
 * @return IM allowed sms.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetAllowedSms.
 */
  public static boolean Mtc_ImDbGetAllowedSms() {
    return MtcImDbJNI.Mtc_ImDbGetAllowedSms();
  }

/**
 * @brief Get IM allowed offline.
 *
 * @return IM allowed offline.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetAllowedOffline.
 */
  public static boolean Mtc_ImDbGetAllowedOffline() {
    return MtcImDbJNI.Mtc_ImDbGetAllowedOffline();
  }

/**
 * @brief Get IM the supportive for the user to use the group chat service.
 *
 * @retval true Indicates that group chat service is enabled.
 * @retval false Indicates that group chat service is disabled.
 * 
 * @see @ref MtcImDb::Mtc_ImDbSetGroupChatSupt.
 */
  public static boolean Mtc_ImDbGetGroupChatSupt() {
    return MtcImDbJNI.Mtc_ImDbGetGroupChatSupt();
  }

/**
 * @brief Get gzip list number.
 *
 * @return The list number that list should be gziped.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetGzipListNumber
 */
  public static int Mtc_ImDbGetGzipListNumber() {
    return MtcImDbJNI.Mtc_ImDbGetGzipListNumber();
  }

/**
 * @brief get file transfer support inactive flag.
 *
 *
 * @retval true  if support inactive flag, otherwise retval false
 *
 */
  public static boolean Mtc_ImDbGetSupInactive() {
    return MtcImDbJNI.Mtc_ImDbGetSupInactive();
  }

/**
 * @brief Set IM defer retrieve factory URI.
 *
 * @param [in] pcUri defer retrieve URI.
 *
 * @retval MtcCommonConstants::ZOK Set defer retrieve URI successfully.
 * @retval MtcCommonConstants::ZFAILED Set defer retrieve URI failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetDeferRetvUri
 */
  public static int Mtc_ImDbSetDeferRetvUri(String pcUri) {
    return MtcImDbJNI.Mtc_ImDbSetDeferRetvUri(pcUri);
  }

/**
 * @brief Set IM defer delete factory URI.
 *
 * @param [in] pcUri defer delete URI.
 *
 * @retval MtcCommonConstants::ZOK Set defer delete URI successfully.
 * @retval MtcCommonConstants::ZFAILED Set defer delete URI failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetDeferDelUri
 */
  public static int Mtc_ImDbSetDeferDelUri(String pcUri) {
    return MtcImDbJNI.Mtc_ImDbSetDeferDelUri(pcUri);
  }

/**
 * @brief Set IM imdn send delivery succeed request enable.
 *
 * @param [in] bEnable send delivery succeed request enable.
 *
 * @retval MtcCommonConstants::ZOK Set send delivery succeed request enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set send delivery succeed request enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetSendDeliSuccReqEnable
*/
  public static int Mtc_ImDbSetSendDeliSuccReqEnable(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetSendDeliSuccReqEnable(bEnable);
  }

/**
 * @brief Set IM imdn send delivery failed request enable.
 *
 * @param [in] bEnable send delivery failed request enable.
 *
 * @retval MtcCommonConstants::ZOK Set send delivery failed request enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set send delivery failed request enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetSendDeliFailReqEnable
*/
  public static int Mtc_ImDbSetSendDeliFailReqEnable(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetSendDeliFailReqEnable(bEnable);
  }

/**
 * @brief Set IM imdn send delivery forwarded request enable.
 *
 * @param [in] bEnable send delivery forwarded request enable.
 *
 * @retval MtcCommonConstants::ZOK Set send delivery forwarded request enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set send delivery forwarded request enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetSendDeliFwdReqEnable
*/
  public static int Mtc_ImDbSetSendDeliFwdReqEnable(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetSendDeliFwdReqEnable(bEnable);
  }

/**
 * @brief Set IM imdn send delivery succeed request enable in group chat.
 *
 * @param [in] bEnable send delivery succeed request enable.
 *
 * @retval MtcCommonConstants::ZOK Set send delivery succeed request enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set send delivery succeed request enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetSendDeliSuccReqEnableG
*/
  public static int Mtc_ImDbSetSendDeliSuccReqEnableG(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetSendDeliSuccReqEnableG(bEnable);
  }

/**
 * @brief Set IM imdn send delivery failed request enable in group chat.
 *
 * @param [in] bEnable send delivery failed request enable.
 *
 * @retval MtcCommonConstants::ZOK Set send delivery failed request enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set send delivery failed request enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetSendDeliFailReqEnableG
*/
  public static int Mtc_ImDbSetSendDeliFailReqEnableG(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetSendDeliFailReqEnableG(bEnable);
  }

/**
 * @brief Set IM imdn send display request enable in group chat.
 *
 * @param [in] bEnable send display request enable.
 *
 * @retval MtcCommonConstants::ZOK Set send display request enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set send display request enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetSendDispReqEnableG
 */
  public static int Mtc_ImDbSetSendDispReqEnableG(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetSendDispReqEnableG(bEnable);
  }

/**
 * @brief Set IM imdn send display request enable.
 *
 * @param [in] bEnable send display request enable.
 *
 * @retval MtcCommonConstants::ZOK Set send display request enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set send display request enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetSendDispReqEnable
 */
  public static int Mtc_ImDbSetSendDispReqEnable(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetSendDispReqEnable(bEnable);
  }

/**
 * @brief Set IM imdn send delivery response enable.
 *
 * @param [in] bEnable send delivery response enable.
 *
 * @retval MtcCommonConstants::ZOK Set send delivery response enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set send delivery response enable failed.
 *
 * @see @ref Mtc_ImDbGetImdnSendDeliReqEnable
 */
  public static int Mtc_ImDbSetSendDeliRspEnable(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetSendDeliRspEnable(bEnable);
  }

/**
 * @brief Set IM imdn send display response enable.
 *
 * @param [in] bEnable send display response enable.
 *
 * @retval MtcCommonConstants::ZOK Set send display response enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set send display response enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetSendDispRspEnable
 */
  public static int Mtc_ImDbSetSendDispRspEnable(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetSendDispRspEnable(bEnable);
  }

/**
 * @brief Set IM imdn auto send delivery notification.
 *
 * @param [in] bEnable auto send delivery notification.
 *
 * @retval MtcCommonConstants::ZOK Set auto send delivery notification successfully.
 * @retval MtcCommonConstants::ZFAILED Set auto send delivery notification failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetImdnAutoSendDeliNtfy
 */
  public static int Mtc_ImDbSetImdnAutoSendDeliNtfy(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetImdnAutoSendDeliNtfy(bEnable);
  }

/**
 * @brief Set IM cpim base64 encode enable.
 *
 * @param [in] bEnable base64 encode enable.
 *
 * @retval MtcCommonConstants::ZOK Set base64 encode enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set base64 encode enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetCpimBase64EncodeEnable
 */
  public static int Mtc_ImDbSetCpimBase64EncodeEnable(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetCpimBase64EncodeEnable(bEnable);
  }

/**
 * @brief Set IM thumbnail base64 encode enable.
 *
 * @param [in] bEnable base64 encode enable.
 *
 * @retval MtcCommonConstants::ZOK Set base64 encode enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set base64 encode enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetThumbBase64EncodeEnable
 */
  public static int Mtc_ImDbSetThumbBase64EncodeEnable(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetThumbBase64EncodeEnable(bEnable);
  }

/**
 * @brief Set IM max adhoc group size.
 *
 * @param [in] iMaxAdhocGroupSize max adhoc group size.
 *
 * @retval MtcCommonConstants::ZOK Set max adhoc group size successfully.
 * @retval MtcCommonConstants::ZFAILED Set max adhoc group size failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMaxAdhocGroupSize
 */
  public static int Mtc_ImDbSetMaxAdhocGroupSize(int iMaxAdhocGroupSize) {
    return MtcImDbJNI.Mtc_ImDbSetMaxAdhocGroupSize(iMaxAdhocGroupSize);
  }

/**
 * @brief Set IM conference factory uri.
 *
 * @retval MtcCommonConstants::ZOK Set display enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set display enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetConfFctyUri
 */
  public static int Mtc_ImDbSetConfFctyUri(String pcConfFctyUri) {
    return MtcImDbJNI.Mtc_ImDbSetConfFctyUri(pcConfFctyUri);
  }

/**
 * @brief Set IM multi text uri.
 *
 * @retval MtcCommonConstants::ZOK Set multi text uri successfully.
 * @retval MtcCommonConstants::ZFAILED Set multi text uri failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMultiTextUri
 */
  public static int Mtc_ImDbSetMultiTextUri(String pcMultiTextUri) {
    return MtcImDbJNI.Mtc_ImDbSetMultiTextUri(pcMultiTextUri);
  }

/**
 * @brief Set IM msg matter uri.
 *
 * @retval MtcCommonConstants::ZOK Set msg matter uri successfully.
 * @retval MtcCommonConstants::ZFAILED Set msg matter uri failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsgMatterUri
 */
  public static int Mtc_ImDbSetMsgMatterUri(String pcMsgMatterUri) {
    return MtcImDbJNI.Mtc_ImDbSetMsgMatterUri(pcMsgMatterUri);
  }

/**
 * @brief Set IM the authorization for the user to use the chat service.
 *
 * @param [in] bChatAuth chat service enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetChatAuth.
 */
  public static int Mtc_ImDbSetChatAuth(boolean bChatAuth) {
    return MtcImDbJNI.Mtc_ImDbSetChatAuth(bChatAuth);
  }

/**
 * @brief Set IM the authorization for the user to use the group chat service.
 *
 * @param [in] bGroupChatAuth group chat service enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetGroupChatAuth.
 */
  public static int Mtc_ImDbSetGroupChatAuth(boolean bGroupChatAuth) {
    return MtcImDbJNI.Mtc_ImDbSetGroupChatAuth(bGroupChatAuth);
  }

/**
 * @brief Set IM the authorization for user to use the standalone messaging service.
 *
 * @param [in] bStandaloneMsgAuth standalone messaging service enable flag.
 * 
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetStandaloneMsgAuth.
 */
  public static int Mtc_ImDbSetStandaloneMsgAuth(boolean bStandaloneMsgAuth) {
    return MtcImDbJNI.Mtc_ImDbSetStandaloneMsgAuth(bStandaloneMsgAuth);
  }

/**
 * @brief Get IM whether the chat capability needs to be on independently of 
 *   whether or not the other end is registered.
 *
 * @param [in] bImCapAlwaysOn chat capability enable flag.
 * 
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetImCapAlwaysOn.
 */
  public static int Mtc_ImDbSetImCapAlwaysOn(boolean bImCapAlwaysOn) {
    return MtcImDbJNI.Mtc_ImDbSetImCapAlwaysOn(bImCapAlwaysOn);
  }

/**
 * @brief Set IM whether the UX should alert the user that messages are handled 
 *   differently when the store and forward functionality is involved.
 *   It is required to be instantiated if a service provider enables Chat. 
 *
 * @param [in] bImWarnSf chat warning enable flag.
 *  
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetImWarnSf.
 */
  public static int Mtc_ImDbSetImWarnSf(boolean bImWarnSf) {
    return MtcImDbJNI.Mtc_ImDbSetImWarnSf(bImWarnSf);
  }

/**
 * @brief Set IM whether the service provider for the device provides the full store 
 *   and forward feature for Group Chat.
 *   It is required to be instantiated if a service provider enables Group Chat. 
 *
 * @param [in] bGroupChatFullStandFwd Full Store and Forward for Group Chat enable flag.
 * 
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetGroupChatFullStandFwd.
 */
  public static int Mtc_ImDbSetGroupChatFullStandFwd(boolean bGroupChatFullStandFwd) {
    return MtcImDbJNI.Mtc_ImDbSetGroupChatFullStandFwd(bGroupChatFullStandFwd);
  }

/**
 * @brief Set IM whether the service provider allows all users to be invited for a 
 *   group chat or only those that support the full store and forward feature for Group Chat.
 *   It is only relevant to be instantiated if a service provider enables Group Chat, but is not 
 *   required to be instantiated even then.
 *
 * @param [in] bGroupChatOnlyFStandFwd users only support S&F to be invited enable flag.
 * 
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetGroupChatOnlyFStandFwd.
 */
  public static int Mtc_ImDbSetGroupChatOnlyFStandFwd(boolean bGroupChatOnlyFStandFwd) {
    return MtcImDbJNI.Mtc_ImDbSetGroupChatOnlyFStandFwd(bGroupChatOnlyFStandFwd);
  }

/**
 * @brief Set IM whether the Chat capability needs to be on independently of 
 *   whether or not the other end is an RCS contact.
 *   It is required to be instantiated if a service provider enables Chat. 
 *
 * @param [in] bImCapNonRcs RCS Messaging Server based interworking enable flag.
 * 
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetImCapNonRcs.
 */
  public static int Mtc_ImDbSetImCapNonRcs(boolean bImCapNonRcs) {
    return MtcImDbJNI.Mtc_ImDbSetImCapNonRcs(bImCapNonRcs);
  }

/**
 * @brief Set IM whether the UX should alert the user that messages are handled 
 *   differently when the interworking functionality is involved.
 *   It is required to be instantiated if a service provider enables Chat. 
 *
 * @param [in] bImWarnIw alert user enable flag.
 * 
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetImWarnIw.
 */
  public static int Mtc_ImDbSetImWarnIw(boolean bImWarnIw) {
    return MtcImDbJNI.Mtc_ImDbSetImWarnIw(bImWarnIw);
  }

/**
 * @brief Set IM the automatic/manual chat session answer mode.
 *   It is required to be instantiated if a service provider enables 1-to-1 Chat.
 *
 * @param [in] bAutAccept IM automatic/manual flag.
 * 
 * @retval MtcCommonConstants::ZOK Set session start type successfully.
 * @retval MtcCommonConstants::ZFAILED Set session start type failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetImSessionStart.
 */
  public static int Mtc_ImDbSetAutAccept(boolean bAutAccept) {
    return MtcImDbJNI.Mtc_ImDbSetAutAccept(bAutAccept);
  }

/**
 * @brief Set IM parameter when the receiver client/device implementation should return the 
 *   200 OK initiating the MSRP session associated to a 1-to-1 chat.
 *   It is required to be instantiated if a service provider enables 1-to-1 Chat. 
 *
 * @param [in] iImSessionStart session start type.
 * 
 * @retval MtcCommonConstants::ZOK Set session start type successfully.
 * @retval MtcCommonConstants::ZFAILED Set session start type failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetImSessionStart.
 */
  public static int Mtc_ImDbSetImSessionStart(int iImSessionStart) {
    return MtcImDbJNI.Mtc_ImDbSetImSessionStart(iImSessionStart);
  }

/**
 * @brief Set IM the automatic/manual Group Chat session answer mode.
 *   It is required to be instantiated if a service provider enables Group Chat.
 *
 * @param [in] bAutAcceptGroupChat The group chat auto accept flag.
 * 
 * @retval MtcCommonConstants::ZOK Set group chat auto accept successfully.
 * @retval MtcCommonConstants::ZFAILED Set group chat auto accept failed.
 */
  public static int Mtc_ImDbSetAutAcceptGroupChat(boolean bAutAcceptGroupChat) {
    return MtcImDbJNI.Mtc_ImDbSetAutAcceptGroupChat(bAutAcceptGroupChat);
  }

/**
 * @brief Set IM controls whether the initial message in the chat is sent in a CPIM body of the 
 *   SIP INVITE request or can only be sent once the MSRP session has been set up.
 *   It is required to be instantiated if a service provider enables 1-to-1 Chat. 
 *
 * @param [in] bFirstMessageInvite SIP INVITE request with message enable flag.
 * 
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFirstMsgInvite.
 */
  public static int Mtc_ImDbSetFirstMsgInvite(boolean bFirstMessageInvite) {
    return MtcImDbJNI.Mtc_ImDbSetFirstMsgInvite(bFirstMessageInvite);
  }

/**
 * @brief Set IM parameter allows selecting what technology is used for the chat 
 *   service in 1-1 chat and group chat as well as for the File Transfer service.
 *   It is required to be instantiated if a service provider enables Chat.
 *
 * @param [in] bImMsgTech if true use CPM, else user SIMPLE IM.
 *
 * @retval MtcCommonConstants::ZOK Set selection successfully.
 * @retval MtcCommonConstants::ZFAILED Set selection failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetImMsgTech.
 */
  public static int Mtc_ImDbSetImMsgTech(boolean bImMsgTech) {
    return MtcImDbJNI.Mtc_ImDbSetImMsgTech(bImMsgTech);
  }

/**
 * @brief Set IM the authorization for user to use the File Transfer service.
 *
 * @param [in] bFtAuth File Transfer service enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtAuth.
 */
  public static int Mtc_ImDbSetFtAuth(boolean bFtAuth) {
    return MtcImDbJNI.Mtc_ImDbSetFtAuth(bFtAuth);
  }

/**
 * @brief Get IM the file transfer size threshold when the user should be 
*    telled about the potential charges associated to the transfer of a large file .
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @param [in] iMaxSizeFileTr The file size threshold (in KB).
 *
 * @retval MtcCommonConstants::ZOK Set file size successfully.
 * @retval MtcCommonConstants::ZFAILED Set file size failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetMaxSizeFileTr.
 */
  public static int Mtc_ImDbSetMaxSizeFileTr(int iMaxSizeFileTr) {
    return MtcImDbJNI.Mtc_ImDbSetMaxSizeFileTr(iMaxSizeFileTr);
  }

/**
 * @brief Set IM the chat revoke timer be used to determines the maximum time
 *    that user can revoke the message had sended to somebody.
 * @return The Chat revoke timer value.
 *
 * @retval MtcCommonConstants::ZOK Set chat revoke timer successfully.
 * @retval MtcCommonConstants::ZFAILED Set chat revoke timer failed.
 */
  public static int Mtc_ImDbSetImChatRevokeTimer(int iImChatRevokeTimer) {
    return MtcImDbJNI.Mtc_ImDbSetImChatRevokeTimer(iImChatRevokeTimer);
  }

/**
 * @brief Set IM the Cmcc chat revoke timer be used to determines the maximum time
 *    that user can revoke the message had sended to somebody.
 * @return The Cmcc Chat revoke timer value.
 *
 * @retval MtcCommonConstants::ZOK Set Cmcc chat revoke timer successfully.
 * @retval MtcCommonConstants::ZFAILED Set Cmcc chat revoke timer failed.
 */
  public static int Mtc_ImDbSetImCmccChatRevokeTimer(int iImCmccChatRevokeTimer) {
    return MtcImDbJNI.Mtc_ImDbSetImCmccChatRevokeTimer(iImCmccChatRevokeTimer);
  }

/**
 * @brief Get IM the file transfer size threshold when the user should be 
 *   warned about the potential charges associated to the transfer of a large file .
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @param [in] iFtWarnSize The file size threshold (in KB).
 *
 * @retval MtcCommonConstants::ZOK Set file size successfully.
 * @retval MtcCommonConstants::ZFAILED Set file size failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtWarnSize.
 */
  public static int Mtc_ImDbSetFtWarnSize(int iFtWarnSize) {
    return MtcImDbJNI.Mtc_ImDbSetFtWarnSize(iFtWarnSize);
  }

/**
 * @brief Set IM the file transfer contain thumb.
 *
 * @param [in] bFtThumb The file contain thumb.
 *
 * @retval MtcCommonConstants::ZOK Set ftThumb successfully.
 * @retval MtcCommonConstants::ZFAILED ftThumb size failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtThumb.
 */
  public static int Mtc_ImDbSetFtThumb(boolean bFtThumb) {
    return MtcImDbJNI.Mtc_ImDbSetFtThumb(bFtThumb);
  }

/**
 * @brief Set IM whether the File Transfer store and forward functionality is enabled
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @param [in] bFtStAndFwEnabled file store and forward functionality enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtStAndFwEnabled.
 */
  public static int Mtc_ImDbSetFtStAndFwEnabled(boolean bFtStAndFwEnabled) {
    return MtcImDbJNI.Mtc_ImDbSetFtStAndFwEnabled(bFtStAndFwEnabled);
  }

/**
 * @brief Get IM maximum number of 1 to many recipient.
 *
 * @param [in] iMax1ToNRecipient The maximum number of 1 to many recipient.
 *
 * @retval MtcCommonConstants::ZOK Set maximum number successfully.
 * @retval MtcCommonConstants::ZFAILED Set maximum number failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMax1ToNRecipient.
 */
  public static int Mtc_ImDbSetMax1ToNRecipient(int iMax1ToNRecipient) {
    return MtcImDbJNI.Mtc_ImDbSetMax1ToNRecipient(iMax1ToNRecipient);
  }

/**
 * @brief Get IM file transfer maximum number of 1 to many recipient.
 *
 * @param [in] iMax1ToNRecipient The file transfer maximum number of 1 to many recipient.
 *
 * @retval MtcCommonConstants::ZOK Set maximum number successfully.
 * @retval MtcCommonConstants::ZFAILED Set maximum number failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtMax1ToNRecipient.
 */
  public static int Mtc_ImDbSetFtMax1ToNRecipient(int iFtMax1ToNRecipient) {
    return MtcImDbJNI.Mtc_ImDbSetFtMax1ToNRecipient(iFtMax1ToNRecipient);
  }

/**
 * @brief Set IM whether the file transfer capability needs to be on independently of 
 *   whether or not the other end is registered.
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @param [in] bFtCapAlwaysOn RCS Messaging Server based store and forward enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtCapAlwaysOn.
 */
  public static int Mtc_ImDbSetFtCapAlwaysOn(boolean bFtCapAlwaysOn) {
    return MtcImDbJNI.Mtc_ImDbSetFtCapAlwaysOn(bFtCapAlwaysOn);
  }

/**
 * @brief Set IM whether a File Transfer invitation can be automatically accepted.
 *   It is required to be instantiated if a service provider enables File Transfer.
 *
 * @param [in] bFtAutAccept File Transfer invitation auto accepted enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtAutAccept.
 */
  public static int Mtc_ImDbSetFtAutAccept(boolean bFtAutAccept) {
    return MtcImDbJNI.Mtc_ImDbSetFtAutAccept(bFtAutAccept);
  }

/**
 * @brief Set IM parameter configures the URI of the HTTP content server where files are 
 *   going to be uploaded on the originating side if the destination cannot accept within
 *   the validity period.
 *   Note: it is not required to be instantiated because it is not mandatory for a service provider 
 *   to have this originating solution based on a HTTP content server.
 *
 * @param [in] pcFtHttpCsUri The string containing the URI of the HTTP content server.
 *
 * @retval MtcCommonConstants::ZOK Set URI successfully.
 * @retval MtcCommonConstants::ZFAILED Set URI failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtHttpCsUri.
 */
  public static int Mtc_ImDbSetFtHttpCsUri(String pcFtHttpCsUri) {
    return MtcImDbJNI.Mtc_ImDbSetFtHttpCsUri(pcFtHttpCsUri);
  }

/**
 * @brief Set IM parameter configures the user of the HTTP content server where files are 
 *   going to be uploaded on the originating side if the destination cannot accept within
 *   the validity period.
 *   Note: it is not required to be instantiated because it is not mandatory for a service provider 
 *   to have this originating solution based on a HTTP content server.
 *
 * @param [in] pcFtHttpCsUser The string containing the user of the HTTP content server.
 *
 * @retval MtcCommonConstants::ZOK Set URI successfully.
 * @retval MtcCommonConstants::ZFAILED Set URI failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtHttpCsUser.
 */
  public static int Mtc_ImDbSetFtHttpCsUser(String pcFtHttpCsUser) {
    return MtcImDbJNI.Mtc_ImDbSetFtHttpCsUser(pcFtHttpCsUser);
  }

/**
 * @brief Set IM parameter configures the password of the HTTP content server where files are 
 *   going to be uploaded on the originating side if the destination cannot accept within
 *   the validity period.
 *   Note: it is not required to be instantiated because it is not mandatory for a service provider 
 *   to have this originating solution based on a HTTP content server.
 *
 * @param [in] pcFtHttpCsPwd The string containing the password of the HTTP content server.
 *
 * @retval MtcCommonConstants::ZOK Set URI successfully.
 * @retval MtcCommonConstants::ZFAILED Set URI failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtHttpCsPwd.
 */
  public static int Mtc_ImDbSetFtHttpCsPwd(String pcFtHttpCsPwd) {
    return MtcImDbJNI.Mtc_ImDbSetFtHttpCsPwd(pcFtHttpCsPwd);
  }

/**
 * @brief Set IM file transfer mechanism (MSRP or HTTP) shall be used by default 
 *   if both ends support both of them.
 *   It is required to be instantiated if a Service Provider enables File Transfer and configures 
 *   the URI for the HTTP content server to enable File Transfer using HTTP
 *
 * @param [in] iFtDefaultMech The file transfer mechanism type, see @ref MtcImDbConstants::EN_MTC_IM_FT_MECH_UNKNOWN.
 *
 * @retval MtcCommonConstants::ZOK Set file transfer mechanism type successfully.
 * @retval MtcCommonConstants::ZFAILED Set file transfer mechanism type failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtDefaultMech.
 */
  public static int Mtc_ImDbSetFtDefaultMech(int iFtDefaultMech) {
    return MtcImDbJNI.Mtc_ImDbSetFtDefaultMech(iFtDefaultMech);
  }

/**
 * @brief Set IM file transfer download file directory for save 
 *
 * @param [in] pcFileDirects The download file directory.
 
 * @retval MtcCommonConstants::ZOK Set download file path directory successfully.
 * @retval MtcCommonConstants::ZFAILED Set download file path directory failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtFileDirect.
 */
  public static int Mtc_ImDbSetFtFileDirect(String pcFileDirects) {
    return MtcImDbJNI.Mtc_ImDbSetFtFileDirect(pcFileDirects);
  }

/**
 * @brief Set IM the authorization for user to use Image Share service.
 *
 * @param [in] bIsAuth Image Share service enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetIsAuth.
 */
  public static int Mtc_ImDbSetIsAuth(boolean bIsAuth) {
    return MtcImDbJNI.Mtc_ImDbSetIsAuth(bIsAuth);
  }

/**
 * @brief Set IM the maximum authorized size of the content that can be sent in 
 *   an Image Share session .
 *
 * @param [in] iMaxSizeImageShare The content maximum size in bytes.
 *
 * @retval MtcCommonConstants::ZOK Set content maximum size successfully.
 * @retval MtcCommonConstants::ZFAILED Set content maximum size failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMaxSizeImageShare.
 */
  public static int Mtc_ImDbSetMaxSizeImageShare(int iMaxSizeImageShare) {
    return MtcImDbJNI.Mtc_ImDbSetMaxSizeImageShare(iMaxSizeImageShare);
  }

/**
 * @brief Set IM whether to send query with sdp before establishing Image Share session.
 *
 * @param [in] bImageShareQuery The query flage, 1 for send query before image share, 0 for not.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetImageShareQuery.
 */
  public static int Mtc_ImDbSetImageShareQuery(boolean bImageShareQuery) {
    return MtcImDbJNI.Mtc_ImDbSetImageShareQuery(bImageShareQuery);
  }

/**
 * @brief Set IM media protocol type.
 *
 * @param [in] iType The media protocol type, @see @ref MtcImDbConstants::EN_MTC_IM_PROTO_MSRP_TCP.
 *
 * @retval MtcCommonConstants::ZOK Set media protocol type successfully.
 * @retval MtcCommonConstants::ZFAILED Set media protocol type failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMediaProtoType.
 */
  public static int Mtc_ImDbSetMediaProtoType(int iType) {
    return MtcImDbJNI.Mtc_ImDbSetMediaProtoType(iType);
  }

/**
 * @brief Set IM file transfer maxnumber running vusers.
 *
 * @param [in] iMaxNum The file transfer maxnumber running vusers.
 *
 * @retval MtcCommonConstants::ZOK Set file transfer maxnumber running vusers successfully.
 * @retval MtcCommonConstants::ZFAILED Set file transfer maxnumber running vusers failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetFtMaxRunVusers.
 */
  public static int Mtc_ImDbSetFtMaxRunVusers(int iMaxNum) {
    return MtcImDbJNI.Mtc_ImDbSetFtMaxRunVusers(iMaxNum);
  }

/**
 * @brief Set IM set use session mode message.
 *
 * @param [in] bFlag The use session mode message.
 *
 * @retval MtcCommonConstants::ZOK Set use session mode message successfully.
 * @retval MtcCommonConstants::ZFAILED Set use session mode message failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetUseSessModeMsg.
 */
  public static int Mtc_ImDbSetUseSessModeMsg(boolean bFlag) {
    return MtcImDbJNI.Mtc_ImDbSetUseSessModeMsg(bFlag);
  }

/**
 * @brief Set vemoticon message version.
 *
 * @param [in] pcVersion The value of the version.
 *
 * @retval MtcCommonConstants::ZOK Set version  successfully.
 * @retval MtcCommonConstants::ZFAILED Set version failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetVemMsgVersion.
 */
  public static int Mtc_ImDbSetVemMsgVersion(String pcVersion) {
    return MtcImDbJNI.Mtc_ImDbSetVemMsgVersion(pcVersion);
  }

/**
 * @brief Set subscribe conference info expire.
 *
 * @param [in] iExpire subscribe expire.
 *
 * @retval MtcCommonConstants::ZOK Set expire successfully.
 * @retval MtcCommonConstants::ZFAILED Set expire failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetSubsConfInfoExpire.
 */
  public static int Mtc_ImDbSetSubsConfInfoExpire(int iExpire) {
    return MtcImDbJNI.Mtc_ImDbSetSubsConfInfoExpire(iExpire);
  }

/**
 * @brief Set server url of message store.
 *
 * @param [in] pcUrl the server url.
 *
 * @retval MtcCommonConstants::ZOK Set server url successfully.
 * @retval MtcCommonConstants::ZFAILED Set server url failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsServerUrl.
 */
  public static int Mtc_ImDbSetMsServerUrl(String pcUrl) {
    return MtcImDbJNI.Mtc_ImDbSetMsServerUrl(pcUrl);
  }

/**
 * @brief Set server port of message store.
 *
 * @param [in] wPort the server port.
 *
 * @retval MtcCommonConstants::ZOK Set server port successfully.
 * @retval MtcCommonConstants::ZFAILED Set server port failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsServerPort.
 */
  public static int Mtc_ImDbSetMsServerPort(int wPort) {
    return MtcImDbJNI.Mtc_ImDbSetMsServerPort(wPort);
  }

/**
 * @brief Set the TLS enable flag of message store.
 *
 * @param [in] bEnable the TLS enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set TLS enable successfully.
 * @retval MtcCommonConstants::ZFAILED Set TLS enable failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsUseTls.
 */
  public static int Mtc_ImDbSetMsUseTls(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetMsUseTls(bEnable);
  }

/**
 * @brief Set the CMCC support flag of message store.
 *
 * @param [in] bSupport the CMCC support flag.
 *
 * @retval MtcCommonConstants::ZOK Set CMCC support successfully.
 * @retval MtcCommonConstants::ZFAILED Set CMCC support failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsCmccSupport.
 */
  public static int Mtc_ImDbSetMsCmccSupport(boolean bSupport) {
    return MtcImDbJNI.Mtc_ImDbSetMsCmccSupport(bSupport);
  }

/**
 * @brief Set the authentication prot of message store.
 *
 * @param [in] bMsAuthProt the authentication prot flag.
 *
 * @retval MtcCommonConstants::ZOK Set authentication prot successfully.
 * @retval MtcCommonConstants::ZFAILED Set authentication prot failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsAuthProt.
 */
  public static int Mtc_ImDbSetMsAuthProt(boolean bMsAuthProt) {
    return MtcImDbJNI.Mtc_ImDbSetMsAuthProt(bMsAuthProt);
  }

/**
 * @brief Set the user name of message store.
 *
 * @param [in] pcUserName the user name.
 *
 * @retval MtcCommonConstants::ZOK Set user name successfully.
 * @retval MtcCommonConstants::ZFAILED Set user name failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsUserName.
 */
  public static int Mtc_ImDbSetMsUserName(String pcUserName) {
    return MtcImDbJNI.Mtc_ImDbSetMsUserName(pcUserName);
  }

/**
 * @brief Set the user password of message store.
 *
 * @param [in] pcUserPwd the user password.
 *
 * @retval MtcCommonConstants::ZOK Set user password successfully.
 * @retval MtcCommonConstants::ZFAILED Set user password failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsUserPwd.
 */
  public static int Mtc_ImDbSetMsUserPwd(String pcUserPwd) {
    return MtcImDbJNI.Mtc_ImDbSetMsUserPwd(pcUserPwd);
  }

/**
 * @brief Set the user msidn of message store.
 *
 * @param [in] pcUserMsisdn the user msidn.
 *
 * @retval MtcCommonConstants::ZOK Set user msidn successfully.
 * @retval MtcCommonConstants::ZFAILED Set user msidn failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsUserMsisdn.
 */
  public static int Mtc_ImDbSetMsUserMsisdn(String pcUserMsisdn) {
    return MtcImDbJNI.Mtc_ImDbSetMsUserMsisdn(pcUserMsisdn);
  }

/**
 * @brief Set the cache directory of message store.
 *
 * @param [in] pcCacheDir the cache directory.
 *
 * @retval MtcCommonConstants::ZOK Set cache directory successfully.
 * @retval MtcCommonConstants::ZFAILED Set cache directory failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsCacheDir.
 */
  public static int Mtc_ImDbSetMsCacheDir(String pcCacheDir) {
    return MtcImDbJNI.Mtc_ImDbSetMsCacheDir(pcCacheDir);
  }

/**
 * @brief Set the group list version.
 *
 * @param [in] iGrpLstVers group list version.
 *
 * @retval MtcCommonConstants::ZOK Set group list version successfully.
 * @retval MtcCommonConstants::ZFAILED Set group list version failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetGrpLstVers.
 */
  public static int Mtc_ImDbSetGrpLstVers(int iGrpLstVers) {
    return MtcImDbJNI.Mtc_ImDbSetGrpLstVers(iGrpLstVers);
  }

/**
 * @brief Set the im spam uri.
 *
 * @param [in] pcSpamUri the spam uri.
 *
 * @retval MtcCommonConstants::ZOK Set spam uri successfully.
 * @retval MtcCommonConstants::ZFAILED Set spam uri failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetMsCacheDir.
 */
  public static int Mtc_ImDbSetSpamUri(String pcSpamUri) {
    return MtcImDbJNI.Mtc_ImDbSetSpamUri(pcSpamUri);
  }

/**
 * @brief Get gzip list number.
 *
 * @param [in] iGzipLstNum The list number that list should be gziped.
 *
 * @retval MtcCommonConstants::ZOK Set the number successfully.
 * @retval MtcCommonConstants::ZFAILED Set the number failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetGzipListNumber
 */
  public static int Mtc_ImDbSetGzipListNumber(int iGzipLstNum) {
    return MtcImDbJNI.Mtc_ImDbSetGzipListNumber(iGzipLstNum);
  }

/**
 * @brief set file transfer support inactive flag.
 *
 * @param [in] bSupInactive support inactive flag.
 *
 * @retval MtcCommonConstants::ZOK  if Set file transfer support inactive flag successfully, otherwise retval MtcCommonConstants::ZFAILED
 *
 */
  public static int Mtc_ImDbSetSupInactive(boolean bSupInactive) {
    return MtcImDbJNI.Mtc_ImDbSetSupInactive(bSupInactive);
  }

/**

 * @brief set http set conference info server port.
 *
 * @param [in] pcHost the conference info server port.
 *
 * @retval MtcCommonConstants::ZOK Set port successfully.
 * @retval MtcCommonConstants::ZFAILED Set port failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetHttpGetConfInfoServPort.
 */
  public static int Mtc_ImDbSetHttpGetConfInfoServPort(int wPort) {
    return MtcImDbJNI.Mtc_ImDbSetHttpGetConfInfoServPort(wPort);
  }

/**

 * @brief set carbon copy allowd terminal type.
 *
 * @param [in] ucType the allowd terminal type.
 *
 * @retval MtcCommonConstants::ZOK Set allowd terminal successfully.
 * @retval MtcCommonConstants::ZFAILED Set allowd terminal failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetCCAllowedTerminalType.
 */
  public static int Mtc_ImDbSetCCAllowedTerminalType(short ucType) {
    return MtcImDbJNI.Mtc_ImDbSetCCAllowedTerminalType(ucType);
  }

/**
 * @brief Set allowed sms.
 *
 * @param [in] bAllowedSms the allowed sms flag.
 *
 * @retval MtcCommonConstants::ZOK Set allowed sms successfully.
 * @retval MtcCommonConstants::ZFAILED Set allowed sms failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetAllowedSms.
 */
  public static int Mtc_ImDbSetAllowedSms(boolean bAllowedSms) {
    return MtcImDbJNI.Mtc_ImDbSetAllowedSms(bAllowedSms);
  }

/**
 * @brief Set allowed offline.
 *
 * @param [in] bAllowedOffline the allowed offline flag.
 *
 * @retval MtcCommonConstants::ZOK Set allowed offline successfully.
 * @retval MtcCommonConstants::ZFAILED Set allowed offline failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetAllowedOffline.
 */
  public static int Mtc_ImDbSetAllowedOffline(boolean bAllowedOffline) {
    return MtcImDbJNI.Mtc_ImDbSetAllowedOffline(bAllowedOffline);
  }

/**
 * @brief Set allowed sms type.
 *
 * @param [in] iAllowedSmsType the allowed sms type, @see @ref MtcImDbConstants::EN_MTC_IM_ALLOWED_SMS_SERVER.
 *
 * @retval MtcCommonConstants::ZOK Set allowed sms type successfully.
 * @retval MtcCommonConstants::ZFAILED Set allowed sms type failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetAllowedSmsType.
 */
  public static int Mtc_ImDbSetAllowedSmsType(int iAllowedSmsType) {
    return MtcImDbJNI.Mtc_ImDbSetAllowedSmsType(iAllowedSmsType);
  }

/**
 * @brief Get allowed sms type.
 *
 * @return allowed sms type.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetAllowedSmsType.
 */
  public static int Mtc_ImDbGetAllowedSmsType() {
    return MtcImDbJNI.Mtc_ImDbGetAllowedSmsType();
  }

/**
 * @brief Set IM the supportive for the user to use the group chat service.
 *
 * @param [in] bGroupChatSupt group chat service enable flag.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetGroupChatSupt.
 */
  public static int Mtc_ImDbSetGroupChatSupt(boolean bGroupChatSupt) {
    return MtcImDbJNI.Mtc_ImDbSetGroupChatSupt(bGroupChatSupt);
  }

/**
 * @brief Set IM set use grp https enable.
 *
 * @param [in] bEnable enable https group manage.
 *
 * @retval MtcCommonConstants::ZOK Set enable flag successfully.
 * @retval MtcCommonConstants::ZFAILED Set enable flag failed.
 *
 * @see @ref MtcImDb::Mtc_ImDbGetGrpHttpsEnable.
 */
  public static int Mtc_ImDbSetGrpHttpsEnable(boolean bEnable) {
    return MtcImDbJNI.Mtc_ImDbSetGrpHttpsEnable(bEnable);
  }

/**
 * @brief Set IM get use grp https enable.
 *
 * @retval goup manage https flag.
 *
 * @see @ref MtcImDb::Mtc_ImDbSetGrpHttpsEnable.
 */
  public static boolean Mtc_ImDbGetGrpHttpsEnable() {
    return MtcImDbJNI.Mtc_ImDbGetGrpHttpsEnable();
  }

}
