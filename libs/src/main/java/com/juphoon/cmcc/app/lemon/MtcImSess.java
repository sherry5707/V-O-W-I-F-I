/**
 * @file MtcImSess.java
 * @brief MtcImSess interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcImSess interface
 */
public class MtcImSess implements MtcImSessConstants {
/**
 * @brief Establishing message session with one participant.
 *
 * If IM establishing successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessAcpted or @ref mtcImCbSessRejected.
 *
 * While receiving message session invitation, GUI will be notified by callback 
 * which was set by @ref mtcImCbSessRecvIvt.
 *
 * While session participant has updated, GUI will be notified by callback 
 * which was set by @ref mtcImCbSessPartpUpted.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcUri The participant URI.
 *
 * @return The message session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessEstab(Object zCookie, String pcSubject, String pcUri) {
    return MtcImSessJNI.Mtc_ImSessEstab(zCookie, pcSubject, pcUri);
  }

/**
 * @brief Establishing message session with one participant with the frist message in invite.
 *
 * If IM establishing successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessAcpted or @ref mtcImCbSessRejected.
 *
 * While receiving message session invitation, GUI will be notified by callback 
 * which was set by @ref mtcImCbSessRecvIvtM.
 *
 * While session participant has updated, GUI will be notified by callback 
 * which was set by @ref mtcImCbSessPartpUpted.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcMsg The user frist message.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 * @param [in] pcUri The participant URI.
 * @param [in,out] piMsgId The session message id.
 *
 * @return The message session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessEstabM(Object zCookie, String pcSubject, String pcMsg, int iMsgType, String pcUri, MtcNumber piMsgId) {
    return MtcImSessJNI.Mtc_ImSessEstabM(zCookie, pcSubject, pcMsg, iMsgType, pcUri, piMsgId);
  }

/**
 * @brief Establishing message session with one participant with the frist muti-media message in invite.
 *
 * If IM establishing successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessAcpted or @ref mtcImCbSessRejected.
 *
 * While receiving message session invitation, GUI will be notified by callback 
 * which was set by @ref mtcImCbSessRecvIvtM.
 *
 * While session participant has updated, GUI will be notified by callback 
 * which was set by @ref mtcImCbSessPartpUpted.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pData The user frist message.
 * @param [in] iDataSize The message lenth.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 * @param [in] pcUri The participant URI.
 * @param [in,out] piMsgId The session message id.
 *
 * @return The message session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessEstabMM(Object zCookie, String pcSubject, byte[] pData, int iMsgType, String pcUri, MtcNumber piMsgId) {
    return MtcImSessJNI.Mtc_ImSessEstabMM(zCookie, pcSubject, pData, iMsgType, pcUri, piMsgId);
  }

/**
 * @brief Establishing message session(ad-hoc) with URI-List.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcDispName The own display name in the ad-hoc.
 * @param [in] iPartpLstId The participant list id.
 *
 * @return The (ad-hoc) session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessEstabU(Object zCookie, String pcSubject, String pcDispName, int iPartpLstId) {
    return MtcImSessJNI.Mtc_ImSessEstabU(zCookie, pcSubject, pcDispName, iPartpLstId);
  }

/**
 * @brief Establishing message session with pre-defined group.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcGrpUri The pre-defined group uri.
 *
 * @return The pre-defined group session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessEstabP(Object zCookie, String pcSubject, String pcGrpUri) {
    return MtcImSessJNI.Mtc_ImSessEstabP(zCookie, pcSubject, pcGrpUri);
  }

/**
 * @brief Extending session from one-to-one to one-to-many.
 *
 * If IM establishing successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessAcpted or @ref mtcImCbSessRejected.
 *
 * While receiving message session invitation, GUI will be notified by callback 
 * which was set by @ref mtcImCbSessRecvIvt, and replace session id by
 * Mtc_ImSessGetRplSessId is not 0.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iOne2OneSessId The session id.
 * @param [in] iPartpLstId The participant list id.
 *
 * @return The ad-hoc session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessExtend(Object zCookie, int iOne2OneSessId, int iPartpLstId) {
    return MtcImSessJNI.Mtc_ImSessExtend(zCookie, iOne2OneSessId, iPartpLstId);
  }

/**
 * @brief Rejoin a group message session.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcDispName The own display name in group chat.
 * @param [in] pcGroupChatId The group chat id(Contribution-ID or Conversation-ID).
 * @param [in] pcSessIdentity The focus Session Identity.
 * @param [in] iVersionId The group chat version.
 *
 * @return The rejoin group session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessReJoinG(Object zCookie, String pcSubject, String pcDispName, String pcGroupChatId, String pcSessIdentity, int iVersionId) {
    return MtcImSessJNI.Mtc_ImSessReJoinG(zCookie, pcSubject, pcDispName, pcGroupChatId, pcSessIdentity, iVersionId);
  }

/**
 * @brief Rejoin a enterprise group message session.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcDispName The own display name in group chat.
 * @param [in] pcGroupChatId The group chat id(Contribution-ID or Conversation-ID).
 * @param [in] pcSessIdentity The focus Session Identity.
 * @param [in] iVersionId The group chat version.
 *
 * @return The rejoin group session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessReJoinGEP(Object zCookie, String pcSubject, String pcDispName, String pcGroupChatId, String pcSessIdentity, int iVersionId) {
    return MtcImSessJNI.Mtc_ImSessReJoinGEP(zCookie, pcSubject, pcDispName, pcGroupChatId, pcSessIdentity, iVersionId);
  }

/**
 * @brief Rejoin a party group message session.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcDispName The own display name in group chat.
 * @param [in] pcGroupChatId The group chat id(Contribution-ID or Conversation-ID).
 * @param [in] pcSessIdentity The focus Session Identity.
 * @param [in] iVersionId The group chat version.
 *
 * @return The rejoin group session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessReJoinGP(Object zCookie, String pcSubject, String pcDispName, String pcGroupChatId, String pcSessIdentity, int iVersionId) {
    return MtcImSessJNI.Mtc_ImSessReJoinGP(zCookie, pcSubject, pcDispName, pcGroupChatId, pcSessIdentity, iVersionId);
  }

/**
 * @brief restart a group message session.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcSubject The user subject.
 * @param [in] pcGroupChatId The group chat id(Contribution-ID or Conversation-ID).
 * @param [in] iPartpLstId The participant list id.
 *
 * @return The rejoin group session id when send message session invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessReStartG(Object zCookie, String pcSubject, String pcGroupChatId, int iPartpLstId) {
    return MtcImSessJNI.Mtc_ImSessReStartG(zCookie, pcSubject, pcGroupChatId, iPartpLstId);
  }

/**
 * @brief Adding one user to an IM conference session.
 *
 * If IM add successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessPartpAddOk.
 *
 * If IM add failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessPartpAddFailed.
 *
 * @param [in] iSessId The session id.
 * @param [in] pcUri The participant URI.
 *
 * @retval MtcCommonConstants::ZOK Adding one participant successfully.
 * @retval MtcCommonConstants::ZFAILED Adding one participant failed.
 */
  public static int Mtc_ImSessAddPartp(int iSessId, String pcUri) {
    return MtcImSessJNI.Mtc_ImSessAddPartp(iSessId, pcUri);
  }

/**
 * @brief Adding multi-users to an IM conference session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iPartpLstId The participant list id.
 *
 * @retval MtcCommonConstants::ZOK Adding multi-users successfully.
 * @retval MtcCommonConstants::ZFAILED Adding multi-users failed.
 */
  public static int Mtc_ImSessAddPartpU(int iSessId, int iPartpLstId) {
    return MtcImSessJNI.Mtc_ImSessAddPartpU(iSessId, iPartpLstId);
  }

/**
 * @brief Expelling one user from an IM conference session.
 *
 * If IM expel successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessPartpEplOk.
 *
 * If IM expel failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessPartpEplFailed.
 *
 * @param [in] iSessId The session id.
 * @param [in] pcUri The participant URI.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessAcpted or @ref mtcImCbSessRejected.
 *
 * @retval MtcCommonConstants::ZOK Expelling one user successfully.
 * @retval MtcCommonConstants::ZFAILED Expelling one user failed.
 */
  public static int Mtc_ImSessEplPartp(int iSessId, String pcUri) {
    return MtcImSessJNI.Mtc_ImSessEplPartp(iSessId, pcUri);
  }

/**
 * @brief Expelling muti-user from an IM conference session.
 *
 * If IM expel successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessPartpEplOk.
 *
 * If IM expel failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessPartpEplFailed.
 *
 * @param [in] iSessId The session id.
 * @param [in] iPartpLstId The participant list id.
 *
 * If IM send successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessAcpted or @ref mtcImCbSessRejected.
 *
 * @retval MtcCommonConstants::ZOK Expelling one user successfully.
 * @retval MtcCommonConstants::ZFAILED Expelling one user failed.
 */
  public static int Mtc_ImSessEplPartpU(int iSessId, int iPartpLstId) {
    return MtcImSessJNI.Mtc_ImSessEplPartpU(iSessId, iPartpLstId);
  }

/**
 * @brief Accept a message session invitation.
 *
 * @param [in] iSessId The session id.
 * @param [in] pcDispName The own display name in the group chat.
 *
 * @retval MtcCommonConstants::ZOK Accept message session successfully.
 * @retval MtcCommonConstants::ZFAILED Accept message session failed.
 */
  public static int Mtc_ImSessAccept(int iSessId, String pcDispName) {
    return MtcImSessJNI.Mtc_ImSessAccept(iSessId, pcDispName);
  }

/**
 * @brief Reject a message session invitation.
 *
 * @param [in] iSessId The session id.
 * @param [in] iReason Indicate the reject reason which may trigger some
 *                   service in S-CSCF, see @ref MtcImSessConstants::EN_MTC_IM_SESS_REJECT_REASON_BUSY.
 *
 * @retval MtcCommonConstants::ZOK Reject message session successfully.
 * @retval MtcCommonConstants::ZFAILED Reject message session failed.
 */
  public static int Mtc_ImSessReject(int iSessId, int iReason) {
    return MtcImSessJNI.Mtc_ImSessReject(iSessId, iReason);
  }

/**
 * @brief Cancel a message session.
 *
 * If IM cancel successfully, Remote GUI will be notified by callback which 
 * was set by @ref mtcImCbSessCanceled.
 *
 * @param [in] iSessId The session id.
 *
 * @retval MtcCommonConstants::ZOK Canceling message session successfully.
 * @retval MtcCommonConstants::ZFAILED Canceling message session failed.
 */
  public static int Mtc_ImSessCancel(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessCancel(iSessId);
  }

/**
 * @brief Leaving a message session.
 *
 * If IM cancel successfully, Remote GUI will be notified by callback which 
 * was set by @ref mtcImCbSessReleased.
 *
 * @param [in] iSessId The session id.
 *
 * @retval MtcCommonConstants::ZOK Leaving message session successfully.
 * @retval MtcCommonConstants::ZFAILED Leaving message session failed.
 */
  public static int Mtc_ImSessLeave(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessLeave(iSessId);
  }

/**
 * @brief Dissolve a group chat message session.
 *
 * If IM dissolve successfully, Remote GUI will be notified by callback which 
 * was set by @ref mtcImCbSessReleased.
 *
 * @param [in] iSessId The session id.
 *
 * @retval MtcCommonConstants::ZOK Dissolve group chat message session successfully.
 * @retval MtcCommonConstants::ZFAILED Dissolve group chat message session failed.
 */
  public static int Mtc_ImSessDissolve(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessDissolve(iSessId);
  }

/**
 * @brief Modify a message session subject.
 *
 * @param [in] iSessId The session id.
 * @param [in] pcSubject The session subject.
 *
 * @retval MtcCommonConstants::ZOK Modify subject successfully.
 * @retval MtcCommonConstants::ZFAILED Modify subject failed.
 */
  public static int Mtc_ImSessMdfySubject(int iSessId, String pcSubject) {
    return MtcImSessJNI.Mtc_ImSessMdfySubject(iSessId, pcSubject);
  }

/**
 * @brief Modify a group chat message session chairman.
 *
 * @param [in] iSessId The session id.
 * @param [in] pcUri The Uri of new chairman, if the value is null, 
 *                     server will randomly assign a chairman.
 *
 * @retval MtcCommonConstants::ZOK Modify chairman successfully.
 * @retval MtcCommonConstants::ZFAILED Modify chairman failed.
 */
  public static int Mtc_ImSessMdfyChairMan(int iSessId, String pcUri) {
    return MtcImSessJNI.Mtc_ImSessMdfyChairMan(iSessId, pcUri);
  }

/**
 * @brief Accept modify a group chat message session chairman.
 *
 * @param [in] iSessId The session id.
 *
 * @retval MtcCommonConstants::ZOK Accept successfully.
 * @retval MtcCommonConstants::ZFAILED Accept failed.
 */
  public static int Mtc_ImSessAcptMdfyChairMan(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessAcptMdfyChairMan(iSessId);
  }

/**
 * @brief Reject modify a group chat message session chairman.
 *
 * @param [in] iSessId The session id.
 *
 * @retval MtcCommonConstants::ZOK Reject successfully.
 * @retval MtcCommonConstants::ZFAILED Reject failed.
 */
  public static int Mtc_ImSessRjctMdfyChairMan(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessRjctMdfyChairMan(iSessId);
  }

/**
 * @brief Modify own display name in a group chat message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] pcDispName The own new display name in group chat.
 *
 * @retval MtcCommonConstants::ZOK Modify display name successfully.
 * @retval MtcCommonConstants::ZFAILED Modify display name failed.
 */
  public static int Mtc_ImSessMdfyDispName(int iSessId, String pcDispName) {
    return MtcImSessJNI.Mtc_ImSessMdfyDispName(iSessId, pcDispName);
  }

/**
 * @brief Get user cookie from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return User cookie.
 */
  public static Object Mtc_ImSessGetCookie(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetCookie(iSessId);
  }

/**
 * @brief Set user cookie in a message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie of message session.
 *
 * @retval MtcCommonConstants::ZOK Set user cookie successfully.
 * @retval MtcCommonConstants::ZFAILED Set user cookie failed.
 */
  public static int Mtc_ImSessSetCookie(int iSessId, Object zCookie) {
    return MtcImSessJNI.Mtc_ImSessSetCookie(iSessId, zCookie);
  }

/**
 * @brief Get session state from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return Session state, @see @ref MtcImSessConstants::EN_MTC_IM_SESS_STAT_UNKNOWN.
 */
  public static int Mtc_ImSessGetState(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetState(iSessId);
  }

/**
 * @brief Get user subject from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return User subject.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetSubject(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetSubject(iSessId);
  }

/**
 * @brief Get user display name from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return User display name.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetDispName(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetDispName(iSessId);
  }

/**
 * @brief MTC Get participant type from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return Type of IM message session participant, see @ref MtcPartpConstants::EN_MTC_PARTP_LST_ONE.
 *
 * If type is @ref EN_MTC_PARTP_LST_ONE, participant can be got by @ref MtcImSess::Mtc_ImSessGetPartp.
 * If type is @ref EN_MTC_PARTP_LST_PREDEF_GRP, participant can be got by @ref MtcImSess::Mtc_ImSessGetPartp.
 * If type is @ref EN_MTC_PARTP_LST_URI_LST, participant can be got by @ref MtcImSess::Mtc_ImSessGetPartpLstId.
 */
  public static int Mtc_ImSessGetPartpType(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetPartpType(iSessId);
  }

/**
 * @brief MTC Get participant information from message session.
 *
 * The participant is the remote client who is joining session.
 *
 * @param [in] iSessId The session id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get participant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get participant information failed.
 */
  public static int Mtc_ImSessGetPartp(int iSessId, MtcString ppcName, MtcString ppcUri) {
    return MtcImSessJNI.Mtc_ImSessGetPartp(iSessId, ppcName, ppcUri);
  }

/**
 * @brief Get participant list id from message session.
 *
 * The participant list id is all remote clients who are joining session.
 *
 * @param [in] iSessId The session id.
 *
 * @return The participant list id on succeed or 0 on failed.
 *
 *  The caller is responsible for freeing it by @ref MtcPartp::Mtc_PartpLstDelete.
 */
  public static int Mtc_ImSessGetPartpLstId(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetPartpLstId(iSessId);
  }

/**
 * @brief Get original participant URI from message session.
 *
 * The participant is the session initiator who initialized this message session.
 * It will return local URI if local client is the session initiator.
 * It will return From uri from session invitation information.
 *
 * @param [in] iSessId The session id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImSessGetOrigPartp(int iSessId, MtcString ppcName, MtcString ppcUri) {
    return MtcImSessJNI.Mtc_ImSessGetOrigPartp(iSessId, ppcName, ppcUri);
  }

/**
 * @brief Get original identity of participant URI from message session.
 *
 * The participant is the session initiator who initialized this message session.
 * It will return local URI if local client is the session initiator.
 * It will return identity uri if session invitation has P-Asserted-Identity information.
 *
 * @param [in] iSessId The session id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImSessGetOrigIdPartp(int iSessId, MtcString ppcName, MtcString ppcUri) {
    return MtcImSessJNI.Mtc_ImSessGetOrigIdPartp(iSessId, ppcName, ppcUri);
  }

/**
 * @brief Get group URI from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return Group URI when get group successfully, otherwise return empty string.
 *
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetGrpUri(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetGrpUri(iSessId);
  }

/**
 * @brief Get group Identity from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return Group Identity when get group successfully, otherwise return empty string.
 *
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetGrpIdent(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetGrpIdent(iSessId);
  }

/**
 * @brief MTC Get conversation-id from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return The conversation-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetConvId(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetConvId(iSessId);
  }

/**
 * @brief MTC Get contribution-id from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return The contribution-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetContId(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetContId(iSessId);
  }

/**
 * @brief MTC Get group chat id from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return The group chat id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetGrpChatId(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetGrpChatId(iSessId);
  }

/**
 * @brief Get replaced session(one to one session) id from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return The replaced session id.
 */
  public static int Mtc_ImSessGetRplSessId(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetRplSessId(iSessId);
  }

/**
 * @brief MTC Get date time from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in,out] pstTime The date time value. 
 *
 * @retval MtcCommonConstants::ZOK Get date time successfully.
 * @retval MtcCommonConstants::ZFAILED Get date time failed.
 */
  public static int Mtc_ImSessGetSysDateTime(int iSessId, SWIGTYPE_p_ST_MTC_SYS_TIME pstTime) {
    return MtcImSessJNI.Mtc_ImSessGetSysDateTime(iSessId, SWIGTYPE_p_ST_MTC_SYS_TIME.getCPtr(pstTime));
  }

/**
 * @brief MTC Get date time from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return message session date time(milliseconds), otherwise return 0.
 */
  public static long Mtc_ImSessGetDateTime(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetDateTime(iSessId);
  }

/**
 * @brief Start composing function.
 *
 * @param [in] iSessId The session id.
 *
 * @retval MtcCommonConstants::ZOK Start composing successfully.
 * @retval MtcCommonConstants::ZFAILED Start composing failed.
 */
  public static int Mtc_ImSessStartCompsing(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessStartCompsing(iSessId);
  }

/**
 * @brief Stop composing function.
 *
 * @param [in] iSessId The session id.
 *
 * @retval MtcCommonConstants::ZOK Stop composing successfully.
 * @retval MtcCommonConstants::ZFAILED Stop composing failed.
 */
  public static int Mtc_ImSessStopCompsing(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessStopCompsing(iSessId);
  }

/**
 * @brief MTC get if message session support imdn.
 *
 * @param [in] iSessId The session id.
 *
 * @retval true support imdn.
 * @retval false do not support imdn.
 */
  public static boolean Mtc_ImSessGetImdnSupport(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetImdnSupport(iSessId);
  }

/**
 * @brief MTC get if message session support FTHTTP.
 *
 * @param [in] iSessId The session id.
 *
 * @retval true support FTHTTP.
 * @retval false do not support FTHTTP.
 */
  public static boolean Mtc_ImSessGetFtHttpSupport(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetFtHttpSupport(iSessId);
  }

/**
 * @brief MTC get establishing message session with first message.
 *
 * @param [in] iSessId The session id.
 *
 * @retval true establishing session with first message.
 * @retval false establishing session with none.
 */
  public static boolean Mtc_ImSessHasFirstMsg(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessHasFirstMsg(iSessId);
  }

/**
 * @brief MTC get message session session isfous.
 *
 * @param [in] iSessId The session id.
 *
 * @retval true message session is group chat or pre-defined group.
 * @retval false message session is 1-1 chat.
 */
  public static boolean Mtc_ImSessGetIsFocus(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetIsFocus(iSessId);
  }

/**
 * @brief MTC get message session local is chairman.
 *
 * @param [in] iSessId The session id.
 *
 * @retval true Indicates local is chairman.
 * @retval false Indicates local is not chairman.
 */
  public static boolean Mtc_ImSessGetIsChairman(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetIsChairman(iSessId);
  }

/**
 * @brief MTC Get message session get max user count.
 *
 * @param [in] iSessId The session id.
 *
 * @return session max user count.
 */
  public static int Mtc_ImSessGetMaxUsrCnt(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetMaxUsrCnt(iSessId);
  }

/**
 * @brief MTC Get message session get user count.
 *
 * @param [in] iSessId The session id.
 *
 * @return session user count.
 */
  public static int Mtc_ImSessGetUsrCnt(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetUsrCnt(iSessId);
  }

/**
 * @brief MTC message session get active flag.
 *
 * @param [in] iSessId The session id.
 *
 * @return session active flag.
 */
  public static boolean Mtc_ImSessGetActive(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetActive(iSessId);
  }

/**
 * @brief MTC message session get locked flag.
 *
 * @param [in] iSessId The session id.
 *
 * @return session locked flag.
 */
  public static boolean Mtc_ImSessGetLocked(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetLocked(iSessId);
  }

/**
 * @brief MTC message session get offline flag.
 *
 * @param [in] iSessId The session id.
 *
 * @return session offline flag.
 */
  public static boolean Mtc_ImSessGetOffline(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetOffline(iSessId);
  }

/**
 * @brief MTC message session get offline invitation flag.
 *
 * @param [in] iSessId The session id.
 *
 * @return session offline invitation flag.
 */
  public static boolean Mtc_ImSessGetOfflineIvt(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetOfflineIvt(iSessId);
  }

/**
 * @brief MTC message session get offline message flag.
 *
 * @param [in] iSessId The session id.
 *
 * @return session offline message flag.
 */
  public static boolean Mtc_ImSessGetOfflineMsg(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetOfflineMsg(iSessId);
  }

/**
 * @brief MTC message session get session type.
 *
 * @param [in] iSessId The session id.
 *
 * @return session type, @see @ref MtcImSessConstants::EN_MTC_IM_SESS_ONLINE_CREATE.
 */
  public static int Mtc_ImSessGetSessType(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetSessType(iSessId);
  }

/**
 * @brief MTC message session get group chat version.
 *
 * @param [in] iSessId The session id.
 *
 * @return group chat version.
 */
  public static int Mtc_ImSessGetVersionId(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetVersionId(iSessId);
  }

/**
 * @brief MTC message session set group chat version.
 *
 * @param [in] iSessId The session id.
 * @param [in] iVer The group chat version.
 *
 * @retval MtcCommonConstants::ZOK Set version successfully.
 * @retval MtcCommonConstants::ZFAILED Set version failed.
 */
  public static int Mtc_ImSessSetVersionId(int iSessId, int iVer) {
    return MtcImSessJNI.Mtc_ImSessSetVersionId(iSessId, iVer);
  }

/**
 * @brief MTC Sending a message through message session.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgSend(int iSessId, Object zCookie, String pcMsg, int iMsgType) {
    return MtcImSessJNI.Mtc_ImSessMsgSend(iSessId, zCookie, pcMsg, iMsgType);
  }

/**
 * @brief MTC Sending a message through message session.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 * @param [in] iAtPartpLstId The participant list id which be mentioned.
 * @param [in] iAtType The at function type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_AT_PARTIAL.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgSendAt(int iSessId, Object zCookie, String pcMsg, int iMsgType, int iAtPartpLstId, int iAtType) {
    return MtcImSessJNI.Mtc_ImSessMsgSendAt(iSessId, zCookie, pcMsg, iMsgType, iAtPartpLstId, iAtType);
  }

/**
 * @brief MTC Sending a message to one participant through message session.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcPeerUri The peer uri.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgSendO(int iSessId, Object zCookie, String pcPeerUri, String pcMsg, int iMsgType) {
    return MtcImSessJNI.Mtc_ImSessMsgSendO(iSessId, zCookie, pcPeerUri, pcMsg, iMsgType);
  }

/**
 * @brief MTC Sending a multi-media message through message session.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pData The multi-media message body.
 * @param [in] iDataSize The multi-media message size.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgSendM(int iSessId, Object zCookie, byte[] pData, int iMsgType) {
    return MtcImSessJNI.Mtc_ImSessMsgSendM(iSessId, zCookie, pData, iMsgType);
  }

/**
 * @brief MTC Sending a message through with font information message session.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 * @param [in] pcFontInfo The font information.
 * @param [in] iAtPartpLstId The participant list id which be mentioned.
 * @param [in] iAtType The at function type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_AT_PARTIAL.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgSendF(int iSessId, Object zCookie, String pcMsg, int iMsgType, String pcFontInfo, int iAtPartpLstId, int iAtType) {
    return MtcImSessJNI.Mtc_ImSessMsgSendF(iSessId, zCookie, pcMsg, iMsgType, pcFontInfo, iAtPartpLstId, iAtType);
  }

/**
 * @brief mtcf MTC Send geolocation free text through session.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] bCpim The CPIM message format flag.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgSendGeoText(int iSessId, Object zCookie, String pcFreeText, String pcLabel, boolean bCpim) {
    return MtcImSessJNI.Mtc_ImSessMsgSendGeoText(iSessId, zCookie, pcFreeText, pcLabel, bCpim);
  }

/**
 * @brief mtcf MTC Send geolocation coordinate through session.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] bCpim The CPIM message format flag.
 *
 * Note: if radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgSendGeoCoord(int iSessId, Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcLabel, boolean bCpim) {
    return MtcImSessJNI.Mtc_ImSessMsgSendGeoCoord(iSessId, zCookie, dLatitude, dLongitude, fRadius, pcLabel, bCpim);
  }

/**
 * @brief mtcf MTC Send geolocation both free text and coordinate through session.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] bCpim The CPIM message format flag.
 *
 * Note: if radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgSendGeoBoth(int iSessId, Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcLabel, boolean bCpim) {
    return MtcImSessJNI.Mtc_ImSessMsgSendGeoBoth(iSessId, zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcLabel, bCpim);
  }

/**
 * @brief MTC ReSending a message through message session
 * Only used to CMCC.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgReSend(int iSessId, Object zCookie, String pcMsg, int iMsgType, String pcReImdnId) {
    return MtcImSessJNI.Mtc_ImSessMsgReSend(iSessId, zCookie, pcMsg, iMsgType, pcReImdnId);
  }

/**
 * @brief MTC ReSending a message through message session
 * Only used to CMCC.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 * @param [in] iAtPartpLstId The participant list id which be mentioned.
 * @param [in] pcReImdnId The resend imdn message id.
 * @param [in] iAtType The at function type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_AT_PARTIAL.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgReSendAt(int iSessId, Object zCookie, String pcMsg, int iMsgType, int iAtPartpLstId, int iAtType, String pcReImdnId) {
    return MtcImSessJNI.Mtc_ImSessMsgReSendAt(iSessId, zCookie, pcMsg, iMsgType, iAtPartpLstId, iAtType, pcReImdnId);
  }

/**
 * @brief MTC ReSending a message with font information through message session
 * Only used to CMCC.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 * @param [in] pcFontInfo The font information.
 * @param [in] iAtPartpLstId The participant list id which be mentioned.
 * @param [in] pcReImdnId The resend imdn message id.
 * @param [in] iAtType The at function type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_AT_PARTIAL.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgReSendF(int iSessId, Object zCookie, String pcMsg, int iMsgType, String pcFontInfo, int iAtPartpLstId, int iAtType, String pcReImdnId) {
    return MtcImSessJNI.Mtc_ImSessMsgReSendF(iSessId, zCookie, pcMsg, iMsgType, pcFontInfo, iAtPartpLstId, iAtType, pcReImdnId);
  }

/**
 * @brief MTC ReSending a message to one participant through message session
 * Only used to CMCC.
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcPeerUri The peer uri.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 * @param [in] iAtPartpLstId The participant list id which be mentioned.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgReSendO(int iSessId, Object zCookie, String pcPeerUri, String pcMsg, int iMsgType, String pcReImdnId) {
    return MtcImSessJNI.Mtc_ImSessMsgReSendO(iSessId, zCookie, pcPeerUri, pcMsg, iMsgType, pcReImdnId);
  }

/**
 * @brief MTC ReSending a multi-media message through message session
 * Only used to CMCC
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pData The multi-media message body.
 * @param [in] iDataSize The multi-media message size.
 * @param [in] iMsgType The message type, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgReSendM(int iSessId, Object zCookie, byte[] pData, int iMsgType, String pcReImdnId) {
    return MtcImSessJNI.Mtc_ImSessMsgReSendM(iSessId, zCookie, pData, iMsgType, pcReImdnId);
  }

/**
 * @brief MTC ReSend geolocation free text through session
 * Only used to CMCC
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] bCpim The CPIM message format flag.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgReSendGeoText(int iSessId, Object zCookie, String pcFreeText, String pcLabel, boolean bCpim, String pcReImdnId) {
    return MtcImSessJNI.Mtc_ImSessMsgReSendGeoText(iSessId, zCookie, pcFreeText, pcLabel, bCpim, pcReImdnId);
  }

/**
 * @brief MTC ReSend geolocation coordinate through session
 * Only used to CMCC
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] bCpim The CPIM message format flag.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * Note: if radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgReSendGeoCoord(int iSessId, Object zCookie, double dLatitude, double dLongitude, float fRadius, String pcLabel, boolean bCpim, String pcReImdnId) {
    return MtcImSessJNI.Mtc_ImSessMsgReSendGeoCoord(iSessId, zCookie, dLatitude, dLongitude, fRadius, pcLabel, bCpim, pcReImdnId);
  }

/**
 * @brief MTC ReSend geolocation both free text and coordinate through session
 * Only used to CMCC
 *
 * If IM sent message successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendOk.
 *
 * If IM sent message failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgSendFailed.
 *
 * While receiving message, GUI will be notified by callback which 
 * was set by @ref mtcImCbSessMsgRecvMsg.
 *
 * @param [in] iSessId The session id.
 * @param [in] zCookie The user cookie.
 * @param [in] pcFreeText The free text.
 * @param [in] dLatitude The latitude of user place.
 * @param [in] dLongitude The longitude of user place.
 * @param [in] fRadius The radius of user place.
 * @param [in] pcLabel The label string, if ZNULL indicate user's own position, else other position.
 * @param [in] bCpim The CPIM message format flag.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * Note: if radius value is equal to 0, the coordinate is a point,
 *       if radius value is bigger than 0, the coordinate is a circle.
 *
 * @return The session message id when send a message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImSessMsgReSendGeoBoth(int iSessId, Object zCookie, String pcFreeText, double dLatitude, double dLongitude, float fRadius, String pcLabel, boolean bCpim, String pcReImdnId) {
    return MtcImSessJNI.Mtc_ImSessMsgReSendGeoBoth(iSessId, zCookie, pcFreeText, dLatitude, dLongitude, fRadius, pcLabel, bCpim, pcReImdnId);
  }

/**
 * @brief MTC Get the Imdn type from message of message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return Type of message, @ref EN_MTC_IM_SESS_REQ_ITYPE.
 */
  public static int Mtc_ImSessMsgGetImdnType(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetImdnType(iSessId, iMsgId);
  }

/**
 * @brief MTC Get imdn message-id from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The imdn message-id.
 *   The caller must copy it, then use.
 */
  public static String Mtc_ImSessMsgGetImdnMsgId(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetImdnMsgId(iSessId, iMsgId);
  }

/**
 * @brief MTC Get device id from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The device id.
 *   The caller must copy it, then use.
 */
  public static String Mtc_ImSessMsgGetDeviceId(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetDeviceId(iSessId, iMsgId);
  }

/**
 * @brief MTC Get message content type from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return Type of IM message, see @ref MtcImSessConstants::EN_MTC_IM_SESS_CONT_UNKNOWN.
 */
  public static int Mtc_ImSessMsgGetContentType(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetContentType(iSessId, iMsgId);
  }

/**
 * @brief MTC Get message content length from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The message content length.
 */
  public static int Mtc_ImSessMsgGetContentLen(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetContentLen(iSessId, iMsgId);
  }

/**
 * @brief MTC Get message content from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The message content.
 *   The caller must copy it, then use.
 */
  public static String Mtc_ImSessMsgGetContent(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetContent(iSessId, iMsgId);
  }

/**
 * @brief MTC Get multi-media message content from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 * @param [out] ppData The multi-media message content.
 * @param [out] piDataSize The multi-media message content length.
 *
 * @retval MtcCommonConstants::ZOK Get message content successfully.
 * @retval MtcCommonConstants::ZFAILED Get message content failed.
 *   The caller must copy it, then use.
 */
  public static int Mtc_ImSessMsgGetMContent(int iSessId, int iMsgId, MtcByteArray ppData) {
    return MtcImSessJNI.Mtc_ImSessMsgGetMContent(iSessId, iMsgId, ppData);
  }

/**
 * @brief MTC Get participant information from message session.
 *
 * The participant is the remote client who has sent message.
 * It will return ZNULL if message was sent by local client.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get participant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get participant information failed.
 */
  public static int Mtc_ImSessMsgGetPartp(int iSessId, int iMsgId, MtcString ppcName, MtcString ppcUri) {
    return MtcImSessJNI.Mtc_ImSessMsgGetPartp(iSessId, iMsgId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get message date time from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 * @param [in,out] pstTime The date time value. 
 *
 * @retval MtcCommonConstants::ZOK Get date time successfully.
 * @retval MtcCommonConstants::ZFAILED Get date time failed.
 */
  public static int Mtc_ImSessMsgGetSysDateTime(int iSessId, int iMsgId, SWIGTYPE_p_ST_MTC_SYS_TIME pstTime) {
    return MtcImSessJNI.Mtc_ImSessMsgGetSysDateTime(iSessId, iMsgId, SWIGTYPE_p_ST_MTC_SYS_TIME.getCPtr(pstTime));
  }

/**
 * @brief MTC Get message date time from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return message date time(milliseconds), otherwise return 0.
 */
  public static long Mtc_ImSessMsgGetDateTime(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetDateTime(iSessId, iMsgId);
  }

/**
 * @brief MTC Get font information of IM message.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The session message id.
 *
 * @return The font information.
 * The caller is responsible for freeing it by Zos_SysStrFree
 */
  public static String Mtc_ImSessMsgGetFontInfo(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetFontInfo(iSessId, iMsgId);
  }

/**
 * @brief Get user cookie from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return User cookie.
 */
  public static Object Mtc_ImSessMsgGetCookie(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetCookie(iSessId, iMsgId);
  }

/**
 * @brief Set user cookie in a message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 * @param [in] zCookie The user cookie of message session.
 *
 * @retval MtcCommonConstants::ZOK Set user cookie successfully.
 * @retval MtcCommonConstants::ZFAILED Set user cookie failed.
 */
  public static int Mtc_ImSessMsgSetCookie(int iSessId, int iMsgId, Object zCookie) {
    return MtcImSessJNI.Mtc_ImSessMsgSetCookie(iSessId, iMsgId, zCookie);
  }

/**
 * @brief Set file transfer via http id in a session message.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 * @param [in] iFtHttpId The FtHttp id.
 *
 * @retval MtcCommonConstants::ZOK Set FtHttpId successfully.
 * @retval MtcCommonConstants::ZFAILED Set FtHttpId failed.
 */
  public static int Mtc_ImSessMsgSetFtHttpId(int iSessId, int iMsgId, int iFtHttpId) {
    return MtcImSessJNI.Mtc_ImSessMsgSetFtHttpId(iSessId, iMsgId, iFtHttpId);
  }

/**
 * @brief mtcf MTC Get geolocation information id of IM message.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The session message id.
 *
 * @return The geolocation information id.
 */
  public static int Mtc_ImSessMsgGetGInfoId(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgGetGInfoId(iSessId, iMsgId);
  }

/**
 * @brief mtcf MTC Get silence indication flag of IM message.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The session message id.
 *
 * @return The silence indication.
 */
  public static boolean Mtc_ImSessMsgHasSilenceInd(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgHasSilenceInd(iSessId, iMsgId);
  }

/**
 * @brief mtcf MTC Get at indication flag of IM message.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The session message id.
 *
 * @return The at indication.
 */
  public static boolean Mtc_ImSessMsgHasAtInd(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgHasAtInd(iSessId, iMsgId);
  }

/**
 * @brief mtcf MTC Get at all indication flag of IM message.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The session message id.
 *
 * @return The at all indication.
 */
  public static boolean Mtc_ImSessMsgHasAtAllInd(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgHasAtAllInd(iSessId, iMsgId);
  }

/**
 * @brief mtcf MTC Get carbon copy indication flag of IM message.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The session message id.
 *
 * @return The carbon copy indication.
 */
  public static boolean Mtc_ImSessMsgHasCcInd(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgHasCcInd(iSessId, iMsgId);
  }

/**
 * @brief mtcf MTC Get offline indication flag of IM message.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The session message id.
 *
 * @return The offline indication.
 */
  public static boolean Mtc_ImSessMsgHasOffInd(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessMsgHasOffInd(iSessId, iMsgId);
  }

/**
 * @brief MTC get enterprise group indication from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return enterprise group indication.
 */
  public static boolean Mtc_ImSessGetEnterPriseGrpInd(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetEnterPriseGrpInd(iSessId);
  }

/**
 * @brief MTC get party group indication from message session.
 *
 * @param [in] iSessId The session id.
 *
 * @return party group indication.
 */
  public static boolean Mtc_ImSessGetPartyGrpInd(int iSessId) {
    return MtcImSessJNI.Mtc_ImSessGetPartyGrpInd(iSessId);
  }

/**
 * @brief MTC get revoke message indication from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return revoke message indication.
 */
  public static boolean Mtc_ImSessHasRevokeMsgInd(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessHasRevokeMsgInd(iSessId, iMsgId);
  }

/**
 * @brief MTC Get revoke message-id from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke message-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetRevokeMsgId(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessGetRevokeMsgId(iSessId, iMsgId);
  }

/**
 * @brief MTC Get revoke result from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id. 
 *
 * @return The revoke result.
 */
  public static short Mtc_ImSessGetRevokeResult(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessGetRevokeResult(iSessId, iMsgId);
  }

/**
 * @brief MTC Get revoke from addr from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke from addr.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetRevokeFromAddr(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessGetRevokeFromAddr(iSessId, iMsgId);
  }

/**
 * @brief MTC Get revoke to addr from message session.
 *
 * @param [in] iSessId The session id.
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke to addr.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImSessGetRevokeToAddr(int iSessId, int iMsgId) {
    return MtcImSessJNI.Mtc_ImSessGetRevokeToAddr(iSessId, iMsgId);
  }

}
