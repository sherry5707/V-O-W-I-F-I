/**
 * @file MtcImIshare.java
 * @brief MtcImIshare interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcImIshare interface
 */
public class MtcImIshare implements MtcImIshareConstants {
/**
 * @brief MTC Sending image to one participant.
 *
 * If IM participant receive transfer invitation successfully, 
 * GUI will be notified by callback which was set by 
 * @ref mtcImCbIShareAcpted or @ref mtcImCbIShareRejected.
 *
 * If IM sending start, GUI will be notified by callback which 
 * was set by @ref mtcImCbIShareSending for report sending
 * image status.
 *
 * If IM sent successfully, GUI will be notified by callback which 
 * was set by @ref mtcImCbIShareSendOk.
 *
 * If IM send failed, GUI will be notified by callback which 
 * was set by @ref mtcImCbIShareSendFailed.
 *
 * While receiving image share invitation, GUI will be notified 
 * by callback which was set by @ref mtcImCbIShareRecvIvt.
 *
 * While IM receiving start, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbIShareRecving.
 *
 * While IM received done, Remote GUI will be notified by callback which
 * was set by @ref mtcImCbIShareRecvDone.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] iFileType The file type, see @ref MtcImIshareConstants::EN_MTC_IM_ISHARE_CONT_IMG_JPEG.
 *
 * @return The image share id when send image share invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImIShareSend(Object zCookie, String pcUri, String pcFileName, int iFileType) {
    return MtcImIshareJNI.Mtc_ImIShareSend(zCookie, pcUri, pcFileName, iFileType);
  }

/**
 * @brief MTC Accept a image share invitation.
 *
 * @param [in] iShareId The image share id.
 * @param [in] pcFileName The local file name for save.
 *
 * @retval MtcCommonConstants::ZOK Accept image share invitation successfully.
 * @retval MtcCommonConstants::ZFAILED Accept image share invitation failed.
 */
  public static int Mtc_ImIShareAccept(int iShareId, String pcFileName) {
    return MtcImIshareJNI.Mtc_ImIShareAccept(iShareId, pcFileName);
  }

/**
 * @brief MTC Reject a image share invitation.
 *
 * @param [in] iShareId The image share id.
 *
 * @retval MtcCommonConstants::ZOK Reject image share invitation successfully.
 * @retval MtcCommonConstants::ZFAILED Reject image share invitation failed.
 */
  public static int Mtc_ImIShareReject(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareReject(iShareId);
  }

/**
 * @brief MTC Cancel a image share.
 * 
 * If IM participant canceled transfer invitation, Remote GUI will be 
 * notified by callback which was set by @ref mtcImCbIShareCanceled.
 *
 * @param [in] iShareId The image share id.
 *
 * @retval MtcCommonConstants::ZOK Cancel image share invitation successfully.
 * @retval MtcCommonConstants::ZFAILED Cancel image share invitation failed.
 */
  public static int Mtc_ImIShareCancel(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareCancel(iShareId);
  }

/**
 * @brief MTC Release a image share.
 * 
 * If IM participant released file transfer, Remote GUI will be notified 
 * by callback which was set by @ref mtcImCbIShareReleased.
 *
 * @param [in] iShareId The image share id.
 *
 * @retval MtcCommonConstants::ZOK Release image share successfully.
 * @retval MtcCommonConstants::ZFAILED Release image share failed.
 */
  public static int Mtc_ImIShareRelease(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareRelease(iShareId);
  }

/**
 * @brief MTC Get user cookie from a image share.
 *
 * @param [in] iShareId The image share id.
 *
 * @return User cookie.
 */
  public static Object Mtc_ImIShareGetCookie(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareGetCookie(iShareId);
  }

/**
 * @brief MTC Set user cookie in a image share.
 *
 * @param [in] iShareId The image share id.
 * @param [in] zCookie The user cookie.
 *
 * @retval MtcCommonConstants::ZOK Set user cookie successfully.
 * @retval MtcCommonConstants::ZFAILED Set user cookie failed.
 */
  public static int Mtc_ImIShareSetCookie(int iShareId, Object zCookie) {
    return MtcImIshareJNI.Mtc_ImIShareSetCookie(iShareId, zCookie);
  }

/**
 * @brief MTC Get image name from image share.
 *
 * @param [in] iShareId The image share id.
 *
 * @return The file name.
 */
  public static String Mtc_ImIShareGetName(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareGetName(iShareId);
  }

/**
 * @brief MTC Get image type from image share.
 *
 * @param [in] iShareId The image share id.
 *
 * @return The image file type, see @ref MtcImIshareConstants::EN_MTC_IM_ISHARE_CONT_IMG_JPEG.
 */
  public static int Mtc_ImIShareGetType(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareGetType(iShareId);
  }

/**
 * @brief MTC Get image size from image share.
 *
 * @param [in] iShareId The image share id.
 *
 * @return The image file size.
 */
  public static int Mtc_ImIShareGetSize(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareGetSize(iShareId);
  }

/**
 * @brief MTC Get image data sent size from image share.
 *
 * @param [in] iShareId The image share id.
 *
 * @return The image file data sent size.
 */
  public static int Mtc_ImIShareGetSentSize(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareGetSentSize(iShareId);
  }

/**
 * @brief MTC Get image data received size from image share.
 *
 * @param [in] iShareId The image share id.
 *
 * @return The image file data received size.
 */
  public static int Mtc_ImIShareGetRecvSize(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareGetRecvSize(iShareId);
  }

/**
 * @brief MTC Get participant type from image share.
 *
 * @param [in] iShareId The image share id.
 *
 * @return Type of IM image share participant, see @ref MtcPartpConstants::EN_MTC_PARTP_LST_ONE.
 * If type is EN_MTC_PARTP_LST_ONE, participant can be got by @ref MtcImIshare::Mtc_ImIShareGetPartp.
 * If type is EN_MTC_PARTP_LST_PREDEF_GRP, participant can be got by @ref MtcImIshare::Mtc_ImIShareGetPartp.
 * If type is EN_MTC_PARTP_LST_URI_LST, participant can be got by @ref MtcImIshare::Mtc_ImIShareGetPartpLstId.
 */
  public static int Mtc_ImIShareGetPartpType(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareGetPartpType(iShareId);
  }

/**
 * @brief MTC Get participant information from image share.
 *
 * The participant is the remote client who shared image.
 *
 * @param [in] iShareId The image share id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get participant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get participant information failed.
 */
  public static int Mtc_ImIShareGetPartp(int iShareId, MtcString ppcName, MtcString ppcUri) {
    return MtcImIshareJNI.Mtc_ImIShareGetPartp(iShareId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get participant list id from image share.
 *
 * The participant list id is all remote clients who shared image.
 *
 * @param [in] iShareId The image share id.
 *
 * @return The participant list id on succeed or 0 on failed.
 *  The caller is responsible for freeing it by @ref MtcPartp::Mtc_PartpLstDelete.
 */
  public static int Mtc_ImIShareGetPartpLstId(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareGetPartpLstId(iShareId);
  }

/**
 * @brief MTC Get original participant URI from image share.
 *
 * The participant is the session initiator who initialized this shared image.
 * It will return local URI if local client is the image share initiator.
 * It will return From uri from image share invitation information.
 *
 * @param [in] iShareId The image share id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImIShareGetOrigPartp(int iShareId, MtcString ppcName, MtcString ppcUri) {
    return MtcImIshareJNI.Mtc_ImIShareGetOrigPartp(iShareId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get original identity of participant URI from image share.
 *
 * The participant is the image share initiator who initialized image share.
 * It will return local URI if local client is the image share initiator.
 * It will return identity uri if image share invitation has P-Asserted-Identity information.
 *
 * @param [in] iShareId The image share id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original identity of participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original identity of participant failed.
 */
  public static int Mtc_ImIShareGetOrigIdPartp(int iShareId, MtcString ppcName, MtcString ppcUri) {
    return MtcImIshareJNI.Mtc_ImIShareGetOrigIdPartp(iShareId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get date time from image share.
 *
 * @param [in] iShareId The image share id.
 * @param [in,out] pstTime The date time value. 
 *
 * @retval MtcCommonConstants::ZOK Get date time successfully.
 * @retval MtcCommonConstants::ZFAILED Get date time date failed.
 */
  public static int Mtc_ImIShareGetSysDateTime(int iShareId, SWIGTYPE_p_ST_MTC_SYS_TIME pstTime) {
    return MtcImIshareJNI.Mtc_ImIShareGetSysDateTime(iShareId, SWIGTYPE_p_ST_MTC_SYS_TIME.getCPtr(pstTime));
  }

/**
 * @brief MTC Get date time from image share.
 *
 * @param [in] iShareId The image share id.
 *
 * @return image share date time, otherwise return 0.
 */
  public static int Mtc_ImIShareGetDateTime(int iShareId) {
    return MtcImIshareJNI.Mtc_ImIShareGetDateTime(iShareId);
  }

}
