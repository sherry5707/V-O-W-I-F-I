/**
 * @file MtcUtil.java
 * @brief MtcUtil interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcUtil interface
 */
public class MtcUtil implements MtcUtilConstants {
/**
 * @brief Print ERROR log with format string information.
 * User can specific log name as the log module prefix
 * Log print level can be set by Mtc_CliDbSetLogLevel.
 *
 * @param [in] pcLogName The log name. Default name is "ZOS" if no log name.
 * @param [in] pcFormat String format.
 * @param [in] ... String vars.
 *
 * @see @ref MtcUtil::Mtc_AnyLogInfoStr
 */
  public static void Mtc_AnyLogErrStr(String pcLogName, String pcFormat) {
    MtcUtilJNI.Mtc_AnyLogErrStr(pcLogName, pcFormat);
  }

/**
 * @brief Print INFO log with format string information.
 * User can specific log name as the log module prefix
 * Log print level can be set by Mtc_CliDbSetLogLevel.
 *
 * @param [in] pcLogName The log name. Default name is "ZOS" if no log name.
 * @param [in] pcFormat String format.
 * @param [in] ... String vars.
 *
 * @see @ref MtcUtil::Mtc_AnyLogErrStr
 */
  public static void Mtc_AnyLogInfoStr(String pcLogName, String pcFormat) {
    MtcUtilJNI.Mtc_AnyLogInfoStr(pcLogName, pcFormat);
  }

/**
 * @brief Print DEBUG log with format string information.
 * User can specific log name as the log module prefix
 * Log print level can be set by Mtc_DbSetLogLevel.
 *
 * @param [in] pcLogName The log name. Default name is "ZOS" if no log name.
 * @param [in] pcFormat String format.
 * @param [in] ... String vars.
 *
 * @see @ref MtcUtil::Mtc_AnyLogInfoStr
 */
  public static void Mtc_AnyLogDbgStr(String pcLogName, String pcFormat) {
    MtcUtilJNI.Mtc_AnyLogDbgStr(pcLogName, pcFormat);
  }

/**
 * @brief This function flushs buffer into log file.
 *
 * @param [in] zLogId The log ID.
 *
 * @retval MtcCommonConstants::ZOK Flush operation successfully.
 * @retval MtcCommonConstants::ZFAILED Flush operation failed.
 *
 * @see 
 */
  public static int Mtc_AnyLogFlush() {
    return MtcUtilJNI.Mtc_AnyLogFlush();
  }

/**
 * @brief Print login ERROR log with format string information.
 * User can specific log name as the log module prefix
 * Log print level can be set by Mtc_CliDbSetLogLevel.
 *
 * @param [in] pcLogName The login log name. Default name is "ZOS" if no log name.
 * @param [in] pcFormat String format.
 * @param [in] ... String vars.
 *
 * @see @ref MtcUtil::Mtc_AnyLogLoginInfoStr
 */
  public static void Mtc_AnyLogLoginErrStr(String pcLogName, String pcFormat) {
    MtcUtilJNI.Mtc_AnyLogLoginErrStr(pcLogName, pcFormat);
  }

/**
 * @brief Print login INFO log with format string information.
 * User can specific log name as the log module prefix
 * Log print level can be set by Mtc_CliDbSetLogLevel.
 *
 * @param [in] pcLogName The login log name. Default name is "ZOS" if no log name.
 * @param [in] pcFormat String format.
 * @param [in] ... String vars.
 *
 * @see @ref MtcUtil::Mtc_AnyLogLoginErrStr
 */
  public static void Mtc_AnyLogLoginInfoStr(String pcLogName, String pcFormat) {
    MtcUtilJNI.Mtc_AnyLogLoginInfoStr(pcLogName, pcFormat);
  }

/**
 * @brief Print login DEBUG log with format string information.
 * User can specific log name as the log module prefix
 * Log print level can be set by Mtc_DbSetLogLevel.
 *
 * @param [in] pcLogName The login log name. Default name is "ZOS" if no log name.
 * @param [in] pcFormat String format.
 * @param [in] ... String vars.
 *
 * @see @ref MtcUtil::Mtc_AnyLogLoginInfoStr
 */
  public static void Mtc_AnyLogLoginDbgStr(String pcLogName, String pcFormat) {
    MtcUtilJNI.Mtc_AnyLogLoginDbgStr(pcLogName, pcFormat);
  }

/**
 * @brief This function flushs buffer into login log file.
 *
 * @param [in] zLogId The login log ID.
 *
 * @retval MtcCommonConstants::ZOK Flush operation successfully.
 * @retval MtcCommonConstants::ZFAILED Flush operation failed.
 *
 * @see 
 */
  public static int Mtc_AnyLogLoginFlush() {
    return MtcUtilJNI.Mtc_AnyLogLoginFlush();
  }

/**
 * @brief Get local ip count.
 *
 * @return Local ip count successfully, otherwise retrun 0.
 *
 * @see @ref MtcUtil::Mtc_GetLclIp
 */
  public static int Mtc_GetLclIpCnt() {
    return MtcUtilJNI.Mtc_GetLclIpCnt();
  }

/**
 * @brief Get local ip.
 *
 * @param [in] iIndex Local ip index.
 *
 * @return Local ip successfully, otherwise return loopback address.
 *    the caller must copy it, then use.
 *
 * @see @ref MtcUtil::Mtc_GetLclIpCnt
 */
  public static String Mtc_GetLclIp(int iIndex) {
    return MtcUtilJNI.Mtc_GetLclIp(iIndex);
  }

/**
 * @brief Get access network type.
 *
 * @return Access network type successfully, 
 * otherwise return MTC_ANET_UNKNOWN.
 */
  public static int Mtc_GetAccessNetType() {
    return MtcUtilJNI.Mtc_GetAccessNetType();
  }

/**
 * @brief Create a new timer.
 *
 * @param [in] iTimerType User defined timer type.
 * @param [in] bCycle Timer mode, cycle or once a time.
 * @param [in] pfnActive Timer active callback.
 * @param [out] pzTimerId Timer ID.
 *
 * @retval MtcCommonConstants::ZOK Timer create successfully.
 * @retval MtcCommonConstants::ZFAILED Timer create failed.
 *
 * @see @ref MtcUtil::Mtc_TimerDelete
 */
  public static int Mtc_TimerCreate(int iTimerType, boolean bCycle, SWIGTYPE_p_f_unsigned_int_size_t__void pfnActive, MtcNumber pzTimerId) {
    return MtcUtilJNI.Mtc_TimerCreate(iTimerType, bCycle, SWIGTYPE_p_f_unsigned_int_size_t__void.getCPtr(pfnActive), pzTimerId);
  }

/**
 * @brief Delete a timer.
 *
 * @param [in] zTimerId Timer ID.
 *
 * @retval MtcCommonConstants::ZOK Timer delete successfully.
 * @retval MtcCommonConstants::ZFAILED Timer delete failed.
 *
 * @see @ref MtcUtil::Mtc_TimerCreate
 */
  public static int Mtc_TimerDelete(int zTimerId) {
    return MtcUtilJNI.Mtc_TimerDelete(zTimerId);
  }

/**
 * @brief Start a timer.
 *
 * @param [in] zTimerId Timer ID.
 * @param [in] iTimeLen Time interval in milliseconds.
 *
 * @retval MtcCommonConstants::ZOK Timer start successfully.
 * @retval MtcCommonConstants::ZFAILED Timer start failed.
 *
 * @note Timer must not in running state.
 *
 * @see @ref MtcUtil::Mtc_TimerStop
 */
  public static int Mtc_TimerStart(int zTimerId, int iTimeLen) {
    return MtcUtilJNI.Mtc_TimerStart(zTimerId, iTimeLen);
  }

/**
 * @brief Stop a timer.
 *
 * @param [in] zTimerId Timer ID.
 *
 * @retval MtcCommonConstants::ZOK Timer stop successfully.
 * @retval MtcCommonConstants::ZFAILED Timer stop failed.
 *
 * @see @ref MtcUtil::Mtc_TimerStart
 */
  public static int Mtc_TimerStop(int zTimerId) {
    return MtcUtilJNI.Mtc_TimerStop(zTimerId);
  }

/**
 * @brief Check if a timer is running.
 *
 * @param [in] zTimerId Timer ID.
 *
 * @retval true Timer has been started and still in counting.
 * @retval false Otherwise.
 *
 * @see @ref MtcUtil::Mtc_TimerStart
 */
  public static boolean Mtc_TimerIsRun(int zTimerId) {
    return MtcUtilJNI.Mtc_TimerIsRun(zTimerId);
  }

/**
 * @brief Schedule a new timer after some seconds.
 *
 * @param [in] iTimerType User defined timer type.
 * @param [in] pfnSchedule User defined schedule callback.
 * @param [in] iTimeLen Time interval in milliseconds.
 *
 * @retval MtcCommonConstants::ZOK Timer start successfully.
 * @retval MtcCommonConstants::ZFAILED Timer start failed.
 *
 * @note Timer must not in running state.
 *
 * @see @ref MtcUtil::Mtc_TimerCreate
 */
  public static int Mtc_TimerSchedule(int iTimerType, SWIGTYPE_p_f_size_t__void pfnSchedule, int iTimeLen) {
    return MtcUtilJNI.Mtc_TimerSchedule(iTimerType, SWIGTYPE_p_f_size_t__void.getCPtr(pfnSchedule), iTimeLen);
  }

/**
 * @brief Convert time value from ZTIME_T to ST_MTC_SYS_TIME structure.
 *
 * @param [in] zTime Time value.
 * @param [out] pstTime Time value in ST_MTC_SYS_TIME structure.
 *
 * @retval MtcCommonConstants::ZOK Convert successfully.
 * @retval MtcCommonConstants::ZFAILED Convert failed.
 *
 * @see
 */
  public static int Mtc_Time2SysTime(int zTime, ST_MTC_SYS_TIME pstTime) {
    return MtcUtilJNI.Mtc_Time2SysTime(zTime, ST_MTC_SYS_TIME.getCPtr(pstTime), pstTime);
  }

/**
 * @brief Convert time value from ST_MTC_SYS_TIME structure to ZTIME_T.
 *
 * @param [in] pstTime Time value in ST_MTC_SYS_TIME structure.
 * @param [out] pzTime Time value in ZTIME_T structure.
 *
 * @retval MtcCommonConstants::ZOK Convert successfully.
 * @retval MtcCommonConstants::ZFAILED Convert failed.
 *
 * @see
 */
  public static int Mtc_SysTime2Time(ST_MTC_SYS_TIME pstTime, MtcNumber pzTime) {
    return MtcUtilJNI.Mtc_SysTime2Time(ST_MTC_SYS_TIME.getCPtr(pstTime), pstTime, pzTime);
  }

/**
 * @brief Run debug command.
 *
 * @param [in] pcCmd Command string.
 *
 * @retval MtcCommonConstants::ZOK Run command successfully.
 * @retval MtcCommonConstants::ZFAILED Run command failed.
 *
 * @see
 */
  public static int Mtc_CmdRun(String pcCmd) {
    return MtcUtilJNI.Mtc_CmdRun(pcCmd);
  }

/**
 * @brief Test sip decode.
 *
 * @param [in] pcData SIP data string.
 *
 * @retval MtcCommonConstants::ZOK Test successfully.
 * @retval MtcCommonConstants::ZFAILED Test failed.
 */
  public static int Mtc_TestSipDecode(String pcData) {
    return MtcUtilJNI.Mtc_TestSipDecode(pcData);
  }

/**
 * @brief Test http decode.
 *
 * @param [in] pcData HTTP data string.
 *
 * @retval MtcCommonConstants::ZOK Test successfully.
 * @retval MtcCommonConstants::ZFAILED Test failed.
 */
  public static int Mtc_TestHttpDecode(String pcData) {
    return MtcUtilJNI.Mtc_TestHttpDecode(pcData);
  }

/**
 * @brief json prase
 *
 * @param [in] zmbuf.
 * @param [in] need prase string.
 * @param [in] need prase string length.
 *
 * @retval prase json.
 */
  public static SWIGTYPE_p_void Mtc_ZjsonParse(SWIGTYPE_p_void zMemBuf, String pcText, int iLen) {
    long cPtr = MtcUtilJNI.Mtc_ZjsonParse(SWIGTYPE_p_void.getCPtr(zMemBuf), pcText, iLen);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

/**
 * @brief json prase
 *
 * @param [in] json object.
 * @param [in] need find name.
 *
 * @retval prase json.
 */
  public static SWIGTYPE_p_void Mtc_ZjsonObjectGet(SWIGTYPE_p_void zObject, String pcName) {
    long cPtr = MtcUtilJNI.Mtc_ZjsonObjectGet(SWIGTYPE_p_void.getCPtr(zObject), pcName);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

/**
 * @brief json prase
 *
 * @param [in] json object.
 * @param [in] need find name.
 *
 * @retval string.
 */
  public static String Mtc_ZjsonObjectGetString(SWIGTYPE_p_void zObject, String pcName) {
    return MtcUtilJNI.Mtc_ZjsonObjectGetString(SWIGTYPE_p_void.getCPtr(zObject), pcName);
  }

  public static long Mtc_ZjsonObjectGetNumber(SWIGTYPE_p_void zObject, String pcName) {
    return MtcUtilJNI.Mtc_ZjsonObjectGetNumber(SWIGTYPE_p_void.getCPtr(zObject), pcName);
  }

}
