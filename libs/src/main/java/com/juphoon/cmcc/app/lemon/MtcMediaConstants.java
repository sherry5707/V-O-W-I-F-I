/**
 * @file MtcMediaConstants.java
 * @brief MtcMediaConstants constants
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcMediaConstants constants
 */
public interface MtcMediaConstants {
  // EN_MTC_EC_TYPE 
  public final static int EN_MTC_EC_AEC = 0; /**< @brief Default AEC provided by engine. */
  public final static int EN_MTC_EC_OS = 1; /**< @brief AEC provided by OS. */
  public final static int EN_MTC_EC_AES = 2; /**< @brief AES provided by engine. */
  public final static int EN_MTC_EC_AEC_FDE = 3; /**< @brief AEC based on formant delay estimation. */
  public final static int EN_MTC_EC_AEC_SDE = 4; /**< @brief AEC based on spectrum delay estimation. */

  // EN_MTC_NS_TYPE 
  public final static int EN_MTC_NS_LOW = 0; /**< @brief NS with low level. */
  public final static int EN_MTC_NS_MID = 1; /**< @brief NS with moderate level. */
  public final static int EN_MTC_NS_HIGH = 2; /**< @brief NS with high level. */
  public final static int EN_MTC_NS_VERYHIGH = 3; /**< @brief NS with very high level. */

  // EN_MTC_GC_TYPE 
  public final static int EN_MTC_GC_ANALOG = 0; /**< @brief AGC based on analog volume adjustment. */
  public final static int EN_MTC_GC_OS = 1; /**< @brief AGC provided by OS */
  public final static int EN_MTC_GC_DIGITAL = 2; /**< @brief AGC based on digital volume adjustment. */
  public final static int EN_MTC_GC_FIXED = 3; /**< @brief AGC based on fixed digital volume adjustment. */

  // EN_MTC_RX_GC_TYPE 
  public final static int EN_MTC_RX_GC_FIXED = 0; /**< @brief RX-AGC based on fixed digital volume adjustment. */
  public final static int EN_MTC_RX_GC_ADAPTIVE = 1; /**< @brief RX-AGC based on adaptive digital volume adjustment. */

  // EN_MTC_ARS_TYPE 
  public final static int EN_MTC_ARS_QUALITY_SPATIAL = 0; /**< @brief Spatial quality first: clear picture. */
  public final static int EN_MTC_ARS_QUALITY_TEMPORAL = 1; /**< @brief Temporal quality first: fluent motion. */

  // EN_MTC_VAD_TYPE 
  public final static int EN_MTC_VAD_NORMAL = 0; /**< @brief VAD with lowest level. */
  public final static int EN_MTC_VAD_LOW = 1; /**< @brief VAD with low level. */
  public final static int EN_MTC_VAD_MID = 2; /**< @brief VAD with moderate level. */
  public final static int EN_MTC_VAD_HIGH = 3; /**< @brief VAD with high level. */

  // EN_MTC_MFILE_TYPE 
  public final static int EN_MTC_MFILE_UNKNOW = 0; /**< @brief Unknow file type. */
  public final static int EN_MTC_MFILE_PCM = EN_MTC_MFILE_UNKNOW + 1; /**< @brief PCM file. */
  public final static int EN_MTC_MFILE_WAV = EN_MTC_MFILE_PCM + 1; /**< @brief WAV file. */
  public final static int EN_MTC_MFILE_WAV_PCM = EN_MTC_MFILE_WAV + 1; /**< @brief WAV file with codec of PCM. */
  public final static int EN_MTC_MFILE_WAV_PCMU = EN_MTC_MFILE_WAV_PCM + 1; /**< @brief WAV file with codec of PCMU. */
  public final static int EN_MTC_MFILE_WAV_PCM_32K = EN_MTC_MFILE_WAV_PCMU + 1; /**< @brief WAV file with codec of L16-32kHz*/
  public final static int EN_MTC_MFILE_WAV_PCMA = EN_MTC_MFILE_WAV_PCM_32K + 1; /**< @brief WAV file with codec of PCMA. */
  public final static int EN_MTC_MFILE_ILBC = EN_MTC_MFILE_WAV_PCMA + 1; /**< @brief WAV file with codec of iLBC. */
  public final static int EN_MTC_MFILE_AMR = EN_MTC_MFILE_ILBC + 1; /**< @brief WAV file with codec of AMR. */
  public final static int EN_MTC_MFILE_AVI = EN_MTC_MFILE_AMR + 1; /**< @brief AVI file. */
  public final static int EN_MTC_MFILE_AVI_VP8 = EN_MTC_MFILE_AVI + 1; /**< @brief AVI file with codec of VP8. */
  public final static int EN_MTC_MFILE_AVI_I420 = EN_MTC_MFILE_AVI_VP8 + 1; /**< @brief AVI file with codec of I420. */
  public final static int EN_MTC_MFILE_AVI_H264 = EN_MTC_MFILE_AVI_I420 + 1; /**< @brief AVI file with codec of H264. */
  public final static int EN_MTC_MFILE_MP4_H264 = EN_MTC_MFILE_AVI_H264 + 1; /**< @brief MP4 file with codec of H264. */

  // EN_MTC_AUDIO_SOURCE 
  public final static int EN_MTC_AUDIO_SOURCE_NO = 0; /**< @brief no audio source. */
  public final static int EN_MTC_AUDIO_SOURCE_MIC = EN_MTC_AUDIO_SOURCE_NO + 1; /**< @brief mic audio source. */
  public final static int EN_MTC_AUDIO_SOURCE_PLAYOUT = EN_MTC_AUDIO_SOURCE_MIC + 1; /**< @brief playout source file. */
  public final static int EN_MTC_AUDIO_SOURCE_CALL = EN_MTC_AUDIO_SOURCE_PLAYOUT + 1; /**< @brief send and playout mixed source. */

  // EN_MTC_DISPLAY_MODE 
  public final static int EN_MTC_DISPLAY_FULL_CONTENT = 0; /**< @brief Scale size to fit display area with ratio unchanged */
  public final static int EN_MTC_DISPLAY_FULL_SCREEN = EN_MTC_DISPLAY_FULL_CONTENT + 1; /**< @brief Scale size to fullfill display area with ratio unchanged */

  // EN_MTC_AN_MODE 
  public final static int EN_MTC_AN_UNKNOW = 0; /**< @brief Invalid mode type. */
  public final static int EN_MTC_AN_LOW = EN_MTC_AN_UNKNOW + 1; /**< @brief Low bitrate mode. */
  public final static int EN_MTC_AN_MID = EN_MTC_AN_LOW + 1; /**< @brief Middle bitrate mode. */
  public final static int EN_MTC_AN_HIGH = EN_MTC_AN_MID + 1; /**< @brief High bitrate mode. */

  // EN_MTC_AUIDO_STREAM_TYPE 
  public final static int EN_MTC_AUDIO_STREAM_INVALID = -1;
  public final static int EN_MTC_AUDIO_STREAM_VOICE_CALL = 0x00;
  public final static int EN_MTC_AUDIO_STREAM_SYSTEM = 0x01;
  public final static int EN_MTC_AUDIO_STREAM_MUSIC = 0x03;

  // EN_MTC_REC_QUALITY 
  public final static int EN_MTC_REC_QUALITY_LOW = 0; /**< @brief low record video quality using low bitrate */
  public final static int EN_MTC_REC_QUALITY_MID = EN_MTC_REC_QUALITY_LOW + 1; /**< @brief middle record video quality using middle bitrate */
  public final static int EN_MTC_REC_QUALITY_HIGH = EN_MTC_REC_QUALITY_MID + 1; /**< @brief high record video quality using high bitrate */

}
