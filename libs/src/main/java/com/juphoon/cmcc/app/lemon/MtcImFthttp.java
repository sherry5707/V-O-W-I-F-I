/**
 * @file MtcImFthttp.java
 * @brief MtcImFthttp interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcImFthttp interface
 */
public class MtcImFthttp implements MtcImFthttpConstants {
/**
 * @brief MTC Sending a file via http to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FTHTTP_CONT_TXT_PLAIN etc.
 * @param [in] pData The file thumbnail data, thumbnail  shall  be  smaller  than  10  kB 
 * @param [in] iDataSize The file thumbnail size, thumbnail  shall  be  smaller  than  10  kB 
 *
 * @return The file transfer via http id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFtHttpO(Object zCookie, String pcUri, String pcFileName, String pcFileType, byte[] pData) {
    return MtcImFthttpJNI.Mtc_ImFtHttpO(zCookie, pcUri, pcFileName, pcFileType, pData);
  }

/**
 * @brief MTC Sending a file via http to group chat.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcGroupChatId The group chat id(Contribution-ID or Conversation-ID).
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type, see @ref MTC_IM_FTHTTP_CONT_TXT_PLAIN.
 * @param [in] pData The file thumbnail data, thumbnail  shall  be  smaller  than  10  kB 
 * @param [in] iDataSize The file thumbnail size, thumbnail  shall  be  smaller  than  10  kB 
 *
 * @return The file transfer via http id, send file transfer invitation successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFtHttpG(Object zCookie, int iPartpLstId, String pcGroupChatId, String pcFileName, String pcFileType, byte[] pData) {
    return MtcImFthttpJNI.Mtc_ImFtHttpG(zCookie, iPartpLstId, pcGroupChatId, pcFileName, pcFileType, pData);
  }

/**
 * @brief MTC Resume a file transfer via http to one participant.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] bSender The user is file sender if ZRTUE.
 * @param [in] pcUri The participant URI.
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] pcFtHttpTId file Transaction ID for resume.
 * @param [in] iStartOffset The file start offset, value must bigger than 0.
 * @param [in] iStopOffset The file stop offset, value 0 means the end of whole file.
 *
 * @return The file transfer via http id, if file resume successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFtHttpResumeO(Object zCookie, boolean bSender, String pcUri, String pcFileName, String pcFileType, String pcFtHttpTId, int iStartOffset, int iStopOffset) {
    return MtcImFthttpJNI.Mtc_ImFtHttpResumeO(zCookie, bSender, pcUri, pcFileName, pcFileType, pcFtHttpTId, iStartOffset, iStopOffset);
  }

/**
 * @brief MTC Resume a file transfer via http to group chat.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] bSender The user is file sender if ZRTUE.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcGroupChatId The group chat id(Contribution-ID or Conversation-ID).
 * @param [in] pcFileName The file name.
 * @param [in] pcFileType The file type.
 * @param [in] pcFtHttpTId file Transaction ID for resume.
 * @param [in] iStartOffset The file start offset, value must bigger than 0.
 * @param [in] iStopOffset The file stop offset, value 0 means the end of whole file.
 *
 * @return The file transfer via http id, if file resume successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImFtHttpResumeG(Object zCookie, boolean bSender, int iPartpLstId, String pcGroupChatId, String pcFileName, String pcFileType, String pcFtHttpTId, int iStartOffset, int iStopOffset) {
    return MtcImFthttpJNI.Mtc_ImFtHttpResumeG(zCookie, bSender, iPartpLstId, pcGroupChatId, pcFileName, pcFileType, pcFtHttpTId, iStartOffset, iStopOffset);
  }

/**
 * @brief MTC Accept a file transfer via http invitation.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 * @param [in] pcFileName The file name.
 *
 * @retval MtcCommonConstants::ZOK Accept file transfer via http invitation successfully.
 * @retval MtcCommonConstants::ZFAILED Accept file transfer via http invitation failed.
 */
  public static int Mtc_ImFtHttpAccept(int iFtHttpId, String pcFileName) {
    return MtcImFthttpJNI.Mtc_ImFtHttpAccept(iFtHttpId, pcFileName);
  }

/**
 * @brief MTC Reject a file transfer via http invitation.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @retval MtcCommonConstants::ZOK Reject file transfer invitation via http successfully.
 * @retval MtcCommonConstants::ZFAILED Reject file transfer via http invitation failed.
 */
  public static int Mtc_ImFtHttpReject(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpReject(iFtHttpId);
  }

/**
 * @brief MTC Cancel a file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @retval MtcCommonConstants::ZOK Cancel file transfer via http successfully.
 * @retval MtcCommonConstants::ZFAILED Cancel file transfer via http  failed.
 */
  public static int Mtc_ImFtHttpCancel(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpCancel(iFtHttpId);
  }

/**
 * @brief MTC Release a file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @retval MtcCommonConstants::ZOK Release file transfer via http successfully.
 * @retval MtcCommonConstants::ZFAILED Release file transfer via http failed.
 */
  public static int Mtc_ImFtHttpRelease(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpRelease(iFtHttpId);
  }

/**
 * @brief MTC Get user cookie from a file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @return User cookie.
 */
  public static Object Mtc_ImFtHttpGetCookie(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetCookie(iFtHttpId);
  }

/**
 * @brief MTC Set user cookie in a file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 * @param [in] zCookie The user cookie.
 *
 * @retval MtcCommonConstants::ZOK Set user cookie successfully.
 * @retval MtcCommonConstants::ZFAILED Set user cookie failed.
 */
  public static int Mtc_ImFtHttpSetCookie(int iFtHttpId, Object zCookie) {
    return MtcImFthttpJNI.Mtc_ImFtHttpSetCookie(iFtHttpId, zCookie);
  }

/**
 * @brief MTC Get message data from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @return message data.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFtHttpGetMsgData(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetMsgData(iFtHttpId);
  }

/**
 * @brief MTC Get file url from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @return File url.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFtHttpGetUrl(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetUrl(iFtHttpId);
  }

/**
 * @brief MTC Get file validity from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @return File validity
 */
  public static int Mtc_ImFtHttpGetValidity(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetValidity(iFtHttpId);
  }

/**
 * @brief MTC Get the Imdn type from file transfer via http.
 *
 * @param [in] iFtHttpId The The file transfer via http id.
 *
 * @return Type of message, @ref EN_MTC_IM_FTHTTP_IMDN_ITYPE.
 */
  public static int Mtc_ImFtHttpGetImdnType(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetImdnType(iFtHttpId);
  }

/**
 * @brief MTC get imdn message-id from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer id via http id.
 *
 * @return The Imdn message-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFtHttpGetImdnMsgId(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetImdnMsgId(iFtHttpId);
  }

/**
 * @brief MTC Get file Transaction ID string from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @return The file Transaction ID.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFtHttpGetTransId(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetTransId(iFtHttpId);
  }

/**
 * @brief MTC Get group chat id from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @return The group chat id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFtHttpGetGrpChatId(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetGrpChatId(iFtHttpId);
  }

/**
 * @brief MTC Get file name from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @retval File name.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFtHttpGetName(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetName(iFtHttpId);
  }

/**
 * @brief MTC Get file path from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @retval File name.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImFtHttpGetPath(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetPath(iFtHttpId);
  }

  public static String Mtc_ImFtHttpGetType(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetType(iFtHttpId);
  }

/**
 * @brief MTC Get file size from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer id via http.
 *
 * @return The file size.
 */
  public static int Mtc_ImFtHttpGetSize(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetSize(iFtHttpId);
  }

/**
 * @brief MTC Get sent file data size from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer id via http.
 *
 * @return The file data sent size.
 */
  public static int Mtc_ImFtHttpGetSentSize(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetSentSize(iFtHttpId);
  }

/**
 * @brief MTC Get received file data size from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer id via http.
 *
 * @return The file data received size.
 */
  public static int Mtc_ImFtHttpGetRecvSize(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetRecvSize(iFtHttpId);
  }

/**
 * @brief MTC Get file start offset from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer id via http.
 *
 * @retval The file start offset.
 */
  public static int Mtc_ImFtHttpGetStartOffset(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetStartOffset(iFtHttpId);
  }

/**
 * @brief MTC Get file start offset from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer id via http.
 *
 * @retval The file stop offset.
 */
  public static int Mtc_ImFtHttpGetStopOffset(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetStopOffset(iFtHttpId);
  }

/**
 * @brief MTC Get participant type from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer id.
 *
 * @return Type of IM file transfer via http participant, see @ref MtcPartpConstants::EN_MTC_PARTP_LST_ONE.
 * If type is EN_MTC_PARTP_LST_ONE, participant can be got by @ref MtcImFthttp::Mtc_ImFtHttpGetPartp.
 * If type is EN_MTC_PARTP_LST_PREDEF_GRP, participant can be got by @ref MtcImFthttp::Mtc_ImFtHttpGetPartp.
 * If type is EN_MTC_PARTP_LST_URI_LST, participant can be got by @ref MtcImFthttp::Mtc_ImFtHttpGetPartpLstId.
 */
  public static int Mtc_ImFtHttpGetPartpType(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetPartpType(iFtHttpId);
  }

/**
 * @brief MTC Get participant information from file transfer via http.
 *
 * The participant is the remote client who transferred file via http.
 *
 * @param [in] iFtHttpId The file transfer id via http.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 * 
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get participant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get participant information failed.
 */
  public static int Mtc_ImFtHttpGetPartp(int iFtHttpId, MtcString ppcName, MtcString ppcUri) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetPartp(iFtHttpId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get participant list id from file transfer via http.
 *
 * The participant list id is all remote clients who transferred file.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @return The participant list id.
 *  The caller is responsible for freeing it by @ref MtcPartp::Mtc_PartpLstDelete.
 */
  public static int Mtc_ImFtHttpGetPartpLstId(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetPartpLstId(iFtHttpId);
  }

/**
 * @brief MTC Get original participant URI from file transfer via http.
 *
 * The participant is the session initiator who initialized this file transfer via http.
 * It will return local URI if local client is the file transfer initiator.
 * It will return From uri from file transfer invitation information.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 * 
 * The caller must copy out parameter, then use.
 *
 * @retval MtcCommonConstants::ZOK Get original participant successfully.
 * @retval MtcCommonConstants::ZFAILED Get original participant failed.
 */
  public static int Mtc_ImFtHttpGetOrigIdPartp(int iFtHttpId, MtcString ppcName, MtcString ppcUri) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetOrigIdPartp(iFtHttpId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get date time from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 * @param [in,out] pstTime The date time value. 
 *
 * @retval MtcCommonConstants::ZOK Get date time successfully.
 * @retval MtcCommonConstants::ZFAILED Get date time date failed.
 */
  public static int Mtc_ImFtHttpGetSysDateTime(int iFtHttpId, SWIGTYPE_p_ST_MTC_SYS_TIME pstTime) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetSysDateTime(iFtHttpId, SWIGTYPE_p_ST_MTC_SYS_TIME.getCPtr(pstTime));
  }

/**
 * @brief MTC Get date time from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @return file transfer date time, otherwise return 0.
 */
  public static int Mtc_ImFtHttpGetDateTime(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetDateTime(iFtHttpId);
  }

/**
 * @brief MTC Get thumbnail flag from file transfer via http.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @retval return true if file transfer via http has thumbnail otherwise return false.
 */
  public static boolean Mtc_ImFtHttpHasThumb(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpHasThumb(iFtHttpId);
  }

  public static int Mtc_ImFtHttpGetThumbData(int iFtHttpId, MtcByteArray ppData) {
    return MtcImFthttpJNI.Mtc_ImFtHttpGetThumbData(iFtHttpId, ppData);
  }

/**
 * @brief MTC Clear thumbnail date.
 *
 * @param [in] iFtHttpId The file transfer via http id.
 *
 * @retval MtcCommonConstants::ZOK Clear thumbnail date successfully.
 * @retval MtcCommonConstants::ZFAILED Clear thumbnail date failed.
 */
  public static int Mtc_ImFtHttpClrThumbData(int iFtHttpId) {
    return MtcImFthttpJNI.Mtc_ImFtHttpClrThumbData(iFtHttpId);
  }

}
