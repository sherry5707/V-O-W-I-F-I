/**
 * @file MtcIm.java
 * @brief MtcIm interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcIm interface
 */
public class MtcIm implements MtcImConstants {
/**
 * @brief Sending Instant Message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] bOmaIm The message will set a flag with +g.oma.sip-im.
 * @param [in] bCpim The message body format, text plain or CPIM.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS, @ref MtcIm::Mtc_ImPMsgSendU
 */
  public static int Mtc_ImPMsgSend(Object zCookie, String pcUri, String pcMsg, boolean bOmaIm, boolean bCpim) {
    return MtcImJNI.Mtc_ImPMsgSend(zCookie, pcUri, pcMsg, bOmaIm, bCpim);
  }

/**
 * @brief ReSending Instant Message to one participant only used for cmcc.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] bOmaIm The message will set a flag with +g.oma.sip-im.
 * @param [in] bCpim The message body format, text plain or CPIM.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS, @ref MtcIm::Mtc_ImPMsgSendU
 */
  public static int Mtc_ImPMsgReSend(Object zCookie, String pcUri, String pcMsg, boolean bOmaIm, boolean bCpim, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSend(zCookie, pcUri, pcMsg, bOmaIm, bCpim, pcReImdnId);
  }

/**
 * @brief Sending Burn After Reading Instant Message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * Gui can get the burn after reading flag when receiving IM by @ref MtcIm::Mtc_ImPMsgHasBurnInd.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 *
 * @return The message id when send burn after reading message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendB(Object zCookie, String pcUri, String pcMsg) {
    return MtcImJNI.Mtc_ImPMsgSendB(zCookie, pcUri, pcMsg);
  }

/**
 * @brief ReSending Burn After Reading Instant Message to one participant.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * Gui can get the burn after reading flag when receiving IM by @ref MtcIm::Mtc_ImPMsgHasBurnInd.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send burn after reading message successfully, 
 *              otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendB(Object zCookie, String pcUri, String pcMsg, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendB(zCookie, pcUri, pcMsg, pcReImdnId);
  }

/**
 * @brief Sending Instant Message to participant list.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] bOmaIm The message will set a flag with +g.oma.sip-im.
 * @param [in] bCpim The message body format, text plain or CPIM.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS, @ref MtcIm::Mtc_ImPMsgSend
 */
  public static int Mtc_ImPMsgSendU(Object zCookie, int iPartpLstId, String pcMsg, boolean bOmaIm, boolean bCpim) {
    return MtcImJNI.Mtc_ImPMsgSendU(zCookie, iPartpLstId, pcMsg, bOmaIm, bCpim);
  }

/**
 * @brief ReSending Instant Message to participant list.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] bOmaIm The message will set a flag with +g.oma.sip-im.
 * @param [in] bCpim The message body format, text plain or CPIM.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS, @ref MtcIm::Mtc_ImPMsgSend
 */
  public static int Mtc_ImPMsgReSendU(Object zCookie, int iPartpLstId, String pcMsg, boolean bOmaIm, boolean bCpim, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendU(zCookie, iPartpLstId, pcMsg, bOmaIm, bCpim, pcReImdnId);
  }

/**
 * @brief Sending Public Message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS
 */
  public static int Mtc_ImPMsgSendP(Object zCookie, String pcUri, String pcMsg, boolean bCpim) {
    return MtcImJNI.Mtc_ImPMsgSendP(zCookie, pcUri, pcMsg, bCpim);
  }

/**
 * @brief ReSending Public Message to one participant.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS
 */
  public static int Mtc_ImPMsgReSendP(Object zCookie, String pcUri, String pcMsg, boolean bCpim, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendP(zCookie, pcUri, pcMsg, bCpim, pcReImdnId);
  }

/**
 * @brief Sending vemoticon message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The vemoticon xml message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendV(Object zCookie, String pcUri, String pcMsgXml, boolean bCpim) {
    return MtcImJNI.Mtc_ImPMsgSendV(zCookie, pcUri, pcMsgXml, bCpim);
  }

/**
 * @brief ReSending vemoticon message to one participant.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The vemoticon xml message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendV(Object zCookie, String pcUri, String pcMsgXml, boolean bCpim, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendV(zCookie, pcUri, pcMsgXml, bCpim, pcReImdnId);
  }

/**
 * @brief Sending vemoticon message to participant list.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list.
 * @param [in] pcMsgXml The vemoticon xml message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendVU(Object zCookie, int iPartpLstId, String pcMsgXml, boolean bCpim) {
    return MtcImJNI.Mtc_ImPMsgSendVU(zCookie, iPartpLstId, pcMsgXml, bCpim);
  }

/**
 * @brief ReSending vemoticon message to participant list.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list.
 * @param [in] pcMsgXml The vemoticon xml message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendVU(Object zCookie, int iPartpLstId, String pcMsgXml, boolean bCpim, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendVU(zCookie, iPartpLstId, pcMsgXml, bCpim, pcReImdnId);
  }

/**
 * @brief Sending Instant Message with cloud file to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The cloud file xml message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
*/
  public static int Mtc_ImPMsgSendC(Object zCookie, String pcUri, String pcMsgXml, boolean bCpim) {
    return MtcImJNI.Mtc_ImPMsgSendC(zCookie, pcUri, pcMsgXml, bCpim);
  }

/**
 * @brief ReSending Instant Message with cloud file to one participant.
 * IM will be sent by SIP MESSAGE method only used by CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The cloud file xml message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
*/
  public static int Mtc_ImPMsgReSendC(Object zCookie, String pcUri, String pcMsgXml, boolean bCpim, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendC(zCookie, pcUri, pcMsgXml, bCpim, pcReImdnId);
  }

/**
 * @brief Sending Instant Message with cloud file to participant list.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsgXml The cloud file xml message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
*/
  public static int Mtc_ImPMsgSendCU(Object zCookie, int iPartpLstId, String pcMsgXml, boolean bCpim) {
    return MtcImJNI.Mtc_ImPMsgSendCU(zCookie, iPartpLstId, pcMsgXml, bCpim);
  }

/**
 * @brief ReSending Instant Message with cloud file to participant list.
 * IM will be sent by SIP MESSAGE method only by CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsgXml The cloud file xml message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
*/
  public static int Mtc_ImPMsgReSendCU(Object zCookie, int iPartpLstId, String pcMsgXml, boolean bCpim, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendCU(zCookie, iPartpLstId, pcMsgXml, bCpim, pcReImdnId);
  }

/**
 * @brief Sending red bag message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The red bag xml message body.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendR(Object zCookie, String pcUri, String pcMsgXml) {
    return MtcImJNI.Mtc_ImPMsgSendR(zCookie, pcUri, pcMsgXml);
  }

/**
 * @brief ReSending red bag message to one participant.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The red bag xml message body.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendR(Object zCookie, String pcUri, String pcMsgXml, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendR(zCookie, pcUri, pcMsgXml, pcReImdnId);
  }

/**
 * @brief Sending card message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The card xml message body.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendD(Object zCookie, String pcUri, String pcMsgXml) {
    return MtcImJNI.Mtc_ImPMsgSendD(zCookie, pcUri, pcMsgXml);
  }

/**
 * @brief ReSending card message to one participant.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The card xml message body.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendD(Object zCookie, String pcUri, String pcMsgXml, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendD(zCookie, pcUri, pcMsgXml, pcReImdnId);
  }

/**
 * @brief Sending card message to to one participant to participant list.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The card xml message body.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendDU(Object zCookie, int iPartpLstId, String pcMsgXml) {
    return MtcImJNI.Mtc_ImPMsgSendDU(zCookie, iPartpLstId, pcMsgXml);
  }

/**
 * @brief ReSending card message to participant list.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsgXml The card xml message body.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendDU(Object zCookie, int iPartpLstId, String pcMsgXml, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendDU(zCookie, iPartpLstId, pcMsgXml, pcReImdnId);
  }

/**
 * @brief Sending multi-media Message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pData The multi-media message body.
 * @param [in] iDataSize The multi-media message size.
 * @param [in] iMsgType The message type.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS
 */
  public static int Mtc_ImPMsgSendM(Object zCookie, String pcUri, byte[] pData, int iMsgType) {
    return MtcImJNI.Mtc_ImPMsgSendM(zCookie, pcUri, pData, iMsgType);
  }

/**
 * @brief ReSending multi-media Message to one participant.
 * IM will be sent by SIP MESSAGE method only used by CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pData The multi-media message body.
 * @param [in] iDataSize The multi-media message size.
 * @param [in] iMsgType The message type.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS
 */
  public static int Mtc_ImPMsgReSendM(Object zCookie, String pcUri, byte[] pData, int iMsgType, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendM(zCookie, pcUri, pData, iMsgType, pcReImdnId);
  }

/**
 * @brief MTC Sending Instant Message to one participant with SMS.
 * IM will send by SIP MESSAGE method. 
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message content type.
 * @param [in] pcFontInfo The font information of message.
 * @param [in] bBurn The burn message flag.
 * @param [out] piMsgId The message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendF(Object zCookie, String pcUri, int iPartpLstId, String pcMsg, int iMsgType, String pcFontInfo, boolean bBurn) {
    return MtcImJNI.Mtc_ImPMsgSendF(zCookie, pcUri, iPartpLstId, pcMsg, iMsgType, pcFontInfo, bBurn);
  }

/**
 * @brief MTC ReSending Instant Message to one participant.
 * IM will send by SIP MESSAGE method. 
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message content type.
 * @param [in] pcFontInfo The font information of message.
 * @param [in] bBurn The burn message flag.
 * @param [in] pcReImdnId The resend imdn message id.
 * @param [out] piMsgId The message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendF(Object zCookie, String pcUri, int iPartpLstId, String pcMsg, int iMsgType, String pcFontInfo, boolean bBurn, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendF(zCookie, pcUri, iPartpLstId, pcMsg, iMsgType, pcFontInfo, bBurn, pcReImdnId);
  }

/**
 * @brief Sending Instant Message to one participant with SMS.
 * IM will send by SIP MESSAGE method. 
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] bOmaIm The OMA IM flag, add "+g.oma.sip-im" paramter.
 * @param [in] bOmaRcs The OMA RCS flag, add "sms" behind bOmaIm.
 * @param [in] bSmsInd The OMA RCS flag, add "sms;operation=submit" 
                                    in "P-Message-Type-Indicator".
 * @param [in] bCpim The CPIM message format flag.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendX(Object zCookie, String pcUri, String pcMsg, boolean bOmaIm, boolean bOmaRcs, boolean bSmsInd, boolean bCpim) {
    return MtcImJNI.Mtc_ImPMsgSendX(zCookie, pcUri, pcMsg, bOmaIm, bOmaRcs, bSmsInd, bCpim);
  }

/**
 * @brief ReSending Instant Message to one participant with SMS.
 * IM will send by SIP MESSAGE method only used by CMCC. 
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] bOmaIm The OMA IM flag, add "+g.oma.sip-im" paramter.
 * @param [in] bOmaRcs The OMA RCS flag, add "sms" behind bOmaIm.
 * @param [in] bSmsInd The OMA RCS flag, add "sms;operation=submit" 
                                    in "P-Message-Type-Indicator".
 * @param [in] bCpim The CPIM message format flag.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendX(Object zCookie, String pcUri, String pcMsg, boolean bOmaIm, boolean bOmaRcs, boolean bSmsInd, boolean bCpim, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendX(zCookie, pcUri, pcMsg, bOmaIm, bOmaRcs, bSmsInd, bCpim, pcReImdnId);
  }

/**
 * @brief Sending Instant Message to one participant with RCS SMS.
 * IM will send by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSend
 */
  public static int Mtc_ImPMsgSendRS(Object zCookie, String pcUri, String pcMsg) {
    return MtcImJNI.Mtc_ImPMsgSendRS(zCookie, pcUri, pcMsg);
  }

/**
 * @brief Sending Instant Message to one participant with spam information.
 * IM will send by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImConstants::EN_MTC_PMSG_CONT_UNKNOWN.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendS(Object zCookie, String pcMsg, int iMsgType, String pcFromUri, String pcToUri, long zDate) {
    return MtcImJNI.Mtc_ImPMsgSendS(zCookie, pcMsg, iMsgType, pcFromUri, pcToUri, zDate);
  }

/**
 * @brief ReSending Instant Message to one participant with spam information.
 * IM will send by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImConstants::EN_MTC_PMSG_CONT_UNKNOWN.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendS(Object zCookie, String pcMsg, int iMsgType, String pcFromUri, String pcToUri, long zDate, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendS(zCookie, pcMsg, iMsgType, pcFromUri, pcToUri, zDate, pcReImdnId);
  }

/**
 * @brief Sending Instant Message to one participant with spam information.
 * IM will send by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImConstants::EN_MTC_PMSG_CONT_UNKNOWN.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] iSpamType The spam information type.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendST(Object zCookie, String pcMsg, int iMsgType, String pcFromUri, String pcToUri, long zDate, int iSpamType) {
    return MtcImJNI.Mtc_ImPMsgSendST(zCookie, pcMsg, iMsgType, pcFromUri, pcToUri, zDate, iSpamType);
  }

/**
 * @brief ReSending Instant Message to one participant with spam information.
 * IM will send by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message type, see @ref MtcImConstants::EN_MTC_PMSG_CONT_UNKNOWN.
 * @param [in] pcFromUri The from uri.
 * @param [in] pcToUri The to uri.
 * @param [in] zDate The date(milliseconds).
 * @param [in] pcReImdnId The resend imdn message id.
 * @param [in] iSpamType The spam information type.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendST(Object zCookie, String pcMsg, int iMsgType, String pcFromUri, String pcToUri, long zDate, String pcReImdnId, int iSpamType) {
    return MtcImJNI.Mtc_ImPMsgReSendST(zCookie, pcMsg, iMsgType, pcFromUri, pcToUri, zDate, pcReImdnId, iSpamType);
  }

/**
 * @brief Sending Instant Message to group chat participant.
 * IM will send by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendG(Object zCookie, String pcUri, String pcMsg, boolean bCpim) {
    return MtcImJNI.Mtc_ImPMsgSendG(zCookie, pcUri, pcMsg, bCpim);
  }

/**
 * @brief ReSending Instant Message to group chat participant.
 * IM will send by SIP MESSAGE method only used by CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] bCpim The message body format, text plain or CPIM.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgReSendG(Object zCookie, String pcUri, String pcMsg, boolean bCpim, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendG(zCookie, pcUri, pcMsg, bCpim, pcReImdnId);
  }

/**
 * @brief Sending Instant Message to one participant with SMS.
 * IM will send by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body, formated by SMS.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendSms(Object zCookie, String pcUri, String pcMsg) {
    return MtcImJNI.Mtc_ImPMsgSendSms(zCookie, pcUri, pcMsg);
  }

/**
 * @brief Sending ex-vcard message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The ex-vcard message body.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendExvcard(Object zCookie, String pcUri, String pcMsg) {
    return MtcImJNI.Mtc_ImPMsgSendExvcard(zCookie, pcUri, pcMsg);
  }

/**
 * @brief Sending x-vcard message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The x-vcard message body.
 * @param [in] pcConvId The conversation id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendXvcard(Object zCookie, String pcUri, String pcMsg, String pcConvId) {
    return MtcImJNI.Mtc_ImPMsgSendXvcard(zCookie, pcUri, pcMsg, pcConvId);
  }

/**
 * @brief Sending bgm mix message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The xml message body.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgSendBgmMix(Object zCookie, String pcUri, String pcMsg) {
    return MtcImJNI.Mtc_ImPMsgSendBgmMix(zCookie, pcUri, pcMsg);
  }

/**
 * @brief Sending Instant Message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message content type.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS, @ref MtcIm::Mtc_ImPMsgSendU
 */
  public static int Mtc_ImPMsgSendN(Object zCookie, String pcUri, String pcMsg, int iMsgType) {
    return MtcImJNI.Mtc_ImPMsgSendN(zCookie, pcUri, pcMsg, iMsgType);
  }

/**
 * @brief ReSending Instant Message to one participant only used for cmcc.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message content type.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS, @ref MtcIm::Mtc_ImPMsgSendU
 */
  public static int Mtc_ImPMsgReSendN(Object zCookie, String pcUri, String pcMsg, int iMsgType, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendN(zCookie, pcUri, pcMsg, iMsgType, pcReImdnId);
  }

/**
 * @brief Sending Instant Message to participant list.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message content type.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS, @ref MtcIm::Mtc_ImPMsgSend
 */
  public static int Mtc_ImPMsgSendUN(Object zCookie, int iPartpLstId, String pcMsg, int iMsgType) {
    return MtcImJNI.Mtc_ImPMsgSendUN(zCookie, iPartpLstId, pcMsg, iMsgType);
  }

/**
 * @brief ReSending Instant Message to participant list.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] iPartpLstId The participant list id.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgType The message content type.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS, @ref MtcIm::Mtc_ImPMsgSend
 */
  public static int Mtc_ImPMsgReSendUN(Object zCookie, int iPartpLstId, String pcMsg, int iMsgType, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendUN(zCookie, iPartpLstId, pcMsg, iMsgType, pcReImdnId);
  }

/**
 * @brief Sending callcomposer Message to one participant.
 * IM will be sent by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS
 */
  public static int Mtc_ImPMsgSendE(Object zCookie, String pcUri, String pcMsg) {
    return MtcImJNI.Mtc_ImPMsgSendE(zCookie, pcUri, pcMsg);
  }

/**
 * @brief ReSending callcomposer Message to one participant.
 * IM will be sent by SIP MESSAGE method Only used for CMCC.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * While receiving IM, GUI will be notified by callback which was set by 
 * @ref mtcImCbPMsgRecvMsg or @ref mtcImCbPMsgRecvSmsInfo.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] pcReImdnId The resend imdn message id.
 *
 * @return The message id when send message successfully, otherwise return ZMAXUINT.
 *
 * @see @ref MtcIm::Mtc_ImPMsgSendRS
 */
  public static int Mtc_ImPMsgReSendE(Object zCookie, String pcUri, String pcMsg, String pcReImdnId) {
    return MtcImJNI.Mtc_ImPMsgReSendE(zCookie, pcUri, pcMsg, pcReImdnId);
  }

/**
 * @brief Reply to specific standalone page mode message.
 * CPM message will send by SIP MESSAGE method.
 *
 * The result will be notified by callbacks which were set by 
 * @ref mtcImCbPMsgSendOk or @ref mtcImCbPMsgSendFailed.
 *
 * @param [in] zCookie The user cookie.
 * @param [in] pcUri The message receiver SIP URI.
 * @param [in] pcMsg The message body.
 * @param [in] iMsgLen The message size.
 * @param [in] iMsgType The message type, @see @ref MtcImConstants::EN_MTC_PMSG_CONT_UNKNOWN.
 * @param [in] pcConvId The conversation-id.
 * @param [in] pcContId The contribution-id reply to.
 *
 * @retval MtcCommonConstants::ZOK Send message successfully.
 * @retval MtcCommonConstants::ZFAILED Send message failed.
 */
  public static int Mtc_ImPMsgReply(Object zCookie, String pcUri, String pcMsg, int iMsgLen, int iMsgType, String pcConvId, String pcContId) {
    return MtcImJNI.Mtc_ImPMsgReply(zCookie, pcUri, pcMsg, iMsgLen, iMsgType, pcConvId, pcContId);
  }

/**
 * @brief MTC Get user cookie from page message.
 *
 * @param [in] iMsgId The message id.
 *
 * @return User cookie.
 */
  public static Object Mtc_ImPMsgGetCookie(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetCookie(iMsgId);
  }

/**
 * @brief MTC Set user cookie in a page message.
 *
 * @param [in] iMsgId The message id.
 * @param [in] zCookie The user cookie.
 *
 * @retval MtcCommonConstants::ZOK Set user cookie successfully.
 * @retval MtcCommonConstants::ZFAILED Set user cookie failed.
 */
  public static int Mtc_ImPMsgSetCookie(int iMsgId, Object zCookie) {
    return MtcImJNI.Mtc_ImPMsgSetCookie(iMsgId, zCookie);
  }

/**
 * @brief MTC Get the Imdn type from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return Type of page message, @ref EN_MTC_PMSG_IMDN_TYPE.
 */
  public static int Mtc_ImPMsgGetImdnType(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetImdnType(iMsgId);
  }

/**
 * @brief MTC Get the imdn message-id from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The page message imdn message-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetImdnMsgId(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetImdnMsgId(iMsgId);
  }

/**
 * @brief MTC Get device id from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The page message device id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetDeviceId(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetDeviceId(iMsgId);
  }

/**
 * @brief MTC Get the content type from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return Type of page message, @ref MtcImConstants::EN_MTC_PMSG_CONT_UNKNOWN.
 *
 * @see @ref Mtc_ImPMsgGetContentTypeX
 */
  public static int Mtc_ImPMsgGetContentType(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetContentType(iMsgId);
  }

/**
 * @brief MTC Get the content length from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The message content length.
 */
  public static int Mtc_ImPMsgGetContentLen(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetContentLen(iMsgId);
  }

/**
 * @brief MTC Get the content from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The page message content.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetContent(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetContent(iMsgId);
  }

/**
 * @brief MTC Get the multi-media content from page message.
 *
 * @param [in] iMsgId The message Id.
 * @param [out] ppData The multi-media message content.
 * @param [out] piDataSize The multi-media message content length.
 *
 * @return The page message content.
 * The caller must copy it, then use.
 */
  public static int Mtc_ImPMsgGetMContent(int iMsgId, MtcByteArray ppData) {
    return MtcImJNI.Mtc_ImPMsgGetMContent(iMsgId, ppData);
  }

/**
 * @brief MMF Get participant type from page message.
 *
 * @param [in] iMsgId The message id.
 *
 * @retval Type of page message participant type, @see @ref MtcPartpConstants::EN_MTC_PARTP_LST_ONE.
 *
 * If type is EN_MTC_PARTP_LST_ONE, participant can be got by Mtc_ImPMsgGetPartp.
 * If type is EN_MTC_PARTP_LST_PREDEF_GRP, participant can be got by Mtc_ImPMsgGetPartp.
 * If type is EN_MTC_PARTP_LST_URI_LST, participant can be got by Mtc_ImPMsgGetPartpLstId.
 */
  public static int Mtc_ImPMsgGetPartpType(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetPartpType(iMsgId);
  }

/**
 * @brief MTC Get participant information from page message.
 * Get receiver information from feion carbon copy page message.
 *
 * The participant is the remote client who sent message.
 *
 * @param [in] iMsgId The message Id.
 * @param [in,out] ppcName The participant name.
 * @param [in,out] ppcUri The participant URI.
 *
 * ppcName and ppcUri must copy it, then use.
 *
 * @retval MtcCommonConstants::ZOK Get participant information successfully.
 * @retval MtcCommonConstants::ZFAILED Get participant information failed.
 */
  public static int Mtc_ImPMsgGetPartp(int iMsgId, MtcString ppcName, MtcString ppcUri) {
    return MtcImJNI.Mtc_ImPMsgGetPartp(iMsgId, ppcName, ppcUri);
  }

/**
 * @brief MTC Get participant list id from im message.
 *
 * The participant list id is all remote clients who are received message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval The participant list id.
 * The caller is responsible for freeing it by Mtc_PartpLstDelete
 */
  public static int Mtc_ImPMsgGetPartpLstId(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetPartpLstId(iMsgId);
  }

/**
 * @brief MTC Get date time from page message.
 *
 * @param [in] iMsgId The message Id.
 * @param [in,out] pstTime The date time value. 
 *
 * @retval MtcCommonConstants::ZOK Get date time successfully.
 * @retval MtcCommonConstants::ZFAILED Get date time failed.
 */
  public static int Mtc_ImPMsgGetSysDateTime(int iMsgId, SWIGTYPE_p_ST_MTC_SYS_TIME pstTime) {
    return MtcImJNI.Mtc_ImPMsgGetSysDateTime(iMsgId, SWIGTYPE_p_ST_MTC_SYS_TIME.getCPtr(pstTime));
  }

/**
 * @brief MTC Get date time from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The page message date time(milliseconds), otherwise return 0.
 */
  public static long Mtc_ImPMsgGetDateTime(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetDateTime(iMsgId);
  }

/**
 * @brief MTC Get font information from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval The font information.
 */
  public static String Mtc_ImPMsgGetFontInfo(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetFontInfo(iMsgId);
  }

/**
 * @brief MTC Get OMA IM flag from page message.
 * OMA IM flag exist in accept header +g.oma.sip-im.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a OMA page message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasOmaIm(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasOmaIm(iMsgId);
  }

/**
 * @brief MTC Get OMA IM flag from IM system message.
 * OMA IM system message flag exist in accept header +g.oma.sip-im.system-message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a OMA IM system message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasOmaImSys(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasOmaImSys(iMsgId);
  }

/**
 * @brief MTC Get RCS SMS flag from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a RCS SMS message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasRcsSms(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasRcsSms(iMsgId);
  }

/**
 * @brief MTC Get sms indication flag from page message.
 * It has "sms;operation=submit" in "P-Message-Type-Indicator".
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a RCS SMS message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasSmsInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasSmsInd(iMsgId);
  }

/**
 * @brief MTC Get conversation-id from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The conversation-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetConvId(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetConvId(iMsgId);
  }

/**
 * @brief MTC Get contribution-id from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The contribution-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetContId(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetContId(iMsgId);
  }

/**
 * @brief MTC Get inreplyto-contribution-id from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The inreplyto-contribution-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetIrtContId(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetIrtContId(iMsgId);
  }

/**
 * @brief MTC Get status code from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval MtcCommonConstants::ZOK Get status code successfully.
 * @retval MtcCommonConstants::ZFAILED Get status code failed.
 */
  public static int Mtc_ImPMsgGetStatCode(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetStatCode(iMsgId);
  }

/**
 * @brief MTC Get public message indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has public message indication, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasPubInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasPubInd(iMsgId);
  }

/**
 * @brief MTC Get group manage message indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has group manage message indication, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasGrpMInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasGrpMInd(iMsgId);
  }

/**
 * @brief MTC Get callcomposer message indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has callcomposer message indication, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasCallComposerInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasCallComposerInd(iMsgId);
  }

/**
 * @brief MTC Get revoke message indication flag from im message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @retval true if it has revoke message indication, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasRevokeMsgInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasRevokeMsgInd(iMsgId);
  }

/**
 * @brief MTC Get burn after reading indication flag from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a burn after reading message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasBurnInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasBurnInd(iMsgId);
  }

/**
 * @brief MTC Get burn after reading time length from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return burn after reading time length.
 */
  public static int Mtc_ImPMsgGetBurnTimeLen(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetBurnTimeLen(iMsgId);
  }

/**
 * @brief MTC Get spam indication flag from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a spam message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasSpamInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasSpamInd(iMsgId);
  }

/**
 * @brief MTC Get directional indication flag from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a directional message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasDirectInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasDirectInd(iMsgId);
  }

/**
 * @brief MTC Get carbon copy indication flag from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a carbon copy message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasCcInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasCcInd(iMsgId);
  }

/**
 * @brief MTC Get silence indication flag from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a silence message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasSilenceInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasSilenceInd(iMsgId);
  }

/**
 * @brief MTC Get offline indication flag from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return true if it is a offline message, otherwise return false.
 */
  public static boolean Mtc_ImPMsgHasOffInd(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgHasOffInd(iMsgId);
  }

/**
 * @brief MTC Get revoke message-id from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke message-id.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetRevokeMsgId(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetRevokeMsgId(iMsgId);
  }

/**
 * @brief MTC Get revoke result from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke result.
 */
  public static short Mtc_ImPMsgGetRevokeResult(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetRevokeResult(iMsgId);
  }

/**
 * @brief MTC Get revoke from addr from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke from addr.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetRevokeFromAddr(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetRevokeFromAddr(iMsgId);
  }

/**
 * @brief MTC Get revoke to addr from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The revoke to addr.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetRevokeToAddr(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetRevokeToAddr(iMsgId);
  }

/**
 * @brief MTC Get the qrcode group-name from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The page message content.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetQrcodeGrpName(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetQrcodeGrpName(iMsgId);
  }

/**
 * @brief MTC Get the qrcode group-Uri from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The page message content.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetQrcodeGrpUri(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetQrcodeGrpUri(iMsgId);
  }

/**
 * @brief MTC Get the qrcode group-proposer from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The page message content.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetQrcodeGrpProposer(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetQrcodeGrpProposer(iMsgId);
  }

/**
 * @brief MTC Get the qrcode reason from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return The page message content.
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgGetQrcodeReason(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetQrcodeReason(iMsgId);
  }

/**
 * @brief MTC Get the qrcode option type from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return Type of page message, @ref MtcImConstants::EN_MTC_PMSG_GROUP_JOIN_NTFY_OPTION_404.
 */
  public static int Mtc_ImPMsgGetQrcodeOptionType(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetQrcodeOptionType(iMsgId);
  }

/**
 * @brief MTC Get app push type from page message.
 *
 * @param [in] iMsgId The message Id.
 *
 * @return app push type if it is a oma push message, otherwise return ZMAXUINT.
 */
  public static int Mtc_ImPMsgGetAppPushType(int iMsgId) {
    return MtcImJNI.Mtc_ImPMsgGetAppPushType(iMsgId);
  }

/**
 * @brief MTC create revoke xml content.
 *
 * @param [in] pcMsgId The revoke message-id.
 * @param [in] pcRevokeResult message revoke result.
 * @param [in] pcFromAddr message revoke from addr.
 * @param [in] pcToAddr message revoke to addr. 
 * The caller must copy it, then use.
 */
  public static String Mtc_ImPMsgCreateRevokeXml(String pcMsgId, String pcRevokeResult, String pcFromAddr, String pcToAddr) {
    return MtcImJNI.Mtc_ImPMsgCreateRevokeXml(pcMsgId, pcRevokeResult, pcFromAddr, pcToAddr);
  }

}
