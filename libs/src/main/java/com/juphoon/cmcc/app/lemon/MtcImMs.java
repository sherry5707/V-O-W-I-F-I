/**
 * @file MtcImMs.java
 * @brief MtcImMs interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcImMs interface
 */
public class MtcImMs implements MtcImMsConstants {
/**
 * @brief MTC create message storage session.
 * @return Message storage session ID when succeed, ZMAXUINT when failed.
 */
  public static int Mtc_ImMsCreate() {
    return MtcImMsJNI.Mtc_ImMsCreate();
  }

/**
 * @brief MTC delete message storage session.
 * @param  iSessId Message storage session ID, created by @ref MtcImMs::Mtc_ImMsCreate
 * @return          MtcCommonConstants::ZOK when succeed, otherwise when failed.
 */
  public static int Mtc_ImMsDelete(int iSessId) {
    return MtcImMsJNI.Mtc_ImMsDelete(iSessId);
  }

/**
 * @brief Set cookie to message storage session.
 * @param  iSessId Message storage session ID.
 * @param  zCookie  Cookie value.
 * @return          MtcCommonConstants::ZOK when succeed, otherwise when failed.
 */
  public static int Mtc_ImMsSetCookie(int iSessId, Object zCookie) {
    return MtcImMsJNI.Mtc_ImMsSetCookie(iSessId, zCookie);
  }

/**
 * @brief Get cookie of message storage session.
 * @param  iSessId Message storage session ID.
 * @return          Cookie value when succeed, 0 when failed.
 */
  public static Object Mtc_ImMsGetCookie(int iSessId) {
    return MtcImMsJNI.Mtc_ImMsGetCookie(iSessId);
  }

/**
 * @brief Start backup progress.
 * @param  iSessId  Message storage session ID.
 * @param  pcDirName String of directory to store backup data.
 * @return           MtcCommonConstants::ZOK when command sent, otherwise when failed.
 */
  public static int Mtc_ImMsBackupBegin(int iSessId, String pcDirName) {
    return MtcImMsJNI.Mtc_ImMsBackupBegin(iSessId, pcDirName);
  }

/**
 * @brief Stop backup progress.
 * @param  iSessId Message storage session ID.
 * @return          MtcCommonConstants::ZOK when command sent, otherwise when failed.
 */
  public static int Mtc_ImMsBackupEnd(int iSessId) {
    return MtcImMsJNI.Mtc_ImMsBackupEnd(iSessId);
  }

/**
 * @brief Append one message object to backup progress.
 * @param  iSessId Message storage session ID.
 * @param  iObjId  Message object ID, create by @ref MtcImMs::Mtc_ImMsObjCreate.
 * @return          MtcCommonConstants::ZOK when command sent, otherwise when failed.
 */
  public static int Mtc_ImMsBackupAppend(int iSessId, int iObjId) {
    return MtcImMsJNI.Mtc_ImMsBackupAppend(iSessId, iObjId);
  }

/**
 * @brief Start restore progress.
 * @param  iSessId  Message storage session ID.
 * @param  pcDirName String of directory restore from.
 * @return           MtcCommonConstants::ZOK when command sent, otherwise when failed.
 */
  public static int Mtc_ImMsRestoreBegin(int iSessId, String pcDirName) {
    return MtcImMsJNI.Mtc_ImMsRestoreBegin(iSessId, pcDirName);
  }

/**
 * @brief Stop restore progress.
 * @param  iSessId Message storage session ID.
 * @return          MtcCommonConstants::ZOK when command sent, otherwise when failed.
 */
  public static int Mtc_ImMsRestoreEnd(int iSessId) {
    return MtcImMsJNI.Mtc_ImMsRestoreEnd(iSessId);
  }

/**
 * @brief Get object count of message storage session.
 * @param  iSessId Message storage session ID.
 * @return          object count value.
 */
  public static int Mtc_ImMsGetObjCount(int iSessId) {
    return MtcImMsJNI.Mtc_ImMsGetObjCount(iSessId);
  }

/**
 * @brief Get empty restore indication flag of message storage session.
 * @param  iSessId Message storage session ID.
 * @return          empty restore indication flag.
 */
  public static boolean Mtc_ImMsGetEmptyRestoreInd(int iSessId) {
    return MtcImMsJNI.Mtc_ImMsGetEmptyRestoreInd(iSessId);
  }

/**
 * @brief Create message object.
 * @param  iType Message object type @ref EN_MTC_IM_MS_OBJ_TYPE.
 * @return       Message object ID, ZMAXUINT when failed.
 */
  public static int Mtc_ImMsObjCreate(int iType) {
    return MtcImMsJNI.Mtc_ImMsObjCreate(iType);
  }

/**
 * @brief Get type of storage object.
 *
 * @param  iObjId Message object.
 *
 * @retval iType Message object type @ref EN_MTC_IM_MS_OBJ_TYPE.
 */
  public static int Mtc_ImMsObjGetType(int iObjId) {
    return MtcImMsJNI.Mtc_ImMsObjGetType(iObjId);
  }

/**
 * @brief Delete message object.
 * @param  iObjId Message object create by @ref MtcImMs::Mtc_ImMsObjCreate.
 * @return         MtcCommonConstants::ZOK when succeed, otherwise when failed.
 */
  public static int Mtc_ImMsObjDelete(int iObjId) {
    return MtcImMsJNI.Mtc_ImMsObjDelete(iObjId);
  }

/** 
 * @brief Add child message object.
 * @param  iObjId   The parent message object ID.
 * @param  iChildId The child message object ID.
 * @return           MtcCommonConstants::ZOK when add succeed, otherwise when failed.
 */
  public static int Mtc_ImMsObjAddChild(int iObjId, int iChildId) {
    return MtcImMsJNI.Mtc_ImMsObjAddChild(iObjId, iChildId);
  }

/**
 * @brief Get the count of children message object.
 * @param  iObjId Message object ID.
 * @return         The count of children message object.
 */
  public static int Mtc_ImMsObjGetChildCount(int iObjId) {
    return MtcImMsJNI.Mtc_ImMsObjGetChildCount(iObjId);
  }

/**
 * @brief Enumerate the child message object ID by index.
 * @param  iObjId Message object ID.
 * @param  iIndex  Index of child message object, from 0 to count-1.
 * @return         The child message object ID when succeed,
 *                 ZMAXUINT when failed.
 */
  public static int Mtc_ImMsObjEnumChild(int iObjId, int iIndex) {
    return MtcImMsJNI.Mtc_ImMsObjEnumChild(iObjId, iIndex);
  }

/**
 * @brief Add information to message object in type of C string.
 * @param  iObjId Message object ID.
 * @param  iType   Information type, @ref EN_MTC_IM_MS_INFO_TYPE.
 * @param  pcValue C string value.
 * @return         MtcCommonConstants::ZOK when succeed, otherwise when failed.
 */
  public static int Mtc_ImMsObjAddStr(int iObjId, int iType, String pcValue) {
    return MtcImMsJNI.Mtc_ImMsObjAddStr(iObjId, iType, pcValue);
  }

/**
 * @brief Add information to message object in type of 64 bits value.
 * @param  iObjId Message object ID.
 * @param  iType   Information type, @ref EN_MTC_IM_MS_INFO_TYPE.
 * @param  qwValue Integer value.
 * @return         MtcCommonConstants::ZOK when succeed, otherwise when failed.
 */
  public static int Mtc_ImMsObjAddInt(int iObjId, int iType, long qwValue) {
    return MtcImMsJNI.Mtc_ImMsObjAddInt(iObjId, iType, qwValue);
  }

/**
 * @brief Add information to message object in type of memory data.
 * @param  iObjId  Message object ID.
 * @param  iType    Information type, @ref EN_MTC_IM_MS_INFO_TYPE.
 * @param  pData    Pointer to memory data.
 * @param  iDataLen Size in bytes of data.
 * @return          MtcCommonConstants::ZOK when succeed, otherwise when failed.
 */
  public static int Mtc_ImMsObjAddData(int iObjId, int iType, byte[] pData) {
    return MtcImMsJNI.Mtc_ImMsObjAddData(iObjId, iType, pData);
  }

/**
 * @brief Get the information value of message object in type of C string.
 * @param  iObjId Message object ID.
 * @param  iType   Information type, @ref EN_MTC_IM_MS_INFO_TYPE.
 * @return         C string of information when succeed, ZNULL when failed.
 */
  public static String Mtc_ImMsObjGetStr(int iObjId, int iType) {
    return MtcImMsJNI.Mtc_ImMsObjGetStr(iObjId, iType);
  }

/**
 * @brief Get the information value of message object in type of 64 bits integer.
 * @param  iObjId Message object ID.
 * @param  iType   Information type, @ref EN_MTC_IM_MS_INFO_TYPE.
 * @return         Integer value of information when succeed, 0 when failed.
 */
  public static long Mtc_ImMsObjGetInt(int iObjId, int iType) {
    return MtcImMsJNI.Mtc_ImMsObjGetInt(iObjId, iType);
  }

/**
 * @brief Get the information value of message object in type of memory data.
 * @param  iObjId   Message object ID.
 * @param  iType   Information type, @ref EN_MTC_IM_MS_INFO_TYPE.
 * @param  ppData    Pointer to store the pointer of memory data.
 * @param  piDataLen Pointer to store the size in bytes of memory data.
 * @return           MtcCommonConstants::ZOK when succeed, otherwise when failed.
 */
  public static int Mtc_ImMsObjGetData(int iObjId, int iType, MtcByteArray ppData) {
    return MtcImMsJNI.Mtc_ImMsObjGetData(iObjId, iType, ppData);
  }

}
