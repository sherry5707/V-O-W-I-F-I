/**
 * @file MtcCp.java
 * @brief MtcCp interface
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.juphoon.cmcc.app.lemon;

/**
 * @brief MtcCp interface
 */
public class MtcCp implements MtcCpConstants {
/**
 * @brief MTC Cilent provisioning configure by primary device.
 * Sending request mesaage to RCS configuration server.
 * Request will be sent by HTTP and HTTPS MESSAGE method.
 *
 * While client provisioning ok, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpOk.
 *
 * While client provisioning failed, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpFailed.
 *
 * While client provisioning receive message only if no working configuration was avaliable before, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpRecvMsg.
 *
 * While client provisioning take place over non-3GPP accsess, 
 * and MSISDN is unavailable or IMSI is not accessible, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpPromptMSISDN.
 *
 * While client provisioning take place over non-3GPP accsess,
 * and client not support SMS UDH procedure, server will send a standard SMS with OTP to client, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpPromptOTP.
 *
 * @param [in] iNetType The network type, @ref MtcCpConstants::EN_MTC_CP_NET_UNKNOWN.
 * @param [in] pcToken The unified authentication token, used when network type is EN_MTC_CP_NET_WIFI.
 *
 * @return The cp id successfully or ZMAXUINT failed, client provisioning will be running.
 */
  public static int Mtc_Cp(int iNetType, String pcToken) {
    return MtcCpJNI.Mtc_Cp(iNetType, pcToken);
  }

/**
 * @brief MTC Cilent provisioning configure by primary device.
 * Sending request mesaage to RCS configuration server.
 * Request will be sent by HTTP and HTTPS MESSAGE method.
 *
 * While client provisioning ok, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpOk.
 *
 * While client provisioning failed, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpFailed.
 *
 * While client provisioning receive message only if no working configuration was avaliable before, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpRecvMsg.
 *
 * While client provisioning take place over non-3GPP accsess, 
 * and MSISDN is unavailable or IMSI is not accessible, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpPromptMSISDN.
 *
 * While client provisioning take place over non-3GPP accsess,
 * and client not support SMS UDH procedure, server will send a standard SMS with OTP to client, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpPromptOTP.
 *
 * @param [in] iNetType The network type, @ref MtcCpConstants::EN_MTC_CP_NET_UNKNOWN.
 * @param [in] pcToken The unified authentication token, used when network type is EN_MTC_CP_NET_WIFI.
 * @param [in] iTimes The times of invoking the function.
 *
 * @return The cp id successfully or ZMAXUINT failed, client provisioning will be running.
 */
  public static int Mtc_CpX(int iNetType, String pcToken, int iTimes) {
    return MtcCpJNI.Mtc_CpX(iNetType, pcToken, iTimes);
  }

/**
 * @brief MTC Cilent provisioning reconfigure by primary device.
 * Sending request mesaage to RCS configuration server.
 * Request will be sent by HTTP and HTTPS MESSAGE method.
 *
 * While client provisioning ok, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpOk.
 *
 * While client provisioning failed, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpFailed.
 *
 * While client provisioning receive message only if no working configuration was avaliable before, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpRecvMsg.
 *
 * While client provisioning take place over non-3GPP accsess, 
 * and MSISDN is unavailable or IMSI is not accessible, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpPromptMSISDN.
 *
 * While client provisioning take place over non-3GPP accsess,
 * and client not support SMS UDH procedure, server will send a standard SMS with OTP to client, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpPromptOTP.
 *
 * @param [in] iNetType The network type, @ref MtcCpConstants::EN_MTC_CP_NET_UNKNOWN.
 *
 * @return The cp id successfully or ZMAXUINT failed, client provisioning will be running.
 */
  public static int Mtc_CpReCfg(int iNetType) {
    return MtcCpJNI.Mtc_CpReCfg(iNetType);
  }

/**
 * @brief MTC Cilent provisioning action.
 *
 * @param [in] iCpId The cp id.
 * @param [in] iActType The action type, @ref MtcCpConstants::EN_MTC_CP_ACT_ACPT.
 *    
 * @retval MtcCommonConstants::ZOK enabling cilent provisioning successfully. 
 * @retval MtcCommonConstants::ZFAILED enabling cilent provisioning failed.
 */
  public static int Mtc_CpAct(int iCpId, int iActType) {
    return MtcCpJNI.Mtc_CpAct(iCpId, iActType);
  }

/**
 * @brief MTC Cilent provisioning validate SMS.
 *
 * @param [in] pcSMS The SMS received from configure server.
 *
 * While validate ok, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpCfgInd or @ref mtcCpCbCpReCfgInd,
 * then GUI must logout client if registered, 
 * and invoke @ref MtcCp::Mtc_Cp or @ref MtcCp::Mtc_CpReCfg.
 *    
 * @retval MtcCommonConstants::ZOK validate successfully. 
 * @retval MtcCommonConstants::ZFAILED validate failed.
 */
  public static int Mtc_CpValidSMS(String pcSMS) {
    return MtcCpJNI.Mtc_CpValidSMS(pcSMS);
  }

/**
 * @brief MTC Cilent provisioning prompt for MSISDN by primary device.
 *
 * @param [in] iCpId The cp id.
 * @param [in] pcMsisdn The MSISDN.
 *    
 * @retval MtcCommonConstants::ZOK operation successfully. 
 * @retval MtcCommonConstants::ZFAILED operation failed.
 */
  public static int Mtc_CpPromptMSISDN(int iCpId, String pcMsisdn) {
    return MtcCpJNI.Mtc_CpPromptMSISDN(iCpId, pcMsisdn);
  }

/**
 * @brief MTC Cilent provisioning prompt for OTP by primary device.
 *
 * @param [in] iCpId The cp id.
 * @param [in] pcOTP The one-time password.
 *    
 * @retval MtcCommonConstants::ZOK operation successfully. 
 * @retval MtcCommonConstants::ZFAILED operation failed.
 */
  public static int Mtc_CpPromptOTP(int iCpId, String pcOTP) {
    return MtcCpJNI.Mtc_CpPromptOTP(iCpId, pcOTP);
  }

/**
 * @brief MTC Cilent provisioning prompt for token by primary device.
 *
 * @param [in] iCpId The cp id.
 * @param [in] pcToken The unified authentication token.
 *    
 * @retval MtcCommonConstants::ZOK operation successfully. 
 * @retval MtcCommonConstants::ZFAILED operation failed.
 */
  public static int Mtc_CpPromptToken(int iCpId, String pcToken) {
    return MtcCpJNI.Mtc_CpPromptToken(iCpId, pcToken);
  }

/**
 * @brief MTC Cilent provisioning end user confirmation request action by primary device.
 *
 * @param [in] iMsgId The msg id.
 * @param [in] iActType @ref MtcCpConstants::EN_MTC_CP_ACT_ACPT.
 * @param [in] pcPIN The personal identification number.
 *    
 * @retval MtcCommonConstants::ZOK operation successfully. 
 * @retval MtcCommonConstants::ZFAILED operation failed.
 */
  public static int Mtc_CpEUCRAct(int iMsgId, int iActType, String pcPIN) {
    return MtcCpJNI.Mtc_CpEUCRAct(iMsgId, iActType, pcPIN);
  }

/**
 * @brief MTC Cilent provisioning by additional device.
 * Sending request mesaage to RCS configuration server.
 * Request will be sent by HTTP and HTTPS MESSAGE method.
 *
 * While client provisioning ok, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpOk.
 *
 * While client provisioning failed, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpFailed.
 *
 * While client provisioning receive message only if no working configuration was avaliable before, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpRecvMsg.
 *
 * While client provisioning take place and the Service Provider use sending a standard SMS 
 * to primary user to confirm the identity of the user, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpPromptOTPSMS.
 *
 * While client provisioning take place and the Service Provider use the 
 * End User Confirmation Request instead of SMS to confirm the identity of the user 
 * and the primary user have an option to enter a PIN, if entered, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpPromptOTPPIN.
 *
 * @return The cp id successfully or ZMAXUINT failed, client provisioning will be running.
 */
  public static int Mtc_CpAD() {
    return MtcCpJNI.Mtc_CpAD();
  }

/**
 * @brief MTC Cilent provisioning by additional device with OTP.
 * Sending request mesaage to RCS configuration server.
 * Request will be sent by HTTP and HTTPS MESSAGE method.
 *
 * While client provisioning ok, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpOk.
 *
 * While client provisioning failed, GUI will be notified by callback which 
 * was set by @ref mtcCpCbCpFailed.
 *
 * While client provisioning receive message only if no working configuration was avaliable before, 
 * GUI will be notified by callback which was set by @ref mtcCpCbCpRecvMsg.
 *
 * @return The cp id successfully or ZMAXUINT failed, client provisioning will be running.
 */
  public static int Mtc_CpADWithOTP(String pcOTP) {
    return MtcCpJNI.Mtc_CpADWithOTP(pcOTP);
  }

/**
 * @brief MTC Cilent provisioning prompt for OTP by additional device.
 *
 * @param [in] iCpId The cp id.
 * @param [in] pcOTP The one-time password.
 *    
 * @retval MtcCommonConstants::ZOK prompt successfully. 
 * @retval MtcCommonConstants::ZFAILED prompt failed.
 */
  public static int Mtc_CpADPromptOTP(int iCpId, String pcOTP) {
    return MtcCpJNI.Mtc_CpADPromptOTP(iCpId, pcOTP);
  }

/**
 * @brief MTC Cilent provisioning prompt for PIN by additional device.
 *
 * @param [in] iCpId The cp id.
 * @param [in] pcPIN The personal identification number.
 *    
 * @retval MtcCommonConstants::ZOK prompt successfully. 
 * @retval MtcCommonConstants::ZFAILED prompt failed.
 */
  public static int Mtc_CpADPromptPIN(int iCpId, String pcPIN) {
    return MtcCpJNI.Mtc_CpADPromptPIN(iCpId, pcPIN);
  }

}
